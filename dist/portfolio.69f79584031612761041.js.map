{"version":3,"file":"portfolio.69f79584031612761041.js","mappings":";sCAIQ,SAAUA,GAAW,aAE3B,SAASC,EAAQC,GACf,OAAOC,MAAMC,UAAUC,MAAMC,KAAKJ,GAGpC,SAASK,EAAiBC,GACxB,OAAO,IAAIC,SAAQ,SAASC,EAASC,GACnCH,EAAQI,UAAY,WAClBF,EAAQF,EAAQK,SAGlBL,EAAQM,QAAU,WAChBH,EAAOH,EAAQO,WAKrB,SAASC,EAAqBC,EAAKC,EAAQC,GACzC,IAAIX,EACAY,EAAI,IAAIX,SAAQ,SAASC,EAASC,GAEpCJ,EADAC,EAAUS,EAAIC,GAAQG,MAAMJ,EAAKE,IACPG,KAAKZ,EAASC,MAI1C,OADAS,EAAEZ,QAAUA,EACLY,EAGT,SAASG,EAA2BN,EAAKC,EAAQC,GAC/C,IAAIC,EAAIJ,EAAqBC,EAAKC,EAAQC,GAC1C,OAAOC,EAAEE,MAAK,SAASE,GACrB,GAAKA,EACL,OAAO,IAAIC,EAAOD,EAAOJ,EAAEZ,YAI/B,SAASkB,EAAgBC,EAAYC,EAAYC,GAC/CA,EAAWC,SAAQ,SAASC,GAC1BC,OAAOC,eAAeN,EAAWvB,UAAW2B,EAAM,CAChDG,IAAK,WACH,OAAOC,KAAKP,GAAYG,IAE1BK,IAAK,SAASC,GACZF,KAAKP,GAAYG,GAAQM,QAMjC,SAASC,EAAoBX,EAAYC,EAAYW,EAAaV,GAChEA,EAAWC,SAAQ,SAASC,GACpBA,KAAQQ,EAAYnC,YAC1BuB,EAAWvB,UAAU2B,GAAQ,WAC3B,OAAOf,EAAqBmB,KAAKP,GAAaG,EAAMS,gBAK1D,SAASC,EAAad,EAAYC,EAAYW,EAAaV,GACzDA,EAAWC,SAAQ,SAASC,GACpBA,KAAQQ,EAAYnC,YAC1BuB,EAAWvB,UAAU2B,GAAQ,WAC3B,OAAOI,KAAKP,GAAYG,GAAMV,MAAMc,KAAKP,GAAaY,gBAK5D,SAASE,EAA0Bf,EAAYC,EAAYW,EAAaV,GACtEA,EAAWC,SAAQ,SAASC,GACpBA,KAAQQ,EAAYnC,YAC1BuB,EAAWvB,UAAU2B,GAAQ,WAC3B,OAAOR,EAA2BY,KAAKP,GAAaG,EAAMS,gBAKhE,SAASG,EAAMC,GACbT,KAAKU,OAASD,EAuBhB,SAASnB,EAAOqB,EAAQtC,GACtB2B,KAAKY,QAAUD,EACfX,KAAKa,SAAWxC,EA+BlB,SAASyC,EAAYC,GACnBf,KAAKgB,OAASD,EAuChB,SAASE,EAAYC,GACnBlB,KAAKmB,IAAMD,EACXlB,KAAKoB,SAAW,IAAI9C,SAAQ,SAASC,EAASC,GAC5C0C,EAAeG,WAAa,WAC1B9C,KAEF2C,EAAevC,QAAU,WACvBH,EAAO0C,EAAetC,QAExBsC,EAAeI,QAAU,WACvB9C,EAAO0C,EAAetC,WAkB5B,SAAS2C,EAAUC,EAAIC,EAAYC,GACjC1B,KAAK2B,IAAMH,EACXxB,KAAKyB,WAAaA,EAClBzB,KAAK0B,YAAc,IAAIT,EAAYS,GAkBrC,SAASE,EAAGJ,GACVxB,KAAK2B,IAAMH,EA/IbjC,EAAgBiB,EAAO,SAAU,CAC/B,OACA,UACA,aACA,WAGFL,EAAoBK,EAAO,SAAUqB,SAAU,CAC7C,MACA,SACA,SACA,aACA,UAGFtB,EAA0BC,EAAO,SAAUqB,SAAU,CACnD,aACA,kBAQFtC,EAAgBD,EAAQ,UAAW,CACjC,YACA,MACA,aACA,UAGFa,EAAoBb,EAAQ,UAAWwC,UAAW,CAChD,SACA,WAIF,CAAC,UAAW,WAAY,sBAAsBnC,SAAQ,SAASoC,GACvDA,KAAcD,UAAU7D,YAC9BqB,EAAOrB,UAAU8D,GAAc,WAC7B,IAAIpB,EAASX,KACThB,EAAOqB,UACX,OAAO/B,QAAQC,UAAUY,MAAK,WAE5B,OADAwB,EAAOC,QAAQmB,GAAY7C,MAAMyB,EAAOC,QAAS5B,GAC1CZ,EAAiBuC,EAAOE,UAAU1B,MAAK,SAASE,GACrD,GAAKA,EACL,OAAO,IAAIC,EAAOD,EAAOsB,EAAOE,qBAUxCC,EAAY7C,UAAU+D,YAAc,WAClC,OAAO,IAAIxB,EAAMR,KAAKgB,OAAOgB,YAAY9C,MAAMc,KAAKgB,OAAQX,aAG9DS,EAAY7C,UAAUwC,MAAQ,WAC5B,OAAO,IAAID,EAAMR,KAAKgB,OAAOP,MAAMvB,MAAMc,KAAKgB,OAAQX,aAGxDd,EAAgBuB,EAAa,SAAU,CACrC,OACA,UACA,aACA,kBAGFX,EAAoBW,EAAa,SAAUmB,eAAgB,CACzD,MACA,MACA,SACA,QACA,MACA,SACA,SACA,aACA,UAGF1B,EAA0BO,EAAa,SAAUmB,eAAgB,CAC/D,aACA,kBAGF3B,EAAaQ,EAAa,SAAUmB,eAAgB,CAClD,gBAkBFhB,EAAYhD,UAAUiE,YAAc,WAClC,OAAO,IAAIpB,EAAYd,KAAKmB,IAAIe,YAAYhD,MAAMc,KAAKmB,IAAKd,aAG9Dd,EAAgB0B,EAAa,MAAO,CAClC,mBACA,SAGFX,EAAaW,EAAa,MAAOkB,eAAgB,CAC/C,UASFZ,EAAUtD,UAAUmE,kBAAoB,WACtC,OAAO,IAAItB,EAAYd,KAAK2B,IAAIS,kBAAkBlD,MAAMc,KAAK2B,IAAKtB,aAGpEd,EAAgBgC,EAAW,MAAO,CAChC,OACA,UACA,qBAGFjB,EAAaiB,EAAW,MAAOc,YAAa,CAC1C,oBACA,UAOFT,EAAG3D,UAAUyD,YAAc,WACzB,OAAO,IAAIT,EAAYjB,KAAK2B,IAAID,YAAYxC,MAAMc,KAAK2B,IAAKtB,aAG9Dd,EAAgBqC,EAAI,MAAO,CACzB,OACA,UACA,qBAGFtB,EAAasB,EAAI,MAAOS,YAAa,CACnC,UAKF,CAAC,aAAc,iBAAiB1C,SAAQ,SAAS2C,GAC/C,CAACxB,EAAaN,GAAOb,SAAQ,SAASS,GAE9BkC,KAAYlC,EAAYnC,YAE9BmC,EAAYnC,UAAUqE,EAASC,QAAQ,OAAQ,YAAc,WAC3D,IAAIvD,EAAOlB,EAAQuC,WACfmC,EAAWxD,EAAKA,EAAKyD,OAAS,GAC9BC,EAAe1C,KAAKgB,QAAUhB,KAAKU,OACnCrC,EAAUqE,EAAaJ,GAAUpD,MAAMwD,EAAc1D,EAAKd,MAAM,GAAI,IACxEG,EAAQI,UAAY,WAClB+D,EAASnE,EAAQK,iBAOzB,CAAC8B,EAAOM,GAAanB,SAAQ,SAASS,GAChCA,EAAYnC,UAAU0E,SAC1BvC,EAAYnC,UAAU0E,OAAS,SAASC,EAAOC,GAC7C,IAAIC,EAAW9C,KACX+C,EAAQ,GAEZ,OAAO,IAAIzE,SAAQ,SAASC,GAC1BuE,EAASE,cAAcJ,GAAO,SAASjC,GAChCA,GAILoC,EAAME,KAAKtC,EAAOtB,YAEJ6D,IAAVL,GAAuBE,EAAMN,QAAUI,EAI3ClC,EAAOwC,WAHL5E,EAAQwE,IANRxE,EAAQwE,cAoClBlF,EAAQuF,OArBR,SAAgBC,EAAMC,EAASC,GAC7B,IAAItE,EAAIJ,EAAqB2E,UAAW,OAAQ,CAACH,EAAMC,IACnDjF,EAAUY,EAAEZ,QAUhB,OARIA,IACFA,EAAQoF,gBAAkB,SAASC,GAC7BH,GACFA,EAAgB,IAAIhC,EAAUlD,EAAQK,OAAQgF,EAAMjC,WAAYpD,EAAQqD,gBAKvEzC,EAAEE,MAAK,SAASqC,GACrB,OAAO,IAAII,EAAGJ,OASlB3D,EAAQ8F,SALR,SAAkBN,GAChB,OAAOxE,EAAqB2E,UAAW,iBAAkB,CAACH,KAM5DxD,OAAOC,eAAejC,EAAS,aAAc,CAAEwB,OAAO,IAxTSuE,CAAQ/F,oBCQzE,IAAiD+F,EAAAA,EASxC,WACT,OAAgB,SAAUC,GAEhB,IAAIC,EAAmB,GAGvB,SAAS,EAAoBC,GAG5B,GAAGD,EAAiBC,GACnB,OAAOD,EAAiBC,GAAUlG,QAGnC,IAAImG,EAASF,EAAiBC,GAAY,CACzClG,QAAS,GACToG,GAAIF,EACJG,QAAQ,GAUT,OANAL,EAAQE,GAAU5F,KAAK6F,EAAOnG,QAASmG,EAAQA,EAAOnG,QAAS,GAG/DmG,EAAOE,QAAS,EAGTF,EAAOnG,QAcf,OATA,EAAoBsG,EAAIN,EAGxB,EAAoBO,EAAIN,EAGxB,EAAoB7E,EAAI,GAGjB,EAAoB,GAvCrB,CA0CN,CAEJ,SAAU+E,EAAQnG,EAAS,GAEhC,aAEAgC,OAAOC,eAAejC,EAAS,aAAc,CAC3CwB,OAAO,IAGT,IAAIgF,EAAe,WAAe,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAM/B,OAAQgC,IAAK,CAAE,IAAIC,EAAaF,EAAMC,GAAIC,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMhF,OAAOC,eAAeyE,EAAQG,EAAWI,IAAKJ,IAAiB,OAAO,SAAUtE,EAAa2E,EAAYC,GAAiJ,OAA9HD,GAAYT,EAAiBlE,EAAYnC,UAAW8G,GAAiBC,GAAaV,EAAiBlE,EAAa4E,GAAqB5E,GAA9gB,GAIf6E,EAAiB,EAAoB,GAErCC,EAAgB,EAAoB,GASpCC,EAAQ,WACV,SAASA,EAAMC,EAAWC,IAd5B,SAAyBvC,EAAU1C,GAAe,KAAM0C,aAAoB1C,GAAgB,MAAM,IAAIkF,UAAU,qCAe5GC,CAAgBvF,KAAMmF,GAGtBF,EAAeO,YAAYC,KAAKzF,KAAMqF,EAASD,GAE/CpF,KAAK0F,QAkdP,OA1cArB,EAAac,EAAO,CAAC,CACnBL,IAAK,SACLzF,MAAO,WACLW,KAAK2F,MAAMC,OAAS5F,KAAK6F,QAAU7F,KAAK8F,SAOzC,CACDhB,IAAK,OACLzF,MAAO,WACDW,KAAK+F,gBACL/F,KAAK2F,MAAMC,SACf5F,KAAKgG,gBAAe,GACpBhG,KAAK2F,MAAMC,QAAS,EACpB5F,KAAKqF,QAAQY,OAAOjG,KAAKkG,SAAUlG,SAOpC,CACD8E,IAAK,QACLzF,MAAO,WACDW,KAAK+F,gBACJ/F,KAAK2F,MAAMC,SAChB5F,KAAK2F,MAAMC,QAAS,EAChB5F,KAAK2F,MAAMQ,UACbnG,KAAKmG,UAAUnG,KAAK2F,MAAMS,UAAWpG,KAAK2F,MAAMU,WAEhDrG,KAAKsG,UAAUtG,KAAK2F,MAAMS,UAAWpG,KAAK2F,MAAMU,WAElDrG,KAAKqF,QAAQkB,QAAQvG,KAAKkG,SAAUlG,SAOrC,CACD8E,IAAK,UACLzF,MAAO,WACLW,KAAKwG,OAAM,GACXxG,KAAKqF,QAAQoB,UAAUzG,QAQxB,CACD8E,IAAK,QACLzF,MAAO,WACL,IAAIqH,EAAUrG,UAAUoC,QAAU,QAAsBS,IAAjB7C,UAAU,IAA0BA,UAAU,GAErFsG,cAAc3G,KAAK4G,SACnB5G,KAAK6G,YAAY,IACb7G,KAAKW,QAAUX,KAAKW,OAAOmG,aAC7B9G,KAAKW,OAAOmG,WAAWC,YAAY/G,KAAKW,QACxCX,KAAKW,OAAS,MAEhBX,KAAKgH,OAAS,EACdhH,KAAKkG,SAAW,EAChBlG,KAAKiH,QAAU,EACXP,IACF1G,KAAKkH,eACLlH,KAAKqF,QAAQ8B,QAAQnH,MACrBA,KAAK0F,WAQR,CACDZ,IAAK,QACLzF,MAAO,WACL,IAAI+H,EAAQpH,KAEZA,KAAKqF,QAAQgC,QAAQrH,MACrBA,KAAK+F,gBAAiB,EACtB/F,KAAKsH,uBAAuBtH,MAC5BA,KAAKkH,eACDlH,KAAKuH,sBAAsBvH,KAAKwH,kBACpCxH,KAAK4G,QAAUa,YAAW,WAEnBL,EAAMM,kBAAsD,IAAlCN,EAAMM,iBAAiBjF,OAIpD2E,EAAMd,UAAUc,EAAMM,iBAAkBN,EAAMM,iBAAiBjF,QAH/D2E,EAAMjB,UAAUiB,EAAMO,QAAQP,EAAMQ,SAASR,EAAMlB,WAAYkB,EAAMJ,UAKtEhH,KAAK6H,cAST,CACD/C,IAAK,YACLzF,MAAO,SAAmB+G,EAAWC,GACnC,IAAIyB,EAAS9H,KAETA,KAAK+H,SAAW/H,KAAKgI,GAAGC,UAAUC,SAASlI,KAAKmI,gBAClDnI,KAAKgI,GAAGC,UAAUG,OAAOpI,KAAKmI,cAC1BnI,KAAKW,QAAQX,KAAKW,OAAOsH,UAAUG,OAAOpI,KAAKmI,eAGrD,IAAIE,EAAWrI,KAAKsI,UAAUtI,KAAKuI,WAC/BC,EAAW,GAEW,IAAtBxI,KAAK2F,MAAMC,OAMf5F,KAAK4G,QAAUa,YAAW,WAExBpB,EAAYnB,EAAcuD,WAAWC,cAActC,EAAWC,EAAWyB,GAEzE,IAAIa,EAAY,EACZC,EAASxC,EAAUwC,OAAOvC,GAI9B,GAAyB,MAArBuC,EAAOC,OAAO,IACZ,SAASC,KAAKF,GAAS,CACzB,IAAIG,EAAO,EAEXA,IADAH,EAAS,MAAMI,KAAKJ,GAAQ,IACbnG,OACfkG,EAAYM,SAASL,GACrBd,EAAOoB,gBAAiB,EACxBpB,EAAOzC,QAAQ8D,eAAerB,EAAO5B,SAAU4B,GAE/C1B,EAAYA,EAAUgD,UAAU,EAAG/C,GAAaD,EAAUgD,UAAU/C,EAAY0C,GAChFjB,EAAO9B,gBAAe,GAM1B,GAAyB,MAArB4C,EAAOC,OAAO,GAAY,CAC5B,KAA4D,MAArDzC,EAAUwC,OAAOvC,EAAYmC,GAAUK,OAAO,KACnDL,MACInC,EAAYmC,EAAWpC,EAAU3D,WAGvC,IAAI4G,EAAmBjD,EAAUgD,UAAU,EAAG/C,GAC1CiD,EAAgBlD,EAAUgD,UAAUC,EAAiB5G,OAAS,EAAG4D,EAAYmC,GAC7Ee,EAAkBnD,EAAUgD,UAAU/C,EAAYmC,EAAW,GACjEpC,EAAYiD,EAAmBC,EAAgBC,EAC/Cf,IAIFV,EAAOlB,QAAUa,YAAW,WAE1BK,EAAO9B,gBAAe,GAGlBK,GAAaD,EAAU3D,OACzBqF,EAAO0B,WAAWpD,EAAWC,GAE7ByB,EAAO2B,WAAWrD,EAAWC,EAAWmC,GAGtCV,EAAOoB,iBACTpB,EAAOoB,gBAAiB,EACxBpB,EAAOzC,QAAQqE,gBAAgB5B,EAAO5B,SAAU4B,MAEjDa,KAGFN,GA9DDrI,KAAK2J,eAAevD,EAAWC,GAAW,KAuE7C,CACDvB,IAAK,aACLzF,MAAO,SAAoB+G,EAAWC,EAAWmC,GAE7B,IAAdnC,IACFrG,KAAKgG,gBAAe,GACpBhG,KAAKqF,QAAQuE,eAAe5J,KAAKkG,SAAUlG,OAI7CqG,GAAamC,EACb,IAAIqB,EAAazD,EAAUwC,OAAO,EAAGvC,GACrCrG,KAAK6G,YAAYgD,GAEjB7J,KAAKmG,UAAUC,EAAWC,KAS3B,CACDvB,IAAK,aACLzF,MAAO,SAAoB+G,EAAWC,GACpC,IAAIyD,EAAS9J,KAGbA,KAAKqF,QAAQ0E,cAAc/J,KAAKkG,SAAUlG,MAC1CA,KAAKgG,gBAAe,GAEhBhG,KAAKkG,WAAalG,KAAK2H,QAAQlF,OAAS,IAE1CzC,KAAKoB,YAEa,IAAdpB,KAAKgK,MAAkBhK,KAAKiH,UAAYjH,KAAKiK,aAInDjK,KAAK4G,QAAUa,YAAW,WACxBqC,EAAOxD,UAAUF,EAAWC,KAC3BrG,KAAKkK,cAST,CACDpF,IAAK,YACLzF,MAAO,SAAmB+G,EAAWC,GACnC,IAAI8D,EAASnK,KAEb,IAA0B,IAAtBA,KAAK2F,MAAMC,OAAf,CAIA,GAAI5F,KAAK+H,QAAS,OAAO/H,KAAKoK,cAE9BpK,KAAKgG,gBAAe,GACpB,IAAIqC,EAAWrI,KAAKsI,UAAUtI,KAAKqK,WAEnCrK,KAAK4G,QAAUa,YAAW,WACxBpB,EAAYnB,EAAcuD,WAAW6B,mBAAmBlE,EAAWC,EAAW8D,GAE9E,IAAII,EAAsBnE,EAAUwC,OAAO,EAAGvC,GAI9C,GAHA8D,EAAOtD,YAAY0D,GAGfJ,EAAOK,eAAgB,CAEzB,IAAIX,EAAaM,EAAOxC,QAAQwC,EAAOjE,SAAW,GAC9C2D,GAAcU,IAAwBV,EAAWjB,OAAO,EAAGvC,GAC7D8D,EAAOM,QAAUpE,EAEjB8D,EAAOM,QAAU,EAMjBpE,EAAY8D,EAAOM,SAErBpE,IAEA8D,EAAO7D,UAAUF,EAAWC,IACnBA,GAAa8D,EAAOM,UAG7BN,EAAOjE,WAEHiE,EAAOjE,WAAaiE,EAAOxC,QAAQlF,QACrC0H,EAAOjE,SAAW,EAClBiE,EAAO9E,QAAQqF,yBACfP,EAAO7C,yBACP6C,EAAOzE,SAEPyE,EAAOhE,UAAUgE,EAAOxC,QAAQwC,EAAOvC,SAASuC,EAAOjE,WAAYG,MAItEgC,QA/CDrI,KAAK2J,eAAevD,EAAWC,GAAW,KAsD7C,CACDvB,IAAK,WACLzF,MAAO,WACLW,KAAKqF,QAAQsF,WAAW3K,MACpBA,KAAKgK,KACPhK,KAAKiH,UAELjH,KAAK+F,gBAAiB,IAWzB,CACDjB,IAAK,iBACLzF,MAAO,SAAwB+G,EAAWC,EAAWuE,GACnD5K,KAAK2F,MAAMQ,UAAYyE,EACvB5K,KAAK2F,MAAMS,UAAYA,EACvBpG,KAAK2F,MAAMU,UAAYA,IAQxB,CACDvB,IAAK,iBACLzF,MAAO,SAAwBwL,GACxB7K,KAAKW,SAENX,KAAK2F,MAAMC,QACX5F,KAAK8K,iBAAmBD,IAC5B7K,KAAK8K,eAAiBD,EAClBA,EACF7K,KAAKW,OAAOsH,UAAU8C,IAAI,uBAE1B/K,KAAKW,OAAOsH,UAAUG,OAAO,2BAShC,CACDtD,IAAK,YACLzF,MAAO,SAAmB2L,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAQ,GAAKA,IAOhD,CACDlG,IAAK,yBACLzF,MAAO,WACAW,KAAKoL,UACVpL,KAAK4H,SAAW5H,KAAK4H,SAASyD,MAAK,WACjC,OAAOJ,KAAKE,SAAW,SAQ1B,CACDrG,IAAK,cACLzF,MAAO,WACL,IAAIiM,EAAStL,KAIb,OAFAA,KAAKgI,GAAGuD,WAAa,IAAMvL,KAAKmI,aAC5BnI,KAAKW,SAAQX,KAAKW,OAAO4K,WAAa,IAAMvL,KAAKmI,cAC9CV,YAAW,WAChB6D,EAAOpF,WACPoF,EAAOzE,YAAY,IAGfyE,EAAO3D,QAAQlF,OAAS6I,EAAOpF,SACjCoF,EAAOnF,UAAUmF,EAAO3D,QAAQ2D,EAAO1D,SAAS0D,EAAOpF,WAAY,IAEnEoF,EAAOnF,UAAUmF,EAAO3D,QAAQ,GAAI,GACpC2D,EAAOpF,SAAW,KAEnBlG,KAAKwL,gBAST,CACD1G,IAAK,cACLzF,MAAO,SAAqBoM,GACtBzL,KAAK0L,KACP1L,KAAKgI,GAAG2D,aAAa3L,KAAK0L,KAAMD,GAE5BzL,KAAK4L,QACP5L,KAAKgI,GAAG3I,MAAQoM,EACc,SAArBzL,KAAK6L,YACd7L,KAAKgI,GAAG8D,UAAYL,EAEpBzL,KAAKgI,GAAG+D,YAAcN,IAU3B,CACD3G,IAAK,kBACLzF,MAAO,WACL,IAAI2M,EAAShM,KAERA,KAAK4L,UACV5L,KAAKgI,GAAGiE,iBAAiB,SAAS,SAAUC,GAC1CF,EAAOlG,UAET9F,KAAKgI,GAAGiE,iBAAiB,QAAQ,SAAUC,GACrCF,EAAOhE,GAAG3I,OAAoC,IAA3B2M,EAAOhE,GAAG3I,MAAMoD,QAGvCuJ,EAAOnG,cAQV,CACDf,IAAK,eACLzF,MAAO,WACAW,KAAKmM,aACNnM,KAAKW,SACTX,KAAKW,OAASyL,SAASC,cAAc,QACrCrM,KAAKW,OAAO4K,UAAY,eACxBvL,KAAKW,OAAOgL,aAAa,eAAe,GACxC3L,KAAKW,OAAOmL,UAAY9L,KAAKsM,WAC7BtM,KAAKgI,GAAGlB,YAAc9G,KAAKgI,GAAGlB,WAAWyF,aAAavM,KAAKW,OAAQX,KAAKgI,GAAGwE,mBAIxErH,EAzdG,GA4dZtH,EAAiB,QAAIsH,EACrBnB,EAAOnG,QAAUA,EAAiB,SAI7B,SAAUmG,EAAQnG,EAAS,GAEhC,aAEAgC,OAAOC,eAAejC,EAAS,aAAc,CAC3CwB,OAAO,IAGT,IAIgCP,EAJ5B2N,EAAW5M,OAAO6M,QAAU,SAAUnI,GAAU,IAAK,IAAIE,EAAI,EAAGA,EAAIpE,UAAUoC,OAAQgC,IAAK,CAAE,IAAIkI,EAAStM,UAAUoE,GAAI,IAAK,IAAIK,KAAO6H,EAAc9M,OAAO5B,UAAU2O,eAAezO,KAAKwO,EAAQ7H,KAAQP,EAAOO,GAAO6H,EAAO7H,IAAY,OAAOP,GAEnPF,EAAe,WAAe,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAM/B,OAAQgC,IAAK,CAAE,IAAIC,EAAaF,EAAMC,GAAIC,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMhF,OAAOC,eAAeyE,EAAQG,EAAWI,IAAKJ,IAAiB,OAAO,SAAUtE,EAAa2E,EAAYC,GAAiJ,OAA9HD,GAAYT,EAAiBlE,EAAYnC,UAAW8G,GAAiBC,GAAaV,EAAiBlE,EAAa4E,GAAqB5E,GAA9gB,GAQfyM,GAN4B/N,EAId,EAAoB,KAJeA,EAAIgO,WAAahO,EAAM,CAAE,QAAWA,GAYrFiO,EAAc,WAChB,SAASA,KAXX,SAAyBjK,EAAU1C,GAAe,KAAM0C,aAAoB1C,GAAgB,MAAM,IAAIkF,UAAU,qCAY5GC,CAAgBvF,KAAM+M,GAsLxB,OAnLA1I,EAAa0I,EAAa,CAAC,CACzBjI,IAAK,OAULzF,MAAO,SAAc2N,EAAM3H,EAASD,GAiElC,GA9DE4H,EAAKhF,GADkB,iBAAd5C,EACCgH,SAASa,cAAc7H,GAEvBA,EAGZ4H,EAAK3H,QAAUoH,EAAS,GAAII,EAAsB,QAAGxH,GAGrD2H,EAAKpB,QAA4C,UAAlCoB,EAAKhF,GAAGkF,QAAQC,cAC/BH,EAAKtB,KAAOsB,EAAK3H,QAAQqG,KACzBsB,EAAKzF,qBAAuByF,EAAK3H,QAAQkC,qBAGzCyF,EAAKb,YAAaa,EAAKpB,SAAkBoB,EAAK3H,QAAQ8G,WAGtDa,EAAKV,WAAaU,EAAK3H,QAAQiH,WAG/BU,EAAKlC,gBAAiB,EAGtBkC,EAAKI,UAAYJ,EAAKtB,KAAOsB,EAAKhF,GAAGqF,aAAaL,EAAKtB,MAAQsB,EAAKhF,GAAG+D,YAGvEiB,EAAKnB,YAAcmB,EAAK3H,QAAQwG,YAGhCmB,EAAKzE,UAAYyE,EAAK3H,QAAQkD,UAG9ByE,EAAKnF,WAAamF,EAAK3H,QAAQwC,WAG/BmF,EAAK3C,UAAY2C,EAAK3H,QAAQgF,UAG9B2C,EAAKxC,eAAiBwC,EAAK3H,QAAQmF,eAGnCwC,EAAK9C,UAAY8C,EAAK3H,QAAQ6E,UAG9B8C,EAAKjF,QAAUiF,EAAK3H,QAAQ0C,QAC5BiF,EAAK7E,aAAe6E,EAAK3H,QAAQ8C,aACjC6E,EAAKxB,aAAewB,EAAK3H,QAAQmG,aAGjCwB,EAAKM,UAAW,EAGhBN,EAAKrF,QAAUqF,EAAK3H,QAAQsC,QAAQ4F,KAAI,SAAUC,GAChD,OAAOA,EAAEC,UAIgC,iBAAhCT,EAAK3H,QAAQqI,eACtBV,EAAKU,eAAiBtB,SAASa,cAAcD,EAAK3H,QAAQqI,gBAE1DV,EAAKU,eAAiBV,EAAK3H,QAAQqI,eAGjCV,EAAKU,eAAgB,CACvBV,EAAKrF,QAAU,GACfqF,EAAKU,eAAeC,MAAMC,QAAU,OACpC,IAAIjG,EAAU3J,MAAMC,UAAUC,MAAMgB,MAAM8N,EAAKU,eAAeG,UAC1DC,EAAgBnG,EAAQlF,OAE5B,GAAIqL,EACF,IAAK,IAAIrJ,EAAI,EAAGA,EAAIqJ,EAAerJ,GAAK,EAAG,CACzC,IAAIsJ,EAAWpG,EAAQlD,GACvBuI,EAAKrF,QAAQ1E,KAAK8K,EAASjC,UAAU2B,SAmC3C,IAAK,IAAIhJ,KA7BTuI,EAAKhG,OAAS,EAGdgG,EAAK9G,SAAW,EAGhB8G,EAAKvC,QAAU,EAGfuC,EAAKhD,KAAOgD,EAAK3H,QAAQ2E,KACzBgD,EAAK/C,UAAY+C,EAAK3H,QAAQ4E,UAC9B+C,EAAK/F,QAAU,EAGf+F,EAAK5B,QAAU4B,EAAK3H,QAAQ+F,QAE5B4B,EAAKpF,SAAW,GAEhBoF,EAAKrH,MAAQ,CACXC,QAAQ,EACRO,WAAW,EACXC,UAAW,GACXC,UAAW,GAIb2G,EAAKjH,gBAAiB,EAGRiH,EAAKrF,QACjBqF,EAAKpF,SAASnD,GAAKA,EAIrBuI,EAAKtF,iBAAmB1H,KAAKgO,oBAAoBhB,GAEjDA,EAAKiB,cAAgBjB,EAAK3H,QAAQ4I,cAElCjO,KAAKkO,mBAAmBlB,KAEzB,CACDlI,IAAK,sBACLzF,MAAO,SAA6B2N,GAWlC,OATIA,EAAKtB,KACKsB,EAAKhF,GAAGqF,aAAaL,EAAKtB,MAC7BsB,EAAKpB,QACFoB,EAAKhF,GAAG3I,MACU,SAArB2N,EAAKnB,YACFmB,EAAKhF,GAAG8D,UAERkB,EAAKhF,GAAG+D,cAIvB,CACDjH,IAAK,qBACLzF,MAAO,SAA4B2N,GACjC,IAAImB,EAAc,oBAClB,GAAKnB,EAAKiB,gBAGLjB,EAAKb,YAAea,EAAKjF,WAG1BqE,SAASa,cAAc,IAAMkB,EAAc,KAA/C,CAIA,IAAIC,EAAMhC,SAASC,cAAc,SACjC+B,EAAIC,KAAO,WACXD,EAAIzC,aAAawC,GAAa,GAE9B,IAAIG,EAAW,GACXtB,EAAKb,aACPmC,GAAY,qgBAEVtB,EAAKjF,UACPuG,GAAY,6OAEK,IAAfF,EAAI3L,SAGR2L,EAAItC,UAAYwC,EAChBlC,SAASmC,KAAKC,YAAYJ,SAIvBrB,EAxLS,GA2LlBlP,EAAiB,QAAIkP,EACrB,IAAIvH,EAAc,IAAIuH,EACtBlP,EAAQ2H,YAAcA,GAIjB,SAAUxB,EAAQnG,GAQvB,aAEAgC,OAAOC,eAAejC,EAAS,aAAc,CAC3CwB,OAAO,IA0JTxB,EAAiB,QAxJF,CAKb8J,QAAS,CAAC,kCAAmC,+BAAgC,gBAAiB,qBAC9F+F,eAAgB,KAKhBnF,UAAW,EAKXV,WAAY,EAKZwC,UAAW,EAKXG,gBAAgB,EAKhBY,SAAS,EAKTlB,UAAW,IAOXnC,SAAS,EACTI,aAAc,iBACdqD,aAAc,IAMdxB,MAAM,EACNC,UAAWwE,EAAAA,EAOXtC,YAAY,EACZG,WAAY,IACZ2B,eAAe,EAMfvC,KAAM,KAKNnE,sBAAsB,EAKtBsE,YAAa,OAMbxE,QAAS,SAAiB2F,KAM1BrC,WAAY,SAAoBqC,KAOhCpD,eAAgB,SAAwB1D,EAAU8G,KAOlDjD,cAAe,SAAuB7D,EAAU8G,KAMhDtC,uBAAwB,SAAgCsC,KAOxD7D,eAAgB,SAAwBjD,EAAU8G,KAOlDtD,gBAAiB,SAAyBxD,EAAU8G,KAMpD7F,QAAS,SAAiB6F,KAO1B/G,OAAQ,SAAgBC,EAAU8G,KAOlCzG,QAAS,SAAiBL,EAAU8G,KAMpCvG,UAAW,SAAmBuG,MAIhChJ,EAAOnG,QAAUA,EAAiB,SAI7B,SAAUmG,EAAQnG,GAOvB,aAEAgC,OAAOC,eAAejC,EAAS,aAAc,CAC3CwB,OAAO,IAGT,IAAIgF,EAAe,WAAe,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAM/B,OAAQgC,IAAK,CAAE,IAAIC,EAAaF,EAAMC,GAAIC,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMhF,OAAOC,eAAeyE,EAAQG,EAAWI,IAAKJ,IAAiB,OAAO,SAAUtE,EAAa2E,EAAYC,GAAiJ,OAA9HD,GAAYT,EAAiBlE,EAAYnC,UAAW8G,GAAiBC,GAAaV,EAAiBlE,EAAa4E,GAAqB5E,GAA9gB,GAIfsO,EAAa,WACf,SAASA,KAHX,SAAyB5L,EAAU1C,GAAe,KAAM0C,aAAoB1C,GAAgB,MAAM,IAAIkF,UAAU,qCAI5GC,CAAgBvF,KAAM0O,GAoExB,OAjEArK,EAAaqK,EAAY,CAAC,CACxB5J,IAAK,gBAWLzF,MAAO,SAAuB+G,EAAWC,EAAW2G,GAClD,GAAyB,SAArBA,EAAKnB,YAAwB,OAAOxF,EACxC,IAAIsI,EAAUvI,EAAUwC,OAAOvC,GAAWwC,OAAO,GACjD,GAAgB,MAAZ8F,GAA+B,MAAZA,EAAiB,CACtC,IAAIC,EAMJ,IAJEA,EADc,MAAZD,EACO,IAEA,IAEJvI,EAAUwC,OAAOvC,EAAY,GAAGwC,OAAO,KAAO+F,KAEnC,KADhBvI,EACoBD,EAAU3D,UAIhC4D,IAEF,OAAOA,IAWR,CACDvB,IAAK,qBACLzF,MAAO,SAA4B+G,EAAWC,EAAW2G,GACvD,GAAyB,SAArBA,EAAKnB,YAAwB,OAAOxF,EACxC,IAAIsI,EAAUvI,EAAUwC,OAAOvC,GAAWwC,OAAO,GACjD,GAAgB,MAAZ8F,GAA+B,MAAZA,EAAiB,CACtC,IAAIC,EAMJ,IAJEA,EADc,MAAZD,EACO,IAEA,IAEJvI,EAAUwC,OAAOvC,EAAY,GAAGwC,OAAO,KAAO+F,OACnDvI,EACgB,KAIlBA,IAEF,OAAOA,MAIJqI,EAtEQ,GAyEjB7Q,EAAiB,QAAI6Q,EACrB,IAAIjG,EAAa,IAAIiG,EACrB7Q,EAAQ4K,WAAaA,MA3gCpBzE,EAAOnG,QAAU+F,MCVfiL,EAA2B,GAG/B,SAASC,EAAoB/K,GAE5B,IAAIgL,EAAeF,EAAyB9K,GAC5C,QAAqBb,IAAjB6L,EACH,OAAOA,EAAalR,QAGrB,IAAImG,EAAS6K,EAAyB9K,GAAY,CAGjDlG,QAAS,IAOV,OAHAmR,EAAoBjL,GAAU5F,KAAK6F,EAAOnG,QAASmG,EAAQA,EAAOnG,QAASiR,GAGpE9K,EAAOnG,QCpBfiR,EAAoBG,EAAI,SAASjL,GAChC,IAAIkL,EAASlL,GAAUA,EAAO8I,WAC7B,WAAa,OAAO9I,EAAgB,SACpC,WAAa,OAAOA,GAErB,OADA8K,EAAoBK,EAAED,EAAQ,CAAEE,EAAGF,IAC5BA,GCLRJ,EAAoBK,EAAI,SAAStR,EAASwR,GACzC,IAAI,IAAIvK,KAAOuK,EACXP,EAAoBQ,EAAED,EAAYvK,KAASgK,EAAoBQ,EAAEzR,EAASiH,IAC5EjF,OAAOC,eAAejC,EAASiH,EAAK,CAAEH,YAAY,EAAM5E,IAAKsP,EAAWvK,MCJ3EgK,EAAoBS,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOxP,MAAQ,IAAIyP,SAAS,cAAb,GACd,MAAOvD,GACR,GAAsB,iBAAXwD,OAAqB,OAAOA,QALjB,GCAxBZ,EAAoBQ,EAAI,SAASxQ,EAAKc,GAAQ,OAAOC,OAAO5B,UAAU2O,eAAezO,KAAKW,EAAKc,kDCmB/F,MAkCM,EAAS,SAAU+P,EAAWC,GAChC,IAAKD,EACD,MAAME,EAAeD,IAMvBC,EAAiB,SAAUD,GAC7B,OAAO,IAAIE,MAAM,iEAGbF,IAmBFG,EAAsB,SAAUtE,GAElC,MAAMuE,EAAM,GACZ,IAAI/Q,EAAI,EACR,IAAK,IAAIwF,EAAI,EAAGA,EAAIgH,EAAIhJ,OAAQgC,IAAK,CACjC,IAAIL,EAAIqH,EAAIwE,WAAWxL,GACnBL,EAAI,IACJ4L,EAAI/Q,KAAOmF,EAENA,EAAI,MACT4L,EAAI/Q,KAAQmF,GAAK,EAAK,IACtB4L,EAAI/Q,KAAY,GAAJmF,EAAU,KAEA,QAAZ,MAAJA,IACNK,EAAI,EAAIgH,EAAIhJ,QACyB,QAAZ,MAAxBgJ,EAAIwE,WAAWxL,EAAI,KAEpBL,EAAI,QAAgB,KAAJA,IAAe,KAA6B,KAAtBqH,EAAIwE,aAAaxL,IACvDuL,EAAI/Q,KAAQmF,GAAK,GAAM,IACvB4L,EAAI/Q,KAASmF,GAAK,GAAM,GAAM,IAC9B4L,EAAI/Q,KAASmF,GAAK,EAAK,GAAM,IAC7B4L,EAAI/Q,KAAY,GAAJmF,EAAU,MAGtB4L,EAAI/Q,KAAQmF,GAAK,GAAM,IACvB4L,EAAI/Q,KAASmF,GAAK,EAAK,GAAM,IAC7B4L,EAAI/Q,KAAY,GAAJmF,EAAU,KAG9B,OAAO4L,GA0CLE,EAAS,CAIXC,eAAgB,KAIhBC,eAAgB,KAKhBC,sBAAuB,KAKvBC,sBAAuB,KAKvBC,kBAAmB,iEAIfC,mBACA,OAAOxQ,KAAKuQ,kBAAoB,OAKhCE,2BACA,OAAOzQ,KAAKuQ,kBAAoB,OASpCG,mBAAoC,mBAATC,KAU3BC,gBAAgBC,EAAOC,GACnB,IAAK9S,MAAM+S,QAAQF,GACf,MAAMf,MAAM,iDAEhB9P,KAAKgR,QACL,MAAMC,EAAgBH,EAChB9Q,KAAKqQ,sBACLrQ,KAAKmQ,eACLe,EAAS,GACf,IAAK,IAAIzM,EAAI,EAAGA,EAAIoM,EAAMpO,OAAQgC,GAAK,EAAG,CACtC,MAAM0M,EAAQN,EAAMpM,GACd2M,EAAY3M,EAAI,EAAIoM,EAAMpO,OAC1B4O,EAAQD,EAAYP,EAAMpM,EAAI,GAAK,EACnC6M,EAAY7M,EAAI,EAAIoM,EAAMpO,OAC1B8O,EAAQD,EAAYT,EAAMpM,EAAI,GAAK,EACnC+M,EAAWL,GAAS,EACpBM,GAAqB,EAARN,IAAiB,EAAME,GAAS,EACnD,IAAIK,GAAqB,GAARL,IAAiB,EAAME,GAAS,EAC7CI,EAAmB,GAARJ,EACVD,IACDK,EAAW,GACNP,IACDM,EAAW,KAGnBR,EAAOjO,KAAKgO,EAAcO,GAAWP,EAAcQ,GAAWR,EAAcS,GAAWT,EAAcU,IAEzG,OAAOT,EAAOU,KAAK,KAUvBC,aAAahB,EAAOC,GAGhB,OAAI9Q,KAAK0Q,qBAAuBI,EACrBgB,KAAKjB,GAET7Q,KAAK4Q,gBAAgBb,EAAoBc,GAAQC,IAU5DiB,aAAalB,EAAOC,GAGhB,OAAI9Q,KAAK0Q,qBAAuBI,EACrBH,KAAKE,GAhJE,SAAUmB,GAEhC,MAAMhC,EAAM,GACZ,IAAIiC,EAAM,EAAG7N,EAAI,EACjB,KAAO6N,EAAMD,EAAMvP,QAAQ,CACvB,MAAMyP,EAAKF,EAAMC,KACjB,GAAIC,EAAK,IACLlC,EAAI5L,KAAO+N,OAAOC,aAAaF,QAE9B,GAAIA,EAAK,KAAOA,EAAK,IAAK,CAC3B,MAAMG,EAAKL,EAAMC,KACjBjC,EAAI5L,KAAO+N,OAAOC,cAAoB,GAALF,IAAY,EAAW,GAALG,QAElD,GAAIH,EAAK,KAAOA,EAAK,IAAK,CAE3B,MAGMI,IAAY,EAALJ,IAAW,IAAa,GAH1BF,EAAMC,OAG2B,IAAa,GAF9CD,EAAMC,OAE+C,EAAW,GADhED,EAAMC,MAEb,MACJjC,EAAI5L,KAAO+N,OAAOC,aAAa,OAAUE,GAAK,KAC9CtC,EAAI5L,KAAO+N,OAAOC,aAAa,OAAc,KAAJE,QAExC,CACD,MAAMD,EAAKL,EAAMC,KACXM,EAAKP,EAAMC,KACjBjC,EAAI5L,KAAO+N,OAAOC,cAAoB,GAALF,IAAY,IAAa,GAALG,IAAY,EAAW,GAALE,IAG/E,OAAOvC,EAAI4B,KAAK,IAqHLY,CAAkBxS,KAAKyS,wBAAwB5B,EAAOC,KAiBjE2B,wBAAwB5B,EAAOC,GAC3B9Q,KAAKgR,QACL,MAAM0B,EAAgB5B,EAChB9Q,KAAKsQ,sBACLtQ,KAAKoQ,eACLc,EAAS,GACf,IAAK,IAAIzM,EAAI,EAAGA,EAAIoM,EAAMpO,QAAS,CAC/B,MAAM0O,EAAQuB,EAAc7B,EAAMhI,OAAOpE,MAEnC4M,EADY5M,EAAIoM,EAAMpO,OACFiQ,EAAc7B,EAAMhI,OAAOpE,IAAM,IACzDA,EACF,MACM8M,EADY9M,EAAIoM,EAAMpO,OACFiQ,EAAc7B,EAAMhI,OAAOpE,IAAM,KACzDA,EACF,MACMkO,EADYlO,EAAIoM,EAAMpO,OACFiQ,EAAc7B,EAAMhI,OAAOpE,IAAM,GAE3D,KADEA,EACW,MAAT0M,GAA0B,MAATE,GAA0B,MAATE,GAA0B,MAAToB,EACnD,MAAM7C,QAEV,MAAM0B,EAAYL,GAAS,EAAME,GAAS,EAE1C,GADAH,EAAOjO,KAAKuO,GACE,KAAVD,EAAc,CACd,MAAME,EAAaJ,GAAS,EAAK,IAASE,GAAS,EAEnD,GADAL,EAAOjO,KAAKwO,GACE,KAAVkB,EAAc,CACd,MAAMjB,EAAaH,GAAS,EAAK,IAAQoB,EACzCzB,EAAOjO,KAAKyO,KAIxB,OAAOR,GAOXF,QACI,IAAKhR,KAAKmQ,eAAgB,CACtBnQ,KAAKmQ,eAAiB,GACtBnQ,KAAKoQ,eAAiB,GACtBpQ,KAAKqQ,sBAAwB,GAC7BrQ,KAAKsQ,sBAAwB,GAE7B,IAAK,IAAI7L,EAAI,EAAGA,EAAIzE,KAAKwQ,aAAa/N,OAAQgC,IAC1CzE,KAAKmQ,eAAe1L,GAAKzE,KAAKwQ,aAAa3H,OAAOpE,GAClDzE,KAAKoQ,eAAepQ,KAAKmQ,eAAe1L,IAAMA,EAC9CzE,KAAKqQ,sBAAsB5L,GAAKzE,KAAKyQ,qBAAqB5H,OAAOpE,GACjEzE,KAAKsQ,sBAAsBtQ,KAAKqQ,sBAAsB5L,IAAMA,EAExDA,GAAKzE,KAAKuQ,kBAAkB9N,SAC5BzC,KAAKoQ,eAAepQ,KAAKyQ,qBAAqB5H,OAAOpE,IAAMA,EAC3DzE,KAAKsQ,sBAAsBtQ,KAAKwQ,aAAa3H,OAAOpE,IAAMA,MASxEmO,EAAe,SAAUnH,GAC3B,MAAMoH,EAAY9C,EAAoBtE,GACtC,OAAOyE,EAAOU,gBAAgBiC,GAAW,IAmBvCC,EAAe,SAAUrH,GAC3B,IACI,OAAOyE,EAAO6B,aAAatG,GAAK,GAEpC,MAAOS,GACH6G,QAAQnU,MAAM,wBAAyBsN,GAE3C,OAAO,MAsBX,SAAS8G,EAAS3T,GACd,OAAO4T,OAAW/P,EAAW7D,GAgBjC,SAAS4T,EAAW1O,EAAQoI,GACxB,KAAMA,aAAkB9M,QACpB,OAAO8M,EAEX,OAAQA,EAAOuG,aACX,KAAKC,KAID,OAAO,IAAIA,KADOxG,EACQyG,WAC9B,KAAKvT,YACcqD,IAAXqB,IACAA,EAAS,IAEb,MACJ,KAAKvG,MAEDuG,EAAS,GACT,MACJ,QAEI,OAAOoI,EAEf,IAAK,MAAM/M,KAAQ+M,EAEVA,EAAOC,eAAehN,IAQhB,cARqCA,IAGhD2E,EAAO3E,GAAQqT,EAAW1O,EAAO3E,GAAO+M,EAAO/M,KAEnD,OAAO2E,EAsBX,MAAM,EACF2O,cACIlT,KAAKxB,OAAS,OACdwB,KAAKzB,QAAU,OACfyB,KAAKqT,QAAU,IAAI/U,SAAQ,CAACC,EAASC,KACjCwB,KAAKzB,QAAUA,EACfyB,KAAKxB,OAASA,KAQtB8U,aAAa9Q,GACT,MAAO,CAAC5D,EAAOS,KACPT,EACAoB,KAAKxB,OAAOI,GAGZoB,KAAKzB,QAAQc,GAEO,mBAAbmD,IAGPxC,KAAKqT,QAAQE,OAAM,SAGK,IAApB/Q,EAASC,OACTD,EAAS5D,GAGT4D,EAAS5D,EAAOS,MAyFpC,SAASmU,IACL,MAA0B,oBAAX9D,WAGRA,OAAgB,SAAKA,OAAiB,UAAKA,OAAiB,WAC/D,oDAAoD5G,KApB/B,oBAAd2K,WAC2B,iBAA3BA,UAAqB,UACrBA,UAAqB,UAGrB,IAgNf,MAAMC,UAAsB5D,MACxBoD,YAEAS,EAAM/D,EAENgE,GACIC,MAAMjE,GACN5P,KAAK2T,KAAOA,EACZ3T,KAAK4T,WAAaA,EAElB5T,KAAKqD,KAbM,gBAgBXxD,OAAOiU,eAAe9T,KAAM0T,EAAczV,WAGtC6R,MAAMiE,mBACNjE,MAAMiE,kBAAkB/T,KAAMgU,EAAa/V,UAAUgW,SAIjE,MAAMD,EACFd,YAAYgB,EAASC,EAAaC,GAC9BpU,KAAKkU,QAAUA,EACflU,KAAKmU,YAAcA,EACnBnU,KAAKoU,OAASA,EAElBH,OAAON,KAASU,GACZ,MAAMT,EAAaS,EAAK,IAAM,GACxBC,EAAW,GAAGtU,KAAKkU,WAAWP,IAC9BY,EAAWvU,KAAKoU,OAAOT,GACvB/D,EAAU2E,EAOxB,SAAyBA,EAAUF,GAC/B,OAAOE,EAAShS,QAAQiS,GAAS,CAACC,EAAG3P,KACjC,MAAMzF,EAAQgV,EAAKvP,GACnB,OAAgB,MAATzF,EAAgB8S,OAAO9S,GAAS,IAAIyF,SAVhB4P,CAAgBH,EAAUX,GAAc,QAE7De,EAAc,GAAG3U,KAAKmU,gBAAgBvE,MAAY0E,MAExD,OADc,IAAIZ,EAAcY,EAAUK,EAAaf,IAU/D,MAAMY,EAAU,gBAwBhB,SAASI,EAASnJ,GACd,OAAOoJ,KAAKC,MAAMrJ,GAOtB,SAAS,EAAU4I,GACf,OAAOQ,KAAKE,UAAUV,GA0B1B,MAAMW,EAAS,SAAUC,GACrB,IAAIC,EAAS,GAAIC,EAAS,GAAId,EAAO,GAAIe,EAAY,GACrD,IACI,MAAMC,EAAQJ,EAAMK,MAAM,KAC1BJ,EAASN,EAAS9B,EAAauC,EAAM,KAAO,IAC5CF,EAASP,EAAS9B,EAAauC,EAAM,KAAO,IAC5CD,EAAYC,EAAM,GAClBhB,EAAOc,EAAU,GAAK,UACfA,EAAU,EAErB,MAAOjJ,IACP,MAAO,CACHgJ,OAAAA,EACAC,OAAAA,EACAd,KAAAA,EACAe,UAAAA,IAyFR,SAAS,EAAStW,EAAKgG,GACnB,OAAOjF,OAAO5B,UAAU2O,eAAezO,KAAKW,EAAKgG,GAErD,SAAS,EAAQhG,EAAKgG,GAClB,OAAIjF,OAAO5B,UAAU2O,eAAezO,KAAKW,EAAKgG,GACnChG,EAAIgG,QAGX,EAGR,SAAS,EAAQhG,GACb,IAAK,MAAMgG,KAAOhG,EACd,GAAIe,OAAO5B,UAAU2O,eAAezO,KAAKW,EAAKgG,GAC1C,OAAO,EAGf,OAAO,EAEX,SAASyI,EAAIzO,EAAKyW,EAAIC,GAClB,MAAMC,EAAM,GACZ,IAAK,MAAM3Q,KAAOhG,EACVe,OAAO5B,UAAU2O,eAAezO,KAAKW,EAAKgG,KAC1C2Q,EAAI3Q,GAAOyQ,EAAGpX,KAAKqX,EAAY1W,EAAIgG,GAAMA,EAAKhG,IAGtD,OAAO2W,EAKX,SAASC,EAAUtG,EAAGuG,GAClB,GAAIvG,IAAMuG,EACN,OAAO,EAEX,MAAMC,EAAQ/V,OAAOgW,KAAKzG,GACpB0G,EAAQjW,OAAOgW,KAAKF,GAC1B,IAAK,MAAMI,KAAKH,EAAO,CACnB,IAAKE,EAAME,SAASD,GAChB,OAAO,EAEX,MAAME,EAAQ7G,EAAE2G,GACVG,EAAQP,EAAEI,GAChB,GAAII,EAASF,IAAUE,EAASD,IAC5B,IAAKR,EAAUO,EAAOC,GAClB,OAAO,OAGV,GAAID,IAAUC,EACf,OAAO,EAGf,IAAK,MAAMH,KAAKD,EACZ,IAAKF,EAAMI,SAASD,GAChB,OAAO,EAGf,OAAO,EAEX,SAASI,EAASC,GACd,OAAiB,OAAVA,GAAmC,iBAAVA,EAwGpC,MAAMC,EACFnD,cAMIlT,KAAKsW,OAAS,GAKdtW,KAAKuW,KAAO,GAMZvW,KAAKwW,GAAK,GAKVxW,KAAKyW,KAAO,GAIZzW,KAAK0W,OAAS,EAId1W,KAAK2W,OAAS,EACd3W,KAAK4W,UAAY,GACjB5W,KAAKyW,KAAK,GAAK,IACf,IAAK,IAAIhS,EAAI,EAAGA,EAAIzE,KAAK4W,YAAanS,EAClCzE,KAAKyW,KAAKhS,GAAK,EAEnBzE,KAAKwG,QAETA,QACIxG,KAAKsW,OAAO,GAAK,WACjBtW,KAAKsW,OAAO,GAAK,WACjBtW,KAAKsW,OAAO,GAAK,WACjBtW,KAAKsW,OAAO,GAAK,UACjBtW,KAAKsW,OAAO,GAAK,WACjBtW,KAAK0W,OAAS,EACd1W,KAAK2W,OAAS,EAQlBE,UAAUC,EAAKC,GACNA,IACDA,EAAS,GAEb,MAAMC,EAAIhX,KAAKwW,GAEf,GAAmB,iBAARM,EACP,IAAK,IAAIrS,EAAI,EAAGA,EAAI,GAAIA,IASpBuS,EAAEvS,GACGqS,EAAI7G,WAAW8G,IAAW,GACtBD,EAAI7G,WAAW8G,EAAS,IAAM,GAC9BD,EAAI7G,WAAW8G,EAAS,IAAM,EAC/BD,EAAI7G,WAAW8G,EAAS,GAChCA,GAAU,OAId,IAAK,IAAItS,EAAI,EAAGA,EAAI,GAAIA,IACpBuS,EAAEvS,GACGqS,EAAIC,IAAW,GACXD,EAAIC,EAAS,IAAM,GACnBD,EAAIC,EAAS,IAAM,EACpBD,EAAIC,EAAS,GACrBA,GAAU,EAIlB,IAAK,IAAItS,EAAI,GAAIA,EAAI,GAAIA,IAAK,CAC1B,MAAMwS,EAAID,EAAEvS,EAAI,GAAKuS,EAAEvS,EAAI,GAAKuS,EAAEvS,EAAI,IAAMuS,EAAEvS,EAAI,IAClDuS,EAAEvS,GAA+B,YAAxBwS,GAAK,EAAMA,IAAM,IAE9B,IAKIC,EAAGnB,EALH3G,EAAIpP,KAAKsW,OAAO,GAChBX,EAAI3V,KAAKsW,OAAO,GAChBlS,EAAIpE,KAAKsW,OAAO,GAChBnH,EAAInP,KAAKsW,OAAO,GAChBpK,EAAIlM,KAAKsW,OAAO,GAGpB,IAAK,IAAI7R,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrBA,EAAI,GACAA,EAAI,IACJyS,EAAI/H,EAAKwG,GAAKvR,EAAI+K,GAClB4G,EAAI,aAGJmB,EAAIvB,EAAIvR,EAAI+K,EACZ4G,EAAI,YAIJtR,EAAI,IACJyS,EAAKvB,EAAIvR,EAAM+K,GAAKwG,EAAIvR,GACxB2R,EAAI,aAGJmB,EAAIvB,EAAIvR,EAAI+K,EACZ4G,EAAI,YAGZ,MAAMkB,GAAO7H,GAAK,EAAMA,IAAM,IAAO8H,EAAIhL,EAAI6J,EAAIiB,EAAEvS,GAAM,WACzDyH,EAAIiD,EACJA,EAAI/K,EACJA,EAA8B,YAAxBuR,GAAK,GAAOA,IAAM,GACxBA,EAAIvG,EACJA,EAAI6H,EAERjX,KAAKsW,OAAO,GAAMtW,KAAKsW,OAAO,GAAKlH,EAAK,WACxCpP,KAAKsW,OAAO,GAAMtW,KAAKsW,OAAO,GAAKX,EAAK,WACxC3V,KAAKsW,OAAO,GAAMtW,KAAKsW,OAAO,GAAKlS,EAAK,WACxCpE,KAAKsW,OAAO,GAAMtW,KAAKsW,OAAO,GAAKnH,EAAK,WACxCnP,KAAKsW,OAAO,GAAMtW,KAAKsW,OAAO,GAAKpK,EAAK,WAE5CiL,OAAOnF,EAAOvP,GAEV,GAAa,MAATuP,EACA,YAEW9O,IAAXT,IACAA,EAASuP,EAAMvP,QAEnB,MAAM2U,EAAmB3U,EAASzC,KAAK4W,UACvC,IAAI3H,EAAI,EAER,MAAM6H,EAAM9W,KAAKuW,KACjB,IAAIc,EAAQrX,KAAK0W,OAEjB,KAAOzH,EAAIxM,GAAQ,CAKf,GAAc,IAAV4U,EACA,KAAOpI,GAAKmI,GACRpX,KAAK6W,UAAU7E,EAAO/C,GACtBA,GAAKjP,KAAK4W,UAGlB,GAAqB,iBAAV5E,GACP,KAAO/C,EAAIxM,GAIP,GAHAqU,EAAIO,GAASrF,EAAM/B,WAAWhB,KAC5BoI,IACApI,EACEoI,IAAUrX,KAAK4W,UAAW,CAC1B5W,KAAK6W,UAAUC,GACfO,EAAQ,EAER,YAKR,KAAOpI,EAAIxM,GAIP,GAHAqU,EAAIO,GAASrF,EAAM/C,KACjBoI,IACApI,EACEoI,IAAUrX,KAAK4W,UAAW,CAC1B5W,KAAK6W,UAAUC,GACfO,EAAQ,EAER,OAKhBrX,KAAK0W,OAASW,EACdrX,KAAK2W,QAAUlU,EAGnB6U,SACI,MAAMA,EAAS,GACf,IAAIC,EAA0B,EAAdvX,KAAK2W,OAEjB3W,KAAK0W,OAAS,GACd1W,KAAKmX,OAAOnX,KAAKyW,KAAM,GAAKzW,KAAK0W,QAGjC1W,KAAKmX,OAAOnX,KAAKyW,KAAMzW,KAAK4W,WAAa5W,KAAK0W,OAAS,KAG3D,IAAK,IAAIjS,EAAIzE,KAAK4W,UAAY,EAAGnS,GAAK,GAAIA,IACtCzE,KAAKuW,KAAK9R,GAAiB,IAAZ8S,EACfA,GAAa,IAEjBvX,KAAK6W,UAAU7W,KAAKuW,MACpB,IAAItH,EAAI,EACR,IAAK,IAAIxK,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAI+S,EAAI,GAAIA,GAAK,EAAGA,GAAK,EAC1BF,EAAOrI,GAAMjP,KAAKsW,OAAO7R,IAAM+S,EAAK,MAClCvI,EAGV,OAAOqI,GA4Qf,SAAS,EAAYG,EAAQC,GACzB,MAAO,GAAGD,aAAkBC,cAiEhC,MAuCMC,EAAe,SAAUlM,GAC3B,IAAIxM,EAAI,EACR,IAAK,IAAIwF,EAAI,EAAGA,EAAIgH,EAAIhJ,OAAQgC,IAAK,CACjC,MAAML,EAAIqH,EAAIwE,WAAWxL,GACrBL,EAAI,IACJnF,IAEKmF,EAAI,KACTnF,GAAK,EAEAmF,GAAK,OAAUA,GAAK,OAEzBnF,GAAK,EACLwF,KAGAxF,GAAK,EAGb,OAAOA,GAgIX,SAAS,EAAmBiV,GACxB,OAAIA,GAAWA,EAAQ0D,UACZ1D,EAAQ0D,UAGR1D,ECh2Df,MAAM2D,EAOF3E,YAAY7P,EAAMyU,EAAiBzJ,GAC/BrO,KAAKqD,KAAOA,EACZrD,KAAK8X,gBAAkBA,EACvB9X,KAAKqO,KAAOA,EACZrO,KAAK+X,mBAAoB,EAIzB/X,KAAKgY,aAAe,GACpBhY,KAAKiY,kBAAoB,OACzBjY,KAAKkY,kBAAoB,KAE7BC,qBAAqBC,GAEjB,OADApY,KAAKiY,kBAAoBG,EAClBpY,KAEXqY,qBAAqBN,GAEjB,OADA/X,KAAK+X,kBAAoBA,EAClB/X,KAEXsY,gBAAgB9T,GAEZ,OADAxE,KAAKgY,aAAexT,EACbxE,KAEXuY,2BAA2B/V,GAEvB,OADAxC,KAAKkY,kBAAoB1V,EAClBxC,MAoBf,MAAMwY,EAAqB,YAsB3B,MAAMC,EACFvF,YAAY7P,EAAMqV,GACd1Y,KAAKqD,KAAOA,EACZrD,KAAK0Y,UAAYA,EACjB1Y,KAAK2Y,UAAY,KACjB3Y,KAAK4Y,UAAY,IAAIC,IACrB7Y,KAAK8Y,kBAAoB,IAAID,IAC7B7Y,KAAK+Y,iBAAmB,IAAIF,IAC5B7Y,KAAKgZ,gBAAkB,IAAIH,IAM/B9Y,IAAIkZ,GAEA,MAAMC,EAAuBlZ,KAAKmZ,4BAA4BF,GAC9D,IAAKjZ,KAAK8Y,kBAAkBM,IAAIF,GAAuB,CACnD,MAAMG,EAAW,IAAI,EAErB,GADArZ,KAAK8Y,kBAAkB7Y,IAAIiZ,EAAsBG,GAC7CrZ,KAAKsZ,cAAcJ,IACnBlZ,KAAKuZ,uBAEL,IACI,MAAMzW,EAAW9C,KAAKwZ,uBAAuB,CACzCC,mBAAoBP,IAEpBpW,GACAuW,EAAS9a,QAAQuE,GAGzB,MAAOoJ,KAMf,OAAOlM,KAAK8Y,kBAAkB/Y,IAAImZ,GAAsB7F,QAE5DqG,aAAarU,GACT,IAAIsU,EAEJ,MAAMT,EAAuBlZ,KAAKmZ,4BAA4B9T,MAAAA,OAAyC,EAASA,EAAQ4T,YAClHW,EAAyF,QAA7ED,EAAKtU,MAAAA,OAAyC,EAASA,EAAQuU,gBAA6B,IAAPD,GAAgBA,EACvH,IAAI3Z,KAAKsZ,cAAcJ,KACnBlZ,KAAKuZ,uBAeJ,CAED,GAAIK,EACA,OAAO,KAGP,MAAM9J,MAAM,WAAW9P,KAAKqD,yBApBhC,IACI,OAAOrD,KAAKwZ,uBAAuB,CAC/BC,mBAAoBP,IAG5B,MAAOhN,GACH,GAAI0N,EACA,OAAO,KAGP,MAAM1N,GActB2N,eACI,OAAO7Z,KAAK2Y,UAEhBmB,aAAanB,GACT,GAAIA,EAAUtV,OAASrD,KAAKqD,KACxB,MAAMyM,MAAM,yBAAyB6I,EAAUtV,qBAAqBrD,KAAKqD,SAE7E,GAAIrD,KAAK2Y,UACL,MAAM7I,MAAM,iBAAiB9P,KAAKqD,kCAItC,GAFArD,KAAK2Y,UAAYA,EAEZ3Y,KAAKuZ,uBAAV,CAIA,GAwKR,SAA0BZ,GACtB,MAAuC,UAAhCA,EAAUV,kBAzKT8B,CAAiBpB,GACjB,IACI3Y,KAAKwZ,uBAAuB,CAAEC,mBAAoBjB,IAEtD,MAAOtM,IAUX,IAAK,MAAOuN,EAAoBO,KAAqBha,KAAK8Y,kBAAkBmB,UAAW,CACnF,MAAMf,EAAuBlZ,KAAKmZ,4BAA4BM,GAC9D,IAEI,MAAM3W,EAAW9C,KAAKwZ,uBAAuB,CACzCC,mBAAoBP,IAExBc,EAAiBzb,QAAQuE,GAE7B,MAAOoJ,OAMfgO,cAAcjB,EAAaT,aACvBxY,KAAK8Y,kBAAkBqB,OAAOlB,GAC9BjZ,KAAK+Y,iBAAiBoB,OAAOlB,GAC7BjZ,KAAK4Y,UAAUuB,OAAOlB,GAI1BmB,eACI,MAAMC,EAAWrc,MAAMsc,KAAKta,KAAK4Y,UAAU2B,gBACrCjc,QAAQkc,IAAI,IACXH,EACEI,QAAOvG,GAAW,aAAcA,IAEhC3G,KAAI2G,GAAWA,EAAQwG,SAASP,cAClCE,EACEI,QAAOvG,GAAW,YAAaA,IAE/B3G,KAAI2G,GAAWA,EAAQyG,cAGpCC,iBACI,OAAyB,MAAlB5a,KAAK2Y,UAEhBW,cAAcL,EAAaT,aACvB,OAAOxY,KAAK4Y,UAAUQ,IAAIH,GAE9B4B,WAAW5B,EAAaT,aACpB,OAAOxY,KAAK+Y,iBAAiBhZ,IAAIkZ,IAAe,GAEpD6B,WAAWC,EAAO,IACd,MAAM,QAAE1V,EAAU,IAAO0V,EACnB7B,EAAuBlZ,KAAKmZ,4BAA4B4B,EAAKtB,oBACnE,GAAIzZ,KAAKsZ,cAAcJ,GACnB,MAAMpJ,MAAM,GAAG9P,KAAKqD,QAAQ6V,mCAEhC,IAAKlZ,KAAK4a,iBACN,MAAM9K,MAAM,aAAa9P,KAAKqD,oCAElC,MAAMP,EAAW9C,KAAKwZ,uBAAuB,CACzCC,mBAAoBP,EACpB7T,QAAAA,IAGJ,IAAK,MAAOoU,EAAoBO,KAAqBha,KAAK8Y,kBAAkBmB,UAEpEf,IADiClZ,KAAKmZ,4BAA4BM,IAElEO,EAAiBzb,QAAQuE,GAGjC,OAAOA,EAUXkY,OAAOxY,EAAUyW,GACb,IAAIU,EACJ,MAAMT,EAAuBlZ,KAAKmZ,4BAA4BF,GACxDgC,EAA8E,QAAzDtB,EAAK3Z,KAAKgZ,gBAAgBjZ,IAAImZ,UAA0C,IAAPS,EAAgBA,EAAK,IAAIuB,IACrHD,EAAkBlQ,IAAIvI,GACtBxC,KAAKgZ,gBAAgB/Y,IAAIiZ,EAAsB+B,GAC/C,MAAME,EAAmBnb,KAAK4Y,UAAU7Y,IAAImZ,GAI5C,OAHIiC,GACA3Y,EAAS2Y,EAAkBjC,GAExB,KACH+B,EAAkBd,OAAO3X,IAOjC4Y,sBAAsBtY,EAAUmW,GAC5B,MAAMoC,EAAYrb,KAAKgZ,gBAAgBjZ,IAAIkZ,GAC3C,GAAKoC,EAGL,IAAK,MAAM7Y,KAAY6Y,EACnB,IACI7Y,EAASM,EAAUmW,GAEvB,MAAOU,KAKfH,wBAAuB,mBAAEC,EAAkB,QAAEpU,EAAU,KACnD,IAAIvC,EAAW9C,KAAK4Y,UAAU7Y,IAAI0Z,GAClC,IAAK3W,GAAY9C,KAAK2Y,YAClB7V,EAAW9C,KAAK2Y,UAAUb,gBAAgB9X,KAAK0Y,UAAW,CACtDe,oBAyCuBR,EAzC2BQ,EA0CvDR,IAAeT,OAAqBtV,EAAY+V,GAzC3C5T,QAAAA,IAEJrF,KAAK4Y,UAAU3Y,IAAIwZ,EAAoB3W,GACvC9C,KAAK+Y,iBAAiB9Y,IAAIwZ,EAAoBpU,GAM9CrF,KAAKob,sBAAsBtY,EAAU2W,GAMjCzZ,KAAK2Y,UAAUT,mBACf,IACIlY,KAAK2Y,UAAUT,kBAAkBlY,KAAK0Y,UAAWe,EAAoB3W,GAEzE,MAAO6W,IAqBvB,IAAuCV,EAhB/B,OAAOnW,GAAY,KAEvBqW,4BAA4BF,EAAaT,aACrC,OAAIxY,KAAK2Y,UACE3Y,KAAK2Y,UAAUZ,kBAAoBkB,EAAaT,EAGhDS,EAGfM,uBACI,QAAUvZ,KAAK2Y,WAC0B,aAArC3Y,KAAK2Y,UAAUV,mBA8B3B,MAAMqD,EACFpI,YAAY7P,GACRrD,KAAKqD,KAAOA,EACZrD,KAAKub,UAAY,IAAI1C,IAWzB2C,aAAa7C,GACT,MAAM8C,EAAWzb,KAAK0b,YAAY/C,EAAUtV,MAC5C,GAAIoY,EAASb,iBACT,MAAM,IAAI9K,MAAM,aAAa6I,EAAUtV,yCAAyCrD,KAAKqD,QAEzFoY,EAAS3B,aAAanB,GAE1BgD,wBAAwBhD,GACH3Y,KAAK0b,YAAY/C,EAAUtV,MAC/BuX,kBAET5a,KAAKub,UAAUpB,OAAOxB,EAAUtV,MAEpCrD,KAAKwb,aAAa7C,GAStB+C,YAAYrY,GACR,GAAIrD,KAAKub,UAAUnC,IAAI/V,GACnB,OAAOrD,KAAKub,UAAUxb,IAAIsD,GAG9B,MAAMoY,EAAW,IAAIhD,EAASpV,EAAMrD,MAEpC,OADAA,KAAKub,UAAUtb,IAAIoD,EAAMoY,GAClBA,EAEXG,eACI,OAAO5d,MAAMsc,KAAKta,KAAKub,UAAUhB,WChYzC,MAAM3B,EAAY,GAYlB,IAAIiD,GACJ,SAAWA,GACPA,EAASA,EAAgB,MAAI,GAAK,QAClCA,EAASA,EAAkB,QAAI,GAAK,UACpCA,EAASA,EAAe,KAAI,GAAK,OACjCA,EAASA,EAAe,KAAI,GAAK,OACjCA,EAASA,EAAgB,MAAI,GAAK,QAClCA,EAASA,EAAiB,OAAI,GAAK,SANvC,CAOGA,IAAaA,EAAW,KAC3B,MAAMC,EAAoB,CACtB,MAASD,EAASE,MAClB,QAAWF,EAASG,QACpB,KAAQH,EAASI,KACjB,KAAQJ,EAASK,KACjB,MAASL,EAASM,MAClB,OAAUN,EAASO,QAKjBC,EAAkBR,EAASI,KAO3BK,EAAgB,CAClB,CAACT,EAASE,OAAQ,MAClB,CAACF,EAASG,SAAU,MACpB,CAACH,EAASI,MAAO,OACjB,CAACJ,EAASK,MAAO,OACjB,CAACL,EAASM,OAAQ,SAOhBI,EAAoB,CAACzZ,EAAU0Z,KAAYxd,KAC7C,GAAIwd,EAAU1Z,EAAS2Z,SACnB,OAEJ,MAAMC,GAAM,IAAIvJ,MAAOwJ,cACjB5d,EAASud,EAAcE,GAC7B,IAAIzd,EAIA,MAAM,IAAI+Q,MAAM,8DAA8D0M,MAH9EzJ,QAAQhU,GAAQ,IAAI2d,OAAS5Z,EAASO,WAAYrE,IAM1D,MAAM4d,EAOF1J,YAAY7P,GACRrD,KAAKqD,KAAOA,EAIZrD,KAAK6c,UAAYR,EAKjBrc,KAAK8c,YAAcP,EAInBvc,KAAK+c,gBAAkB,KAIvBnE,EAAU3V,KAAKjD,MAEfyc,eACA,OAAOzc,KAAK6c,UAEZJ,aAASvc,GACT,KAAMA,KAAO2b,GACT,MAAM,IAAIvW,UAAU,kBAAkBpF,+BAE1CF,KAAK6c,UAAY3c,EAGrB8c,YAAY9c,GACRF,KAAK6c,UAA2B,iBAAR3c,EAAmB4b,EAAkB5b,GAAOA,EAEpE+c,iBACA,OAAOjd,KAAK8c,YAEZG,eAAW/c,GACX,GAAmB,mBAARA,EACP,MAAM,IAAIoF,UAAU,qDAExBtF,KAAK8c,YAAc5c,EAEnBgd,qBACA,OAAOld,KAAK+c,gBAEZG,mBAAehd,GACfF,KAAK+c,gBAAkB7c,EAK3Bid,SAASne,GACLgB,KAAK+c,iBAAmB/c,KAAK+c,gBAAgB/c,KAAM6b,EAASE,SAAU/c,GACtEgB,KAAK8c,YAAY9c,KAAM6b,EAASE,SAAU/c,GAE9Coe,OAAOpe,GACHgB,KAAK+c,iBACD/c,KAAK+c,gBAAgB/c,KAAM6b,EAASG,WAAYhd,GACpDgB,KAAK8c,YAAY9c,KAAM6b,EAASG,WAAYhd,GAEhDqe,QAAQre,GACJgB,KAAK+c,iBAAmB/c,KAAK+c,gBAAgB/c,KAAM6b,EAASI,QAASjd,GACrEgB,KAAK8c,YAAY9c,KAAM6b,EAASI,QAASjd,GAE7Cse,QAAQte,GACJgB,KAAK+c,iBAAmB/c,KAAK+c,gBAAgB/c,KAAM6b,EAASK,QAASld,GACrEgB,KAAK8c,YAAY9c,KAAM6b,EAASK,QAASld,GAE7CJ,SAASI,GACLgB,KAAK+c,iBAAmB/c,KAAK+c,gBAAgB/c,KAAM6b,EAASM,SAAUnd,GACtEgB,KAAK8c,YAAY9c,KAAM6b,EAASM,SAAUnd,iBC1IlD,MAAMue,EACFrK,YAAYwF,GACR1Y,KAAK0Y,UAAYA,EAIrB8E,wBAII,OAHkBxd,KAAK0Y,UAAUkD,eAI5BrO,KAAIkO,IACL,GAoBZ,SAAkCA,GAC9B,MAAM9C,EAAY8C,EAAS5B,eAC3B,MAAkF,aAA1ElB,MAAAA,OAA6C,EAASA,EAAUtK,MAtB5DoP,CAAyBhC,GAAW,CACpC,MAAMvH,EAAUuH,EAAS/B,eACzB,MAAO,GAAGxF,EAAQwJ,WAAWxJ,EAAQ5Q,UAGrC,OAAO,QAGVmX,QAAOkD,GAAaA,IACpB/L,KAAK,MAgBlB,MAAMgM,EAAS,gBACTC,EAAY,SAkBZC,EAAS,IAAIlB,EAAO,iBAyEpBmB,EAAsB,CACxB,CAACH,GAAS,YACV,uBAAU,mBACV,sBAAU,iBACV,6BAAU,wBACV,sBAAU,iBACV,6BAAU,wBACV,iBAAU,YACV,wBAAU,mBACV,qBAAU,YACV,4BAAU,mBACV,sBAAU,UACV,6BAAU,iBACV,0BAAU,WACV,iCAAU,kBACV,sBAAU,WACV,6BAAU,kBACV,wBAAU,YACV,+BAAU,mBACV,0BAAU,UACV,iCAAU,iBACV,oBAAU,WACV,2BAAU,kBACV,sBAAU,WACV,6BAAU,kBACV,UAAW,UACX,SAAQ,eAsBNI,EAAQ,IAAInF,IAOZoF,EAAc,IAAIpF,IAMxB,SAASqF,EAAcC,EAAKxF,GACxB,IACIwF,EAAIzF,UAAU8C,aAAa7C,GAE/B,MAAOzM,GACH4R,EAAOX,MAAM,aAAaxE,EAAUtV,4CAA4C8a,EAAI9a,OAAQ6I,IAiBpG,SAASkS,EAAmBzF,GACxB,MAAM0F,EAAgB1F,EAAUtV,KAChC,GAAI4a,EAAY7E,IAAIiF,GAEhB,OADAP,EAAOX,MAAM,sDAAsDkB,OAC5D,EAEXJ,EAAYhe,IAAIoe,EAAe1F,GAE/B,IAAK,MAAMwF,KAAOH,EAAMzD,SACpB2D,EAAcC,EAAKxF,GAEvB,OAAO,EAwDX,MAcM2F,EAAgB,IAAItK,EAAa,MAAO,WAd/B,CACX,SAAyB,oFAEzB,eAAqC,gCACrC,gBAAuC,kFACvC,cAAmC,kDACnC,uBAAqD,6EAErD,uBAAqD,wDACrD,eAAqC,8EACrC,cAAmC,mFACnC,cAAqC,iFACrC,iBAAyC,sFAoB7C,MAAMuK,EACFrL,YAAY7N,EAASmZ,EAAQ9F,GACzB1Y,KAAKye,YAAa,EAClBze,KAAK0e,SAAW7e,OAAO6M,OAAO,GAAIrH,GAClCrF,KAAK2e,QAAU9e,OAAO6M,OAAO,GAAI8R,GACjCxe,KAAK4e,MAAQJ,EAAOnb,KACpBrD,KAAK6e,gCACDL,EAAOM,+BACX9e,KAAK+e,WAAarG,EAClB1Y,KAAK0Y,UAAU8C,aAAa,IAAI3D,EAAU,OAAO,IAAM7X,MAAM,WAE7D8e,qCAEA,OADA9e,KAAKgf,iBACEhf,KAAK6e,gCAEZC,mCAA+B5e,GAC/BF,KAAKgf,iBACLhf,KAAK6e,gCAAkC3e,EAEvCmD,WAEA,OADArD,KAAKgf,iBACEhf,KAAK4e,MAEZvZ,cAEA,OADArF,KAAKgf,iBACEhf,KAAK0e,SAEZF,aAEA,OADAxe,KAAKgf,iBACEhf,KAAK2e,QAEZjG,gBACA,OAAO1Y,KAAK+e,WAEZE,gBACA,OAAOjf,KAAKye,WAEZQ,cAAU/e,GACVF,KAAKye,WAAave,EAMtB8e,iBACI,GAAIhf,KAAKif,UACL,MAAMX,EAAcrK,OAAO,cAAiC,CAAEiL,QAASlf,KAAK4e,SAwIxF,SAASO,EAAgBC,EAAkB9b,EAAS+b,GAChD,IAAI1F,EAGJ,IAAI+D,EAA2D,QAAhD/D,EAAKoE,EAAoBqB,UAAsC,IAAPzF,EAAgBA,EAAKyF,EACxFC,IACA3B,GAAW,IAAI2B,KAEnB,MAAMC,EAAkB5B,EAAQ6B,MAAM,SAChCC,EAAkBlc,EAAQic,MAAM,SACtC,GAAID,GAAmBE,EAAiB,CACpC,MAAMC,EAAU,CACZ,+BAA+B/B,oBAA0Bpa,OAY7D,OAVIgc,GACAG,EAAQxc,KAAK,iBAAiBya,sDAE9B4B,GAAmBE,GACnBC,EAAQxc,KAAK,OAEbuc,GACAC,EAAQxc,KAAK,iBAAiBK,2DAElCwa,EAAOR,KAAKmC,EAAQ7N,KAAK,MAG7BwM,EAAmB,IAAIvG,EAAU,GAAG6F,aAAmB,KAAM,CAAGA,QAAAA,EAASpa,QAAAA,KAAY,YA4CzF,MAEMoc,EAAa,2BACnB,IAAIC,GAAY,KAChB,SAASC,KAkBL,OAjBKD,KACDA,IAAY,IAAAvc,QANJ,8BACG,GAK6Byc,IAO3B,IADDA,EAAUpe,YAEVoe,EAAUzd,kBAAkBsd,MAErCnM,OAAMrH,IACL,MAAMoS,EAAcrK,OAAO,eAAmC,CAC1D6L,qBAAsB5T,EAAE0D,cAI7B+P,GAgBXvF,eAAe2F,GAA2B5B,EAAK6B,GAC3C,IACI,MACMC,SADWL,MACHle,YAAYge,EAAY,aAChCxd,EAAc+d,EAAG/d,YAAYwd,GAEnC,aADMxd,EAAYge,IAAIF,EAAiBG,GAAWhC,IAC3C8B,EAAG7e,SAEd,MAAO8K,GACH,MAAMoS,EAAcrK,OAAO,cAAmC,CAC1D6L,qBAAsB5T,EAAE0D,WAiBpC,SAASuQ,GAAWhC,GAChB,MAAO,GAAGA,EAAI9a,QAAQ8a,EAAI9Y,QAAQ+a,QAsBtC,MAAMC,GACFnN,YAAYwF,GACR1Y,KAAK0Y,UAAYA,EAUjB1Y,KAAKsgB,iBAAmB,KACxB,MAAMnC,EAAMne,KAAK0Y,UAAUgD,YAAY,OAAOhC,eAC9C1Z,KAAKugB,SAAW,IAAIC,GAAqBrC,GACzCne,KAAKygB,wBAA0BzgB,KAAKugB,SAASG,OAAOvhB,MAAKT,IACrDsB,KAAKsgB,iBAAmB5hB,EACjBA,KAUf0b,yBACI,MAKMuG,EALiB3gB,KAAK0Y,UACvBgD,YAAY,mBACZhC,eAG4B8D,wBAC3BoD,GAsDI,IAAIzN,MAELwJ,cAAcvT,UAAU,EAAG,IApDpC,GAH8B,OAA1BpJ,KAAKsgB,mBACLtgB,KAAKsgB,uBAAyBtgB,KAAKygB,0BAEnCzgB,KAAKsgB,iBAAiBO,MAAKC,GAAuBA,EAAoBF,OAASA,IAcnF,OARI5gB,KAAKsgB,iBAAiBrd,KAAK,CAAE2d,KAAAA,EAAMD,UAAAA,IAGvC3gB,KAAKsgB,iBAAmBtgB,KAAKsgB,iBAAiB7F,QAAOqG,IACjD,MAAMC,EAAc,IAAI5N,KAAK2N,EAAoBF,MAAMI,UAEvD,OADY7N,KAAKuJ,MACJqE,GAnDqB,UAqD/B/gB,KAAKugB,SAASU,UAAUjhB,KAAKsgB,kBAQxClG,4BAKI,GAJ8B,OAA1Bpa,KAAKsgB,wBACCtgB,KAAKygB,wBAGe,OAA1BzgB,KAAKsgB,iBACL,MAAO,GAGX,MAAM,iBAAEY,EAAgB,cAAEC,GAuBlC,SAAoCC,EAAiBC,EA/F5B,MAkGrB,MAAMH,EAAmB,GAEzB,IAAIC,EAAgBC,EAAgBljB,QACpC,IAAK,MAAM4iB,KAAuBM,EAAiB,CAE/C,MAAME,EAAiBJ,EAAiBK,MAAKC,GAAMA,EAAGb,YAAcG,EAAoBH,YACxF,GAAKW,GAiBD,GAHAA,EAAeG,MAAMxe,KAAK6d,EAAoBF,MAG1Cc,GAAWR,GAAoBG,EAAS,CACxCC,EAAeG,MAAME,MACrB,YAbJ,GAJAT,EAAiBje,KAAK,CAClB0d,UAAWG,EAAoBH,UAC/Bc,MAAO,CAACX,EAAoBF,QAE5Bc,GAAWR,GAAoBG,EAAS,CAGxCH,EAAiBS,MACjB,MAcRR,EAAgBA,EAAcjjB,MAAM,GAExC,MAAO,CACHgjB,iBAAAA,EACAC,cAAAA,GA5D4CS,CAA2B5hB,KAAKsgB,kBACtEuB,EAAejP,EAAaiC,KAAKE,UAAU,CAAEzR,QAAS,EAAGwe,WAAYZ,KAc3E,OAbIC,EAAc1e,OAAS,GAEvBzC,KAAKsgB,iBAAmBa,QAIlBnhB,KAAKugB,SAASU,UAAUjhB,KAAKsgB,oBAGnCtgB,KAAKsgB,iBAAmB,KAEnBtgB,KAAKugB,SAASwB,aAEhBF,GAgDf,MAAMrB,GACFtN,YAAYiL,GACRne,KAAKme,IAAMA,EACXne,KAAKgiB,wBAA0BhiB,KAAKiiB,+BAExC7H,qCACI,MHtJwB,iBAAd5W,WAUP,IAAIlF,SAAQ,CAACC,EAASC,KACzB,IACI,IAAI0jB,GAAW,EACf,MAAMC,EAAgB,0DAChB9jB,EAAU2O,KAAKxJ,UAAU4e,KAAKD,GACpC9jB,EAAQI,UAAY,KAChBJ,EAAQK,OAAO2jB,QAEVH,GACDlV,KAAKxJ,UAAU8e,eAAeH,GAElC5jB,GAAQ,IAEZF,EAAQoF,gBAAkB,KACtBye,GAAW,GAEf7jB,EAAQM,QAAU,KACd,IAAIgb,EACJnb,GAAiC,QAAxBmb,EAAKtb,EAAQO,aAA0B,IAAP+a,OAAgB,EAASA,EAAG/J,UAAY,KAGzF,MAAOhR,GACHJ,EAAOI,OG2HFO,MAAK,KAAM,IACXoU,OAAM,KAAM,IAMzB6G,aAEI,SAD8Bpa,KAAKgiB,wBAI9B,CACD,MAAMO,QA5NlBnI,eAA2C+D,GACvC,IAEI,aADiByB,MAEZle,YAAYge,GACZxd,YAAYwd,GACZ3f,IAAIogB,GAAWhC,IAExB,MAAOjS,GACH,MAAMoS,EAAcrK,OAAO,cAAiC,CACxD6L,qBAAsB5T,EAAE0D,WAkNS4S,CAA4BxiB,KAAKme,KAClE,OAAQoE,MAAAA,OAA+D,EAASA,EAAmBT,aAAe,GAJlH,MAAO,GAQf1H,gBAAgB0H,GAEZ,aAD8B9hB,KAAKgiB,wBAKxBjC,GAA2B/f,KAAKme,IAAK,CAAE2D,WAAAA,SAH9C,EAOR1H,UAAU0H,GAEN,SAD8B9hB,KAAKgiB,wBAI9B,CACD,MAAMS,QAA2BziB,KAAK0gB,OACtC,OAAOX,GAA2B/f,KAAKme,IAAK,CACxC2D,WAAY,IAAIW,KAAuBX,MAKnD1H,aAAa0H,GAET,SAD8B9hB,KAAKgiB,wBAI9B,CACD,MAAMS,QAA2BziB,KAAK0gB,OACtC,OAAOX,GAA2B/f,KAAKme,IAAK,CACxC2D,WAAYW,EAAmBhI,QAAOiI,IAAsBZ,EAAW9L,SAAS0M,QAK5FtI,kBAEI,aAD8Bpa,KAAKgiB,wBA1O3C5H,eAA6C+D,GACzC,IACI,MACM8B,SADWL,MACHle,YAAYge,EAAY,aAEtC,aADMO,EAAG/d,YAAYwd,GAAYvF,OAAOgG,GAAWhC,IAC5C8B,EAAG7e,SAEd,MAAO8K,GACH,MAAMoS,EAAcrK,OAAO,iBAAuC,CAC9D6L,qBAAsB5T,EAAE0D,WAsOjB+S,CAA8B3iB,KAAKme,UAH1C,GAYZ,SAASuD,GAAWN,GAEhB,OAAOxO,EAEPiC,KAAKE,UAAU,CAAEzR,QAAS,EAAGwe,WAAYV,KAAoB3e,OAoB7D2b,EAAmB,IAAIvG,EAAU,mBAAmBa,GAAa,IAAI6E,EAA0B7E,IAAY,YAC3G0F,EAAmB,IAAIvG,EAAU,aAAaa,GAAa,IAAI2H,GAAqB3H,IAAY,YAEhGyG,EAAgBvB,EAAQC,EAaL,IAXnBsB,EAAgBvB,EAAQC,EAAW,WAEnCsB,EAAgB,UAAW,IC93B/BA,EAnBW,WACG,QAkBiB,OCjB/B,MAAM,GAAO,qBACP,GAAU,SAmBhB,IAAI,GAAc,GAkClB,MAAMyD,GAIF1P,YAAY2P,GACR7iB,KAAK6iB,YAAcA,EAEnB7iB,KAAK8iB,QAAU,YAMnB7iB,IAAI6E,EAAKzF,GACQ,MAATA,EACAW,KAAK6iB,YAAYE,WAAW/iB,KAAKgjB,cAAcle,IAG/C9E,KAAK6iB,YAAYI,QAAQjjB,KAAKgjB,cAAcle,GAAM,EAAUzF,IAMpEU,IAAI+E,GACA,MAAMoe,EAAYljB,KAAK6iB,YAAYM,QAAQnjB,KAAKgjB,cAAcle,IAC9D,OAAiB,MAAboe,EACO,KAGAtO,EAASsO,GAGxB9a,OAAOtD,GACH9E,KAAK6iB,YAAYE,WAAW/iB,KAAKgjB,cAAcle,IAEnDke,cAAc3f,GACV,OAAOrD,KAAK8iB,QAAUzf,EAE1B+f,WACI,OAAOpjB,KAAK6iB,YAAYO,YAwBhC,MAAMC,GACFnQ,cACIlT,KAAKsjB,OAAS,GACdtjB,KAAKujB,mBAAoB,EAE7BtjB,IAAI6E,EAAKzF,GACQ,MAATA,SACOW,KAAKsjB,OAAOxe,GAGnB9E,KAAKsjB,OAAOxe,GAAOzF,EAG3BU,IAAI+E,GACA,OAAI,EAAS9E,KAAKsjB,OAAQxe,GACf9E,KAAKsjB,OAAOxe,GAEhB,KAEXsD,OAAOtD,UACI9E,KAAKsjB,OAAOxe,IA6B3B,MAAM0e,GAAmB,SAAUC,GAC/B,IAGI,GAAsB,oBAAX/T,aAC2B,IAA3BA,OAAO+T,GAAiC,CAE/C,MAAMC,EAAahU,OAAO+T,GAG1B,OAFAC,EAAWT,QAAQ,oBAAqB,SACxCS,EAAWX,WAAW,qBACf,IAAIH,GAAkBc,IAGrC,MAAOxX,IAGP,OAAO,IAAImX,IAGTM,GAAoBH,GAAiB,gBAErCI,GAAiBJ,GAAiB,kBAkBlCK,GAAY,IAAIjH,EAAO,sBAIvBkH,GAAgB,WAClB,IAAI7f,EAAK,EACT,OAAO,WACH,OAAOA,KAHO,GAWhB8f,GAAO,SAAUtY,GACnB,MAAMoH,ELm8CgB,SAAUpH,GAChC,MAAMuE,EAAM,GACZ,IAAI/Q,EAAI,EACR,IAAK,IAAIwF,EAAI,EAAGA,EAAIgH,EAAIhJ,OAAQgC,IAAK,CACjC,IAAIL,EAAIqH,EAAIwE,WAAWxL,GAEvB,GAAIL,GAAK,OAAUA,GAAK,MAAQ,CAC5B,MAAM4f,EAAO5f,EAAI,MACjBK,IACA,EAAOA,EAAIgH,EAAIhJ,OAAQ,2CAEvB2B,EAAI,OAAW4f,GAAQ,KADXvY,EAAIwE,WAAWxL,GAAK,OAGhCL,EAAI,IACJ4L,EAAI/Q,KAAOmF,EAENA,EAAI,MACT4L,EAAI/Q,KAAQmF,GAAK,EAAK,IACtB4L,EAAI/Q,KAAY,GAAJmF,EAAU,KAEjBA,EAAI,OACT4L,EAAI/Q,KAAQmF,GAAK,GAAM,IACvB4L,EAAI/Q,KAASmF,GAAK,EAAK,GAAM,IAC7B4L,EAAI/Q,KAAY,GAAJmF,EAAU,MAGtB4L,EAAI/Q,KAAQmF,GAAK,GAAM,IACvB4L,EAAI/Q,KAASmF,GAAK,GAAM,GAAM,IAC9B4L,EAAI/Q,KAASmF,GAAK,EAAK,GAAM,IAC7B4L,EAAI/Q,KAAY,GAAJmF,EAAU,KAG9B,OAAO4L,EKn+CWiU,CAAkBxY,GAC9BsY,EAAO,IAAI1N,EACjB0N,EAAK5M,OAAOtE,GACZ,MAAMqR,EAAYH,EAAKzM,SACvB,OAAOpH,EAAOU,gBAAgBsT,IAE5BC,GAAmB,YAAaC,GAClC,IAAIxU,EAAU,GACd,IAAK,IAAInL,EAAI,EAAGA,EAAI2f,EAAQ3hB,OAAQgC,IAAK,CACrC,MAAM4f,EAAMD,EAAQ3f,GAChBzG,MAAM+S,QAAQsT,IACbA,GACkB,iBAARA,GAEe,iBAAfA,EAAI5hB,OACfmN,GAAWuU,GAAiBjlB,MAAM,KAAMmlB,GAGxCzU,GADoB,iBAARyU,EACD,EAAUA,GAGVA,EAEfzU,GAAW,IAEf,OAAOA,GAKX,IAAI,GAAS,KAIT0U,IAAY,EAMhB,MAiBMlH,GAAM,YAAagH,GAOrB,IANkB,IAAdE,KACAA,IAAY,EACG,OAAX,KAA6D,IAA1CV,GAAe7jB,IAAI,qBApBhBwkB,GAqBN,EApBxB,GAAQC,IAA0B,IAAZD,IAAgC,IAAZA,EAAmB,+CAC7C,IAAZA,GACAV,GAAUpH,SAAWZ,EAASG,QAC9B,GAAS6H,GAAUzG,IAAIqH,KAAKZ,IACxBW,GACAZ,GAAe3jB,IAAI,mBAAmB,IAGlB,mBAAZskB,EACZ,GAASA,GAGT,GAAS,KACTX,GAAexb,OAAO,sBAUtB,GAAQ,CACR,MAAMwH,EAAUuU,GAAiBjlB,MAAM,KAAMklB,GAC7C,GAAOxU,GA1BS,IAAU2U,EAASC,GA6BrCE,GAAa,SAAUC,GACzB,OAAO,YAAaP,GAChBhH,GAAIuH,KAAWP,KAGjBxlB,GAAQ,YAAawlB,GACvB,MAAMxU,EAAU,4BAA8BuU,MAAoBC,GAClEP,GAAUjlB,MAAMgR,IAEdgV,GAAQ,YAAaR,GACvB,MAAMxU,EAAU,yBAAyBuU,MAAoBC,KAE7D,MADAP,GAAUjlB,MAAMgR,GACV,IAAIE,MAAMF,IAEd0N,GAAO,YAAa8G,GACtB,MAAMxU,EAAU,qBAAuBuU,MAAoBC,GAC3DP,GAAUvG,KAAK1N,IAmBbiV,GAAsB,SAAUxQ,GAClC,MAAwB,iBAATA,IACVA,GAASA,GACNA,IAASyQ,OAAOC,mBAChB1Q,IAASyQ,OAAOE,oBA8CtBC,GAAW,aAIXC,GAAW,aAIXC,GAAc,SAAU/V,EAAGuG,GAC7B,GAAIvG,IAAMuG,EACN,OAAO,EAEN,GAAIvG,IAAM6V,IAAYtP,IAAMuP,GAC7B,OAAQ,EAEP,GAAIvP,IAAMsP,IAAY7V,IAAM8V,GAC7B,OAAO,EAEN,CACD,MAAME,EAASC,GAAYjW,GAAIkW,EAASD,GAAY1P,GACpD,OAAe,OAAXyP,EACe,OAAXE,EACOF,EAASE,GAAW,EAAIlW,EAAE3M,OAASkT,EAAElT,OAAS2iB,EAASE,GAGtD,EAGI,OAAXA,EACE,EAGAlW,EAAIuG,GAAK,EAAI,IAO1B4P,GAAgB,SAAUnW,EAAGuG,GAC/B,OAAIvG,IAAMuG,EACC,EAEFvG,EAAIuG,GACD,EAGD,GAGT6P,GAAa,SAAU1gB,EAAKhG,GAC9B,GAAIA,GAAOgG,KAAOhG,EACd,OAAOA,EAAIgG,GAGX,MAAM,IAAIgL,MAAM,yBAA2BhL,EAAM,gBAAkB,EAAUhG,KAG/E2mB,GAAoB,SAAU3mB,GAChC,GAAmB,iBAARA,GAA4B,OAARA,EAC3B,OAAO,EAAUA,GAErB,MAAM+W,EAAO,GAEb,IAAK,MAAME,KAAKjX,EACZ+W,EAAK5S,KAAK8S,GAGdF,EAAKxK,OACL,IAAIvG,EAAM,IACV,IAAK,IAAIL,EAAI,EAAGA,EAAIoR,EAAKpT,OAAQgC,IACnB,IAANA,IACAK,GAAO,KAEXA,GAAO,EAAU+Q,EAAKpR,IACtBK,GAAO,IACPA,GAAO2gB,GAAkB3mB,EAAI+W,EAAKpR,KAGtC,OADAK,GAAO,IACAA,GAQL4gB,GAAoB,SAAUja,EAAKka,GACrC,MAAMC,EAAMna,EAAIhJ,OAChB,GAAImjB,GAAOD,EACP,MAAO,CAACla,GAEZ,MAAMoa,EAAW,GACjB,IAAK,IAAIzhB,EAAI,EAAGA,EAAIwhB,EAAKxhB,GAAKuhB,EACtBvhB,EAAIuhB,EAAUC,EACdC,EAAS5iB,KAAKwI,EAAIrC,UAAUhF,EAAGwhB,IAG/BC,EAAS5iB,KAAKwI,EAAIrC,UAAUhF,EAAGA,EAAIuhB,IAG3C,OAAOE,GAQX,SAASC,GAAKhnB,EAAKyW,GACf,IAAK,MAAMzQ,KAAOhG,EACVA,EAAI8N,eAAe9H,IACnByQ,EAAGzQ,EAAKhG,EAAIgG,IAWxB,MAAMihB,GAAwB,SAAUC,GACpC,GAAQnB,GAAoBmB,GAAI,uBAGhC,IAAIxY,EAAGtB,EAAGgL,EAAG+O,EAAIxhB,EAGP,IAANuhB,GACA9Z,EAAI,EACJgL,EAAI,EACJ1J,EAAI,EAAIwY,IAAM,IAAY,EAAI,IAG9BxY,EAAIwY,EAAI,GACRA,EAAI/a,KAAKib,IAAIF,KACJ/a,KAAKkb,IAAI,GAAG,OAEjBF,EAAKhb,KAAKmb,IAAInb,KAAKob,MAAMpb,KAAKmS,IAAI4I,GAAK/a,KAAKqb,KAdvC,MAeLpa,EAAI+Z,EAfC,KAgBL/O,EAAIjM,KAAKC,MAAM8a,EAAI/a,KAAKkb,IAAI,EAjBV,GAiBqBF,GAAMhb,KAAKkb,IAAI,EAjBpC,OAqBlBja,EAAI,EACJgL,EAAIjM,KAAKC,MAAM8a,EAAI/a,KAAKkb,IAAI,GAAG,SAIvC,MAAMI,EAAO,GACb,IAAK9hB,EA3BqB,GA2BVA,EAAGA,GAAK,EACpB8hB,EAAKtjB,KAAKiU,EAAI,EAAI,EAAI,GACtBA,EAAIjM,KAAKob,MAAMnP,EAAI,GAEvB,IAAKzS,EA/BS,GA+BEA,EAAGA,GAAK,EACpB8hB,EAAKtjB,KAAKiJ,EAAI,EAAI,EAAI,GACtBA,EAAIjB,KAAKob,MAAMna,EAAI,GAEvBqa,EAAKtjB,KAAKuK,EAAI,EAAI,GAClB+Y,EAAKC,UACL,MAAM/a,EAAM8a,EAAK3U,KAAK,IAEtB,IAAI6U,EAAgB,GACpB,IAAKhiB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CACxB,IAAIiiB,EAAUzd,SAASwC,EAAI7C,OAAOnE,EAAG,GAAI,GAAG2e,SAAS,IAC9B,IAAnBsD,EAAQjkB,SACRikB,EAAU,IAAMA,GAEpBD,GAAgCC,EAEpC,OAAOD,EAActZ,eA2CnBwZ,GAAkB,IAAIC,OAAO,qBAY7BvB,GAAc,SAAU5Z,GAC1B,GAAIkb,GAAgB7d,KAAK2C,GAAM,CAC3B,MAAMob,EAAS/B,OAAOrZ,GACtB,GAAIob,IAXW,YAWiBA,GAPjB,WAQX,OAAOA,EAGf,OAAO,MAmBLC,GAAiB,SAAUvR,GAC7B,IACIA,IAEJ,MAAOrJ,GAEHzE,YAAW,KAKP,MAAMsf,EAAQ7a,EAAE6a,OAAS,GAEzB,MADAzJ,GAAK,yCAA0CyJ,GACzC7a,IACPjB,KAAKob,MAAM,MA0BhBW,GAAwB,SAAUzR,EAAI0R,GACxC,MAAMrgB,EAAUa,WAAW8N,EAAI0R,GAM/B,MAJuB,iBAAZrgB,GAAwBA,EAAe,OAE9CA,EAAe,QAEZA,GAsBX,MAAMsgB,GACFhU,YAAYiU,EAAUC,GAClBpnB,KAAKmnB,SAAWA,EAChBnnB,KAAKonB,iBAAmBA,EACxBpnB,KAAKqnB,SAAWD,MAAAA,OAA2D,EAASA,EAAiB1N,aAAa,CAAEE,UAAU,IACzH5Z,KAAKqnB,UACND,MAAAA,GAAoEA,EAAiBrnB,MAAMZ,MAAKkoB,GAAarnB,KAAKqnB,SAAWA,IAGrIC,SAASC,GACL,OAAKvnB,KAAKqnB,SAgBHrnB,KAAKqnB,SAASC,SAASC,GAfnB,IAAIjpB,SAAQ,CAACC,EAASC,KAKzBiJ,YAAW,KACHzH,KAAKqnB,SACLrnB,KAAKsnB,SAASC,GAAcpoB,KAAKZ,EAASC,GAG1CD,EAAQ,QAEb,MAKfipB,uBAAuBC,GACnB,IAAI9N,EAC6B,QAAhCA,EAAK3Z,KAAKonB,wBAAqC,IAAPzN,GAAyBA,EAAG5Z,MAAMZ,MAAKkoB,GAAYA,EAASK,iBAAiBD,KAE1HE,wBACIrK,GAAK,oDAAoDtd,KAAKmnB,0FAwBtE,MAAMS,GACF1U,YAAYiU,EAAUU,EAAkBC,GACpC9nB,KAAKmnB,SAAWA,EAChBnnB,KAAK6nB,iBAAmBA,EACxB7nB,KAAK8nB,cAAgBA,EACrB9nB,KAAK+nB,MAAQ,KACb/nB,KAAK+nB,MAAQD,EAAcpO,aAAa,CAAEE,UAAU,IAC/C5Z,KAAK+nB,OACND,EAAc9M,QAAOgN,GAAShoB,KAAK+nB,MAAQC,IAGnDV,SAASC,GACL,OAAKvnB,KAAK+nB,MAgBH/nB,KAAK+nB,MAAMT,SAASC,GAAchU,OAAM3U,GAGvCA,GAAwB,+BAAfA,EAAM+U,MACfyJ,GAAI,kEACG,MAGA9e,QAAQE,OAAOI,KAvBnB,IAAIN,SAAQ,CAACC,EAASC,KAKzBiJ,YAAW,KACHzH,KAAK+nB,MACL/nB,KAAKsnB,SAASC,GAAcpoB,KAAKZ,EAASC,GAG1CD,EAAQ,QAEb,MAefipB,uBAAuBC,GAGfznB,KAAK+nB,MACL/nB,KAAK+nB,MAAME,qBAAqBR,GAGhCznB,KAAK8nB,cACA/nB,MACAZ,MAAK6oB,GAAQA,EAAKC,qBAAqBR,KAGpDS,0BAA0BT,GACtBznB,KAAK8nB,cACA/nB,MACAZ,MAAK6oB,GAAQA,EAAKG,wBAAwBV,KAEnDE,wBACI,IAAIS,EAAe,0DACfpoB,KAAKmnB,SADU,iFAIf,eAAgBnnB,KAAK6nB,iBACrBO,GACI,uJAIC,mBAAoBpoB,KAAK6nB,iBAC9BO,GACI,2JAKJA,GACI,kKAIR9K,GAAK8K,IAIb,MAAMC,GACFnV,YAAYoV,GACRtoB,KAAKsoB,YAAcA,EAEvBhB,SAASC,GACL,OAAOjpB,QAAQC,QAAQ,CACnB+pB,YAAatoB,KAAKsoB,cAG1Bd,uBAAuBC,GAGnBA,EAASznB,KAAKsoB,aAElBJ,0BAA0BT,IAC1BE,0BAGJU,GAAsBE,MAAQ,QAkB9B,MAOMC,GAAkB,6EAIlBC,GAAY,YACZC,GAAe,eAqBrB,MAAMC,GASFzV,YAAY0V,EAAMC,EAAQC,EAAWC,EAAeC,GAAY,EAAOC,EAAiB,GAAIC,GAAgC,GACxHlpB,KAAK6oB,OAASA,EACd7oB,KAAK8oB,UAAYA,EACjB9oB,KAAK+oB,cAAgBA,EACrB/oB,KAAKgpB,UAAYA,EACjBhpB,KAAKipB,eAAiBA,EACtBjpB,KAAKkpB,8BAAgCA,EACrClpB,KAAKmpB,MAAQP,EAAKzb,cAClBnN,KAAKopB,QAAUppB,KAAKmpB,MAAMvgB,OAAO5I,KAAKmpB,MAAME,QAAQ,KAAO,GAC3DrpB,KAAKspB,aACD3F,GAAkB5jB,IAAI,QAAU6oB,IAAS5oB,KAAKmpB,MAEtDI,kBACI,MAA0C,OAAnCvpB,KAAKspB,aAAa1gB,OAAO,EAAG,GAEvC4gB,eACI,MAAyB,mBAAjBxpB,KAAKopB,SACQ,wBAAjBppB,KAAKopB,QAETR,WACA,OAAO5oB,KAAKmpB,MAEZP,SAAKa,GACDA,IAAYzpB,KAAKspB,eACjBtpB,KAAKspB,aAAeG,EAChBzpB,KAAKupB,mBACL5F,GAAkB1jB,IAAI,QAAUD,KAAKmpB,MAAOnpB,KAAKspB,eAI7DlG,WACI,IAAI3X,EAAMzL,KAAK0pB,cAIf,OAHI1pB,KAAKipB,iBACLxd,GAAO,IAAMzL,KAAKipB,eAAiB,KAEhCxd,EAEXie,cACI,MAAMC,EAAW3pB,KAAK6oB,OAAS,WAAa,UACtCjmB,EAAQ5C,KAAKkpB,8BACb,OAAOlpB,KAAK8oB,YACZ,GACN,MAAO,GAAGa,IAAW3pB,KAAK4oB,QAAQhmB,KAe1C,SAASgnB,GAAsBC,EAAUxb,EAAMyb,GAG3C,IAAIC,EACJ,GAHA,EAAuB,iBAAT1b,EAAmB,8BACjC,EAAyB,iBAAXyb,EAAqB,gCAE/Bzb,IAASoa,GACTsB,GACKF,EAAShB,OAAS,SAAW,SAAWgB,EAASP,aAAe,YAEpE,IAAIjb,IAASqa,GAOd,MAAM,IAAI5Y,MAAM,4BAA8BzB,GAN9C0b,GACKF,EAAShB,OAAS,WAAa,WAC5BgB,EAASP,aACT,SAxBhB,SAAiCO,GAC7B,OAAQA,EAASjB,OAASiB,EAASP,cAC/BO,EAASL,gBACTK,EAASX,+BA0BTc,CAAwBH,KACxBC,EAAW,GAAID,EAASf,WAE5B,MAAMmB,EAAQ,GAId,OAHAnE,GAAKgE,GAAQ,CAAChlB,EAAKzF,KACf4qB,EAAMhnB,KAAK6B,EAAM,IAAMzF,MAEpB0qB,EAAUE,EAAMrY,KAAK,KAsBhC,MAAMsY,GACFhX,cACIlT,KAAKmqB,UAAY,GAErBC,iBAAiB/mB,EAAMgnB,EAAS,GACvB,EAASrqB,KAAKmqB,UAAW9mB,KAC1BrD,KAAKmqB,UAAU9mB,GAAQ,GAE3BrD,KAAKmqB,UAAU9mB,IAASgnB,EAE5BtqB,MACI,OAAOiT,EAAShT,KAAKmqB,YAoB7B,MAAMG,GAAc,GACdC,GAAY,GAClB,SAASC,GAA0BX,GAC/B,MAAMY,EAAaZ,EAASzG,WAI5B,OAHKkH,GAAYG,KACbH,GAAYG,GAAc,IAAIP,IAE3BI,GAAYG,GA8BvB,MAAMC,GAIFxX,YAAYyX,GACR3qB,KAAK2qB,WAAaA,EAClB3qB,KAAK4qB,iBAAmB,GACxB5qB,KAAK6qB,mBAAqB,EAC1B7qB,KAAK8qB,oBAAsB,EAC3B9qB,KAAK+qB,QAAU,KAEnBC,WAAWC,EAAazoB,GACpBxC,KAAK8qB,mBAAqBG,EAC1BjrB,KAAK+qB,QAAUvoB,EACXxC,KAAK8qB,mBAAqB9qB,KAAK6qB,qBAC/B7qB,KAAK+qB,UACL/qB,KAAK+qB,QAAU,MAQvBG,eAAeC,EAAY9W,GAEvB,IADArU,KAAK4qB,iBAAiBO,GAAc9W,EAC7BrU,KAAK4qB,iBAAiB5qB,KAAK6qB,qBAAqB,CACnD,MAAMO,EAAYprB,KAAK4qB,iBAAiB5qB,KAAK6qB,2BACtC7qB,KAAK4qB,iBAAiB5qB,KAAK6qB,oBAClC,IAAK,IAAIpmB,EAAI,EAAGA,EAAI2mB,EAAU3oB,SAAUgC,EAChC2mB,EAAU3mB,IACVqiB,IAAe,KACX9mB,KAAK2qB,WAAWS,EAAU3mB,OAItC,GAAIzE,KAAK6qB,qBAAuB7qB,KAAK8qB,mBAAoB,CACjD9qB,KAAK+qB,UACL/qB,KAAK+qB,UACL/qB,KAAK+qB,QAAU,MAEnB,MAEJ/qB,KAAK6qB,uBAqDjB,MAAMQ,GAYFnY,YAAYoY,EAAQzB,EAAU0B,EAAeC,EAAeC,EAAWC,EAAoBC,GACvF3rB,KAAKsrB,OAASA,EACdtrB,KAAK6pB,SAAWA,EAChB7pB,KAAKurB,cAAgBA,EACrBvrB,KAAKwrB,cAAgBA,EACrBxrB,KAAKyrB,UAAYA,EACjBzrB,KAAK0rB,mBAAqBA,EAC1B1rB,KAAK2rB,cAAgBA,EACrB3rB,KAAK4rB,UAAY,EACjB5rB,KAAK6rB,cAAgB,EACrB7rB,KAAK8rB,gBAAiB,EACtB9rB,KAAK+rB,KAAOrH,GAAW4G,GACvBtrB,KAAKgsB,OAASxB,GAA0BX,GACxC7pB,KAAKisB,MAASnC,IAEN9pB,KAAKwrB,gBACL1B,EAA4B,GAAI9pB,KAAKwrB,eAElC5B,GAAsBC,EAAUnB,GAAcoB,IAO7D1H,KAAK8J,EAAWC,GACZnsB,KAAKosB,cAAgB,EACrBpsB,KAAKqsB,cAAgBF,EACrBnsB,KAAKssB,gBAAkB,IAAI5B,GAAewB,GAC1ClsB,KAAKusB,WAAY,EACjBvsB,KAAKwsB,qBAAuB/kB,YAAW,KACnCzH,KAAK+rB,KAAK,gCAEV/rB,KAAKysB,YACLzsB,KAAKwsB,qBAAuB,OAE7BvhB,KAAKob,MApDW,MAh1BC,SAAU9Q,GAClC,GAA2C,aAAxBnJ,SAASsgB,WACxBnX,QAEC,CAGD,IAAIoX,GAAS,EACb,MAAMC,EAAY,WACTxgB,SAASmC,KAIToe,IACDA,GAAS,EACTpX,KALA9N,WAAWmlB,EAAW3hB,KAAKob,MAAM,MAQrCja,SAASH,kBACTG,SAASH,iBAAiB,mBAAoB2gB,GAAW,GAEzDld,OAAOzD,iBAAiB,OAAQ2gB,GAAW,IAGtCxgB,SAASygB,cAGdzgB,SAASygB,YAAY,sBAAsB,KACX,aAAxBzgB,SAASsgB,YACTE,OAKRld,OAAOmd,YAAY,SAAUD,KAo2BjCE,EAAoB,KAChB,GAAI9sB,KAAKusB,UACL,OAGJvsB,KAAK+sB,gBAAkB,IAAIC,IAA2B,IAAIhuB,KACtD,MAAOiuB,EAASC,EAAMC,EAAMC,EAAMC,GAAQruB,EAE1C,GADAgB,KAAKstB,wBAAwBtuB,GACxBgB,KAAK+sB,gBAQV,GALI/sB,KAAKwsB,uBACLe,aAAavtB,KAAKwsB,sBAClBxsB,KAAKwsB,qBAAuB,MAEhCxsB,KAAK8rB,gBAAiB,EAhGA,UAiGlBmB,EACAjtB,KAAKiE,GAAKipB,EACVltB,KAAKwtB,SAAWL,MAEf,IApGmB,UAoGfF,EAiBL,MAAM,IAAInd,MAAM,kCAAoCmd,GAfhDC,GAGAltB,KAAK+sB,gBAAgBU,cAAe,EAGpCztB,KAAKssB,gBAAgBtB,WAAWkC,GAAM,KAClCltB,KAAKysB,gBAITzsB,KAAKysB,gBAMd,IAAIztB,KACH,MAAO0uB,EAAIrZ,GAAQrV,EACnBgB,KAAKstB,wBAAwBtuB,GAC7BgB,KAAKssB,gBAAgBpB,eAAewC,EAAIrZ,MACzC,KACCrU,KAAKysB,cACNzsB,KAAKisB,OAGR,MAAM0B,EAAY,CAClBA,MAA2C,KAC3CA,EAAwC,IAAI1iB,KAAKob,MAAsB,IAAhBpb,KAAKE,UACxDnL,KAAK+sB,gBAAgBa,2BACrBD,EAA6C,GACzC3tB,KAAK+sB,gBAAgBa,0BAE7BD,EAAuB,EA9ZV,IA+ZT3tB,KAAK0rB,qBACLiC,EAAiC,EAAI3tB,KAAK0rB,oBAE1C1rB,KAAK2rB,gBACLgC,EAA4B,GAAI3tB,KAAK2rB,eAErC3rB,KAAKurB,gBACLoC,EAA8B,EAAI3tB,KAAKurB,eAEvCvrB,KAAKwrB,gBACLmC,EAA+B,GAAI3tB,KAAKwrB,eAEpB,oBAAbqC,UACPA,SAASC,UACTtF,GAAgB1f,KAAK+kB,SAASC,YAC9BH,EAAuB,EA1arB,KA4aN,MAAMI,EAAa/tB,KAAKisB,MAAM0B,GAC9B3tB,KAAK+rB,KAAK,+BAAiCgC,GAC3C/tB,KAAK+sB,gBAAgBiB,OAAOD,GAAY,YAQhDloB,QACI7F,KAAK+sB,gBAAgBkB,cAAcjuB,KAAKiE,GAAIjE,KAAKwtB,UACjDxtB,KAAKkuB,uBAAuBluB,KAAKiE,GAAIjE,KAAKwtB,UAK9CW,oBACI9C,GAAsB+C,aAAc,EAKxCD,uBACI9C,GAAsBgD,gBAAiB,EAG3CF,qBACI,SAGS9C,GAAsB+C,cAMlB/C,GAAsBgD,gBACP,oBAAbjiB,UACmB,MAA1BA,SAASC,eAvxBO,iBAAXqD,QACbA,OAAe,QACfA,OAAe,OAAa,YAC3B,UAAU5G,KAAK4G,OAAOme,SAASS,OAOV,iBAAZC,SAA8C,iBAAfA,QAAQC,KAqxBrDC,yBAIAC,YACI1uB,KAAKusB,WAAY,EACbvsB,KAAK+sB,kBACL/sB,KAAK+sB,gBAAgB1K,QACrBriB,KAAK+sB,gBAAkB,MAGvB/sB,KAAK2uB,iBACLviB,SAASmC,KAAKxH,YAAY/G,KAAK2uB,gBAC/B3uB,KAAK2uB,eAAiB,MAEtB3uB,KAAKwsB,uBACLe,aAAavtB,KAAKwsB,sBAClBxsB,KAAKwsB,qBAAuB,MAMpCC,YACSzsB,KAAKusB,YACNvsB,KAAK+rB,KAAK,8BACV/rB,KAAK0uB,YACD1uB,KAAKqsB,gBACLrsB,KAAKqsB,cAAcrsB,KAAK8rB,gBACxB9rB,KAAKqsB,cAAgB,OAQjChK,QACSriB,KAAKusB,YACNvsB,KAAK+rB,KAAK,6BACV/rB,KAAK0uB,aAQbE,KAAKva,GACD,MAAMwa,EAAU,EAAUxa,GAC1BrU,KAAK4rB,WAAaiD,EAAQpsB,OAC1BzC,KAAKgsB,OAAO5B,iBAAiB,aAAcyE,EAAQpsB,QAEnD,MAAMqsB,EAAalc,EAAaic,GAG1BhJ,EAAWH,GAAkBoJ,EAhPlBC,MAmPjB,IAAK,IAAItqB,EAAI,EAAGA,EAAIohB,EAASpjB,OAAQgC,IACjCzE,KAAK+sB,gBAAgBiC,eAAehvB,KAAKosB,cAAevG,EAASpjB,OAAQojB,EAASphB,IAClFzE,KAAKosB,gBAQb8B,uBAAuBjqB,EAAIgrB,GAIvBjvB,KAAK2uB,eAAiBviB,SAASC,cAAc,UAC7C,MAAMshB,EAAY,CAClBA,OAA2D,KAC3DA,EAAoC,GAAI1pB,EACxC0pB,EAAoC,GAAIsB,EACxCjvB,KAAK2uB,eAAeO,IAAMlvB,KAAKisB,MAAM0B,GACrC3tB,KAAK2uB,eAAehhB,MAAMC,QAAU,OACpCxB,SAASmC,KAAKC,YAAYxO,KAAK2uB,gBAKnCrB,wBAAwBtuB,GAEpB,MAAM6sB,EAAgB,EAAU7sB,GAAMyD,OACtCzC,KAAK6rB,eAAiBA,EACtB7rB,KAAKgsB,OAAO5B,iBAAiB,iBAAkByB,IAMvD,MAAMmB,GAOF9Z,YAAYic,EAAWC,EAAajD,EAAcF,GAC9CjsB,KAAKmsB,aAAeA,EACpBnsB,KAAKisB,MAAQA,EAGbjsB,KAAKqvB,oBAAsB,IAAInU,IAE/Blb,KAAKsvB,YAAc,GAMnBtvB,KAAKuvB,cAAgBtkB,KAAKob,MAAsB,IAAhBpb,KAAKE,UAGrCnL,KAAKytB,cAAe,EACF,CAKdztB,KAAK4tB,yBAA2B9J,KAChCpU,OApU8B,aAoUa1P,KAAK4tB,0BAA4BuB,EAC5Ezf,OApU2B,UAoUa1P,KAAK4tB,0BACzCwB,EAEJpvB,KAAKwvB,SAAWxC,GAA2ByC,gBAE3C,IAAIC,EAAS,GAGT1vB,KAAKwvB,SAASN,KACwC,gBAAtDlvB,KAAKwvB,SAASN,IAAItmB,OAAO,EAAG,cAAcnG,UAE1CitB,EAAS,4BADatjB,SAASujB,OACwB,gBAE3D,MAAMC,EAAiB,eAAiBF,EAAS,iBACjD,IACI1vB,KAAKwvB,SAASK,IAAIzN,OAClBpiB,KAAKwvB,SAASK,IAAIC,MAAMF,GACxB5vB,KAAKwvB,SAASK,IAAIxN,QAEtB,MAAOnW,GACHkR,GAAI,2BACAlR,EAAE6a,OACF3J,GAAIlR,EAAE6a,OAEV3J,GAAIlR,KAYhBiiB,uBACI,MAAM4B,EAAS3jB,SAASC,cAAc,UAGtC,GAFA0jB,EAAOpiB,MAAMC,QAAU,QAEnBxB,SAASmC,KAuBT,KAAM,oGAtBNnC,SAASmC,KAAKC,YAAYuhB,GAC1B,IAIcA,EAAOC,cAAc5jB,UAG3BgR,GAAI,iCAGZ,MAAOlR,GACH,MAAMyjB,EAASvjB,SAASujB,OACxBI,EAAOb,IACH,gEACIS,EACA,2BAoBhB,OAXII,EAAOE,gBACPF,EAAOF,IAAME,EAAOE,gBAEfF,EAAOC,cACZD,EAAOF,IAAME,EAAOC,cAAc5jB,SAG7B2jB,EAAO3jB,WAEZ2jB,EAAOF,IAAME,EAAO3jB,UAEjB2jB,EAKX1N,QAEIriB,KAAKkwB,OAAQ,EACTlwB,KAAKwvB,WAILxvB,KAAKwvB,SAASK,IAAIthB,KAAKzC,UAAY,GACnCrE,YAAW,KACe,OAAlBzH,KAAKwvB,WACLpjB,SAASmC,KAAKxH,YAAY/G,KAAKwvB,UAC/BxvB,KAAKwvB,SAAW,QAErBvkB,KAAKob,MAAM,KAGlB,MAAM8F,EAAensB,KAAKmsB,aACtBA,IACAnsB,KAAKmsB,aAAe,KACpBA,KAQR8B,cAAchqB,EAAIgrB,GAKd,IAJAjvB,KAAKmwB,KAAOlsB,EACZjE,KAAKowB,KAAOnB,EACZjvB,KAAKkwB,OAAQ,EAENlwB,KAAKqwB,iBAShBA,cAII,GAAIrwB,KAAKkwB,OACLlwB,KAAKytB,cACLztB,KAAKqvB,oBAAoBiB,MAAQtwB,KAAKsvB,YAAY7sB,OAAS,EAAI,EAAI,GAAI,CAEvEzC,KAAKuvB,gBACL,MAAM5B,EAAY,GAClBA,EAAoC,GAAI3tB,KAAKmwB,KAC7CxC,EAAoC,GAAI3tB,KAAKowB,KAC7CzC,EAAwC,IAAI3tB,KAAKuvB,cACjD,IAAIgB,EAASvwB,KAAKisB,MAAM0B,GAEpB6C,EAAgB,GAChB/rB,EAAI,EACR,KAAOzE,KAAKsvB,YAAY7sB,OAAS,GAEbzC,KAAKsvB,YAAY,GACrBngB,EAAE1M,OAtcN,GAwcJ+tB,EAAc/tB,QAzcR,MA0ca,CAEnB,MAAMguB,EAASzwB,KAAKsvB,YAAYoB,QAChCF,EACIA,EAAAA,OAGI/rB,EACA,IACAgsB,EAAOE,IALXH,MAQI/rB,EACA,IACAgsB,EAAOG,GAVXJ,KAaI/rB,EACA,IACAgsB,EAAOthB,EACf1K,IAQR,OAFA8rB,GAAkBC,EAClBxwB,KAAK6wB,gBAAgBN,EAAQvwB,KAAKuvB,gBAC3B,EAGP,OAAO,EASfP,eAAe8B,EAAQC,EAAW1c,GAE9BrU,KAAKsvB,YAAYrsB,KAAK,CAAE0tB,IAAKG,EAAQF,GAAIG,EAAW5hB,EAAGkF,IAGnDrU,KAAKkwB,OACLlwB,KAAKqwB,cAQbQ,gBAAgBG,EAAKC,GAEjBjxB,KAAKqvB,oBAAoBtkB,IAAIkmB,GAC7B,MAAMC,EAAe,KACjBlxB,KAAKqvB,oBAAoBlV,OAAO8W,GAChCjxB,KAAKqwB,eAIHc,EAAmB1pB,WAAWypB,EAAcjmB,KAAKob,MAjgB5B,OAwgB3BrmB,KAAKguB,OAAOgD,GANS,KAEjBzD,aAAa4D,GAEbD,OASRlD,OAAOgD,EAAKI,GAMJ3pB,YAAW,KACP,IAEI,IAAKzH,KAAKytB,aACN,OAEJ,MAAM4D,EAAYrxB,KAAKwvB,SAASK,IAAIxjB,cAAc,UAClDglB,EAAUhjB,KAAO,kBACjBgjB,EAAUjX,OAAQ,EAClBiX,EAAUnC,IAAM8B,EAEhBK,EAAUC,OAASD,EAAUE,mBACzB,WAEI,MAAMC,EAASH,EAAU3E,WACpB8E,GAAqB,WAAXA,GAAkC,aAAXA,IAElCH,EAAUC,OAASD,EAAUE,mBAAqB,KAC9CF,EAAUvqB,YACVuqB,EAAUvqB,WAAWC,YAAYsqB,GAErCD,MAGZC,EAAU1yB,QAAU,KAChBye,GAAI,oCAAsC4T,GAC1ChxB,KAAKytB,cAAe,EACpBztB,KAAKqiB,SAETriB,KAAKwvB,SAASK,IAAIthB,KAAKC,YAAY6iB,GAEvC,MAAOnlB,OAGRjB,KAAKob,MAAM,KAuB1B,IAAIoL,GAAgB,KACQ,oBAAjBC,aACPD,GAAgBC,aAEU,oBAAdC,YACZF,GAAgBE,WAKpB,MAAMC,GAYF1e,YAAYoY,EAAQzB,EAAU0B,EAAeC,EAAeC,EAAWC,EAAoBC,GACvF3rB,KAAKsrB,OAASA,EACdtrB,KAAKurB,cAAgBA,EACrBvrB,KAAKwrB,cAAgBA,EACrBxrB,KAAKyrB,UAAYA,EACjBzrB,KAAK6xB,eAAiB,KACtB7xB,KAAK8xB,OAAS,KACd9xB,KAAK+xB,YAAc,EACnB/xB,KAAK4rB,UAAY,EACjB5rB,KAAK6rB,cAAgB,EACrB7rB,KAAK+rB,KAAOrH,GAAW1kB,KAAKsrB,QAC5BtrB,KAAKgsB,OAASxB,GAA0BX,GACxC7pB,KAAK+pB,QAAU6H,GAAoBI,eAAenI,EAAU6B,EAAoBC,EAAeH,GAC/FxrB,KAAKgpB,UAAYa,EAASb,UAS9BmF,sBAAsBtE,EAAU6B,EAAoBC,EAAeH,GAC/D,MAAMmC,EAAY,CAClBA,EAz6BiB,KAy7BjB,MAdwB,oBAAbE,UACPA,SAASC,UACTtF,GAAgB1f,KAAK+kB,SAASC,YAC9BH,EAAuB,EA16BjB,KA46BNjC,IACAiC,EAAiC,EAAIjC,GAErCC,IACAgC,EAA4B,GAAIhC,GAEhCH,IACAmC,EAA+B,GAAInC,GAEhC5B,GAAsBC,EAAUpB,GAAWkF,GAMtDvL,KAAK8J,EAAWC,GACZnsB,KAAKmsB,aAAeA,EACpBnsB,KAAKksB,UAAYA,EACjBlsB,KAAK+rB,KAAK,2BAA6B/rB,KAAK+pB,SAC5C/pB,KAAK8rB,gBAAiB,EAEtBnI,GAAkB1jB,IAAI,8BAA8B,GACpD,IA+BS,CACD,MAAMoF,EAAU,CACZ4sB,QAAS,CACL,mBAAoBjyB,KAAKurB,eAAiB,GAC1C,sBAAuBvrB,KAAKwrB,eAAiB,KAGrDxrB,KAAKkyB,OAAS,IAAIT,GAAczxB,KAAK+pB,QAAS,GAAI1kB,IAG1D,MAAO6G,GACHlM,KAAK+rB,KAAK,kCACV,MAAMntB,EAAQsN,EAAE0D,SAAW1D,EAAEmI,KAK7B,OAJIzV,GACAoB,KAAK+rB,KAAKntB,QAEdoB,KAAKysB,YAGTzsB,KAAKkyB,OAAOC,OAAS,KACjBnyB,KAAK+rB,KAAK,wBACV/rB,KAAK8rB,gBAAiB,GAE1B9rB,KAAKkyB,OAAOE,QAAU,KAClBpyB,KAAK+rB,KAAK,0CACV/rB,KAAKkyB,OAAS,KACdlyB,KAAKysB,aAETzsB,KAAKkyB,OAAOG,UAAYluB,IACpBnE,KAAKsyB,oBAAoBnuB,IAE7BnE,KAAKkyB,OAAOvzB,QAAUuN,IAClBlM,KAAK+rB,KAAK,yCAEV,MAAMntB,EAAQsN,EAAE0D,SAAW1D,EAAEmI,KACzBzV,GACAoB,KAAK+rB,KAAKntB,GAEdoB,KAAKysB,aAMb5mB,SACAsoB,uBACIyD,GAAoBvD,gBAAiB,EAEzCF,qBACI,IAAIoE,GAAe,EACnB,GAAyB,oBAAd9e,WAA6BA,UAAUkN,UAAW,CACzD,MAAM6R,EAAkB,iCAClBC,EAAkBhf,UAAUkN,UAAUpB,MAAMiT,GAC9CC,GAAmBA,EAAgBhwB,OAAS,GACxCiwB,WAAWD,EAAgB,IAAM,MACjCF,GAAe,GAI3B,OAASA,GACa,OAAlBd,KACCG,GAAoBvD,eAK7BF,0BAGI,OAAQxK,GAAkBJ,oBACkC,IAAxDI,GAAkB5jB,IAAI,8BAE9B0uB,wBACI9K,GAAkBvb,OAAO,8BAE7BuqB,aAAate,GAET,GADArU,KAAK8xB,OAAO7uB,KAAKoR,GACbrU,KAAK8xB,OAAOrvB,SAAWzC,KAAK+xB,YAAa,CACzC,MAAMa,EAAW5yB,KAAK8xB,OAAOlgB,KAAK,IAClC5R,KAAK8xB,OAAS,KACd,MAAMe,EAAWje,EAASge,GAE1B5yB,KAAKksB,UAAU2G,IAMvBC,qBAAqBC,GACjB/yB,KAAK+xB,YAAcgB,EACnB/yB,KAAK8xB,OAAS,GAMlBkB,mBAAmB3e,GAIf,GAHA,EAAuB,OAAhBrU,KAAK8xB,OAAiB,kCAGzBzd,EAAK5R,QAAU,EAAG,CAClB,MAAMswB,EAAajO,OAAOzQ,GAC1B,IAAK4e,MAAMF,GAEP,OADA/yB,KAAK8yB,qBAAqBC,GACnB,KAIf,OADA/yB,KAAK8yB,qBAAqB,GACnBze,EAMXie,oBAAoBY,GAChB,GAAoB,OAAhBlzB,KAAKkyB,OACL,OAEJ,MAAM7d,EAAO6e,EAAW,KAIxB,GAHAlzB,KAAK6rB,eAAiBxX,EAAK5R,OAC3BzC,KAAKgsB,OAAO5B,iBAAiB,iBAAkB/V,EAAK5R,QACpDzC,KAAKmzB,iBACe,OAAhBnzB,KAAK8xB,OAEL9xB,KAAK2yB,aAAate,OAEjB,CAED,MAAM+e,EAAgBpzB,KAAKgzB,mBAAmB3e,GACxB,OAAlB+e,GACApzB,KAAK2yB,aAAaS,IAQ9BxE,KAAKva,GACDrU,KAAKmzB,iBACL,MAAMtE,EAAU,EAAUxa,GAC1BrU,KAAK4rB,WAAaiD,EAAQpsB,OAC1BzC,KAAKgsB,OAAO5B,iBAAiB,aAAcyE,EAAQpsB,QAGnD,MAAMojB,EAAWH,GAAkBmJ,EA7PV,OA+PrBhJ,EAASpjB,OAAS,GAClBzC,KAAKqzB,YAAYlhB,OAAO0T,EAASpjB,SAGrC,IAAK,IAAIgC,EAAI,EAAGA,EAAIohB,EAASpjB,OAAQgC,IACjCzE,KAAKqzB,YAAYxN,EAASphB,IAGlCiqB,YACI1uB,KAAKusB,WAAY,EACbvsB,KAAK6xB,iBACLlrB,cAAc3G,KAAK6xB,gBACnB7xB,KAAK6xB,eAAiB,MAEtB7xB,KAAKkyB,SACLlyB,KAAKkyB,OAAO7P,QACZriB,KAAKkyB,OAAS,MAGtBzF,YACSzsB,KAAKusB,YACNvsB,KAAK+rB,KAAK,+BACV/rB,KAAK0uB,YAED1uB,KAAKmsB,eACLnsB,KAAKmsB,aAAansB,KAAK8rB,gBACvB9rB,KAAKmsB,aAAe,OAQhC9J,QACSriB,KAAKusB,YACNvsB,KAAK+rB,KAAK,6BACV/rB,KAAK0uB,aAObyE,iBACIxsB,cAAc3G,KAAK6xB,gBACnB7xB,KAAK6xB,eAAiByB,aAAY,KAE1BtzB,KAAKkyB,QACLlyB,KAAKqzB,YAAY,KAErBrzB,KAAKmzB,mBAENloB,KAAKob,MAnTqB,OA0TjCgN,YAAY5nB,GAIR,IACIzL,KAAKkyB,OAAOtD,KAAKnjB,GAErB,MAAOS,GACHlM,KAAK+rB,KAAK,0CAA2C7f,EAAE0D,SAAW1D,EAAEmI,KAAM,uBAC1E5M,WAAWzH,KAAKysB,UAAUhI,KAAKzkB,MAAO,KAOlD4xB,GAAoB2B,6BAA+B,EAInD3B,GAAoB4B,eAAiB,IAyBrC,MAAMC,GAIFvgB,YAAY2W,GACR7pB,KAAK0zB,gBAAgB7J,GAEd8J,4BACP,MAAO,CAACtI,GAAuBuG,IAEnC8B,gBAAgB7J,GACZ,MAAM+J,EAAwBhC,IAAuBA,GAAiC,cACtF,IAAIiC,EAAuBD,IAA0BhC,GAAoBkC,mBAOzE,GANIjK,EAASd,gBACJ6K,GACDtW,GAAK,mFAETuW,GAAuB,GAEvBA,EACA7zB,KAAK+zB,YAAc,CAACnC,QAEnB,CACD,MAAMoC,EAAch0B,KAAK+zB,YAAc,GACvC,IAAK,MAAME,KAAaR,GAAiBE,eACjCM,GAAaA,EAAuB,eACpCD,EAAW/wB,KAAKgxB,IAQhCC,mBACI,GAAIl0B,KAAK+zB,YAAYtxB,OAAS,EAC1B,OAAOzC,KAAK+zB,YAAY,GAGxB,MAAM,IAAIjkB,MAAM,2BAMxBqkB,mBACI,OAAIn0B,KAAK+zB,YAAYtxB,OAAS,EACnBzC,KAAK+zB,YAAY,GAGjB,MA6CnB,MAAMK,GAaFlhB,YAAYjP,EAAIowB,EAAWC,EAAgBC,EAAgBC,EAAY7J,EAAY8J,EAAUpI,EAAeqI,EAAS/I,GACjH3rB,KAAKiE,GAAKA,EACVjE,KAAKq0B,UAAYA,EACjBr0B,KAAKs0B,eAAiBA,EACtBt0B,KAAKu0B,eAAiBA,EACtBv0B,KAAKw0B,WAAaA,EAClBx0B,KAAK2qB,WAAaA,EAClB3qB,KAAKy0B,SAAWA,EAChBz0B,KAAKqsB,cAAgBA,EACrBrsB,KAAK00B,QAAUA,EACf10B,KAAK2rB,cAAgBA,EACrB3rB,KAAK20B,gBAAkB,EACvB30B,KAAK40B,oBAAsB,GAC3B50B,KAAK60B,OAAS,EACd70B,KAAK+rB,KAAOrH,GAAW,KAAO1kB,KAAKiE,GAAK,KACxCjE,KAAK80B,kBAAoB,IAAIrB,GAAiBY,GAC9Cr0B,KAAK+rB,KAAK,sBACV/rB,KAAK+0B,SAKTA,SACI,MAAMC,EAAOh1B,KAAK80B,kBAAkBZ,mBACpCl0B,KAAKi1B,MAAQ,IAAID,EAAKh1B,KAAKk1B,mBAAoBl1B,KAAKq0B,UAAWr0B,KAAKs0B,eAAgBt0B,KAAKu0B,eAAgBv0B,KAAKw0B,WAAY,KAAMx0B,KAAK2rB,eAGrI3rB,KAAKm1B,0BAA4BH,EAAmC,8BAAK,EACzE,MAAMI,EAAoBp1B,KAAKq1B,cAAcr1B,KAAKi1B,OAC5CK,EAAmBt1B,KAAKu1B,iBAAiBv1B,KAAKi1B,OACpDj1B,KAAKw1B,IAAMx1B,KAAKi1B,MAChBj1B,KAAKy1B,IAAMz1B,KAAKi1B,MAChBj1B,KAAK01B,eAAiB,KACtB11B,KAAK21B,YAAa,EAOlBluB,YAAW,KAEPzH,KAAKi1B,OAASj1B,KAAKi1B,MAAM7S,KAAKgT,EAAmBE,KAClDrqB,KAAKob,MAAM,IACd,MAAMuP,EAAmBZ,EAAqB,gBAAK,EAC/CY,EAAmB,IACnB51B,KAAK61B,gBAAkB7O,IAAsB,KACzChnB,KAAK61B,gBAAkB,KAClB71B,KAAK21B,aACF31B,KAAKi1B,OACLj1B,KAAKi1B,MAAMpJ,cA9EK,QA+EhB7rB,KAAK+rB,KAAK,wDACN/rB,KAAKi1B,MAAMpJ,cACX,wCACJ7rB,KAAK21B,YAAa,EAClB31B,KAAKi1B,MAAMxG,yBAENzuB,KAAKi1B,OACVj1B,KAAKi1B,MAAMrJ,UAvFC,MAwFZ5rB,KAAK+rB,KAAK,oDACN/rB,KAAKi1B,MAAMrJ,UACX,uCAKJ5rB,KAAK+rB,KAAK,+CACV/rB,KAAKqiB,YAIdpX,KAAKob,MAAMuP,KAGtBV,mBACI,MAAO,KAAOl1B,KAAKiE,GAAK,IAAMjE,KAAK20B,kBAEvCY,iBAAiBP,GACb,OAAOc,IACCd,IAASh1B,KAAKi1B,MACdj1B,KAAK+1B,kBAAkBD,GAElBd,IAASh1B,KAAK01B,gBACnB11B,KAAK+rB,KAAK,8BACV/rB,KAAKg2B,8BAGLh2B,KAAK+rB,KAAK,8BAItBsJ,cAAcL,GACV,OAAQplB,IACgB,IAAhB5P,KAAK60B,SACDG,IAASh1B,KAAKy1B,IACdz1B,KAAKi2B,0BAA0BrmB,GAE1BolB,IAASh1B,KAAK01B,eACnB11B,KAAKk2B,4BAA4BtmB,GAGjC5P,KAAK+rB,KAAK,+BAQ1BoK,YAAYC,GAER,MAAMC,EAAM,CAAEpf,EAAG,IAAK9H,EAAGinB,GACzBp2B,KAAKs2B,UAAUD,GAEnBE,uBACQv2B,KAAKw1B,MAAQx1B,KAAK01B,gBAAkB11B,KAAKy1B,MAAQz1B,KAAK01B,iBACtD11B,KAAK+rB,KAAK,2CAA6C/rB,KAAK01B,eAAepK,QAC3EtrB,KAAKi1B,MAAQj1B,KAAK01B,eAClB11B,KAAK01B,eAAiB,MAI9Bc,oBAAoBC,GAChB,GAtJa,MAsJOA,EAAa,CAC7B,MAAMC,EAAMD,EAAwB,EAjJ7B,MAkJHC,EACA12B,KAAK22B,6BAtJC,MAwJDD,GAEL12B,KAAK+rB,KAAK,wCACV/rB,KAAK01B,eAAerT,QAEhBriB,KAAKw1B,MAAQx1B,KAAK01B,gBAClB11B,KAAKy1B,MAAQz1B,KAAK01B,gBAClB11B,KAAKqiB,SA7JJ,MAgKAqU,IACL12B,KAAK+rB,KAAK,0BACV/rB,KAAK42B,8BACL52B,KAAK22B,+BAIjBT,4BAA4BW,GACxB,MAAMC,EAAQtR,GAAW,IAAKqR,GACxBxiB,EAAOmR,GAAW,IAAKqR,GAC7B,GAAc,MAAVC,EACA92B,KAAKw2B,oBAAoBniB,OAExB,IAAc,MAAVyiB,EAKL,MAAM,IAAIhnB,MAAM,2BAA6BgnB,GAH7C92B,KAAK40B,oBAAoB3xB,KAAKoR,IAMtCsiB,6BACQ32B,KAAK42B,6BAA+B,GACpC52B,KAAK+rB,KAAK,oCACV/rB,KAAK21B,YAAa,EAClB31B,KAAK01B,eAAejH,wBACpBzuB,KAAK+2B,wBAIL/2B,KAAK+rB,KAAK,8BACV/rB,KAAK01B,eAAe9G,KAAK,CAAE3X,EAAG,IAAK9H,EAAG,CAAE8H,EA5LvC,IA4LgD9H,EAAG,OAG5D4nB,sBAEI/2B,KAAK01B,eAAe7vB,QAEpB7F,KAAK+rB,KAAK,mCACV/rB,KAAK01B,eAAe9G,KAAK,CAAE3X,EAAG,IAAK9H,EAAG,CAAE8H,EAtM7B,IAsM4C9H,EAAG,MAG1DnP,KAAK+rB,KAAK,kCACV/rB,KAAKi1B,MAAMrG,KAAK,CAAE3X,EAAG,IAAK9H,EAAG,CAAE8H,EAzMd,IAyMmC9H,EAAG,MACvDnP,KAAKw1B,IAAMx1B,KAAK01B,eAChB11B,KAAKu2B,uBAETN,0BAA0BY,GAEtB,MAAMC,EAAQtR,GAAW,IAAKqR,GACxBxiB,EAAOmR,GAAW,IAAKqR,GACf,MAAVC,EACA92B,KAAKg3B,WAAW3iB,GAED,MAAVyiB,GACL92B,KAAKi3B,eAAe5iB,GAG5B4iB,eAAernB,GACX5P,KAAKk3B,qBAELl3B,KAAK2qB,WAAW/a,GAEpBsnB,qBACSl3B,KAAK21B,aACN31B,KAAKm1B,4BACDn1B,KAAKm1B,2BAA6B,IAClCn1B,KAAK+rB,KAAK,kCACV/rB,KAAK21B,YAAa,EAClB31B,KAAKi1B,MAAMxG,0BAIvBuI,WAAWP,GACP,MAAMC,EAAMlR,GA/OC,IA+OwBiR,GACrC,GA/Oa,MA+OOA,EAAa,CAC7B,MAAMU,EAAUV,EAAwB,EACxC,GAzOS,MAyOLC,EACA12B,KAAKo3B,aAAaD,QAEjB,GA9OQ,MA8OJT,EAA0B,CAC/B12B,KAAK+rB,KAAK,qCACV/rB,KAAKy1B,IAAMz1B,KAAK01B,eAChB,IAAK,IAAIjxB,EAAI,EAAGA,EAAIzE,KAAK40B,oBAAoBnyB,SAAUgC,EACnDzE,KAAKi3B,eAAej3B,KAAK40B,oBAAoBnwB,IAEjDzE,KAAK40B,oBAAsB,GAC3B50B,KAAKu2B,2BA1PI,MA4PJG,EAGL12B,KAAKq3B,sBAAsBF,GA9PrB,MAgQDT,EAEL12B,KAAKs3B,SAASH,GAjQR,MAmQDT,EACL93B,GAAM,iBAAmBu4B,GAnQpB,MAqQAT,GACL12B,KAAK+rB,KAAK,wBACV/rB,KAAKk3B,qBACLl3B,KAAKu3B,iCAGL34B,GAAM,mCAAqC83B,IAOvDU,aAAaI,GACT,MAAMC,EAAYD,EAAU5G,GACtBttB,EAAUk0B,EAAUxR,EACpB4C,EAAO4O,EAAUE,EACvB13B,KAAK23B,UAAYH,EAAUhqB,EAC3BxN,KAAKq0B,UAAUzL,KAAOA,EAEF,IAAhB5oB,KAAK60B,SACL70B,KAAKi1B,MAAMpvB,QACX7F,KAAK43B,yBAAyB53B,KAAKi1B,MAAOwC,GAllD7B,MAmlDYn0B,GACrBga,GAAK,sCAGTtd,KAAK63B,oBAGbA,mBACI,MAAM7C,EAAOh1B,KAAK80B,kBAAkBX,mBAChCa,GACAh1B,KAAK83B,cAAc9C,GAG3B8C,cAAc9C,GACVh1B,KAAK01B,eAAiB,IAAIV,EAAKh1B,KAAKk1B,mBAAoBl1B,KAAKq0B,UAAWr0B,KAAKs0B,eAAgBt0B,KAAKu0B,eAAgBv0B,KAAKw0B,WAAYx0B,KAAK23B,WAGxI33B,KAAK42B,4BACD5B,EAAmC,8BAAK,EAC5C,MAAM9I,EAAYlsB,KAAKq1B,cAAcr1B,KAAK01B,gBACpCvJ,EAAensB,KAAKu1B,iBAAiBv1B,KAAK01B,gBAChD11B,KAAK01B,eAAetT,KAAK8J,EAAWC,GAEpCnF,IAAsB,KACdhnB,KAAK01B,iBACL11B,KAAK+rB,KAAK,gCACV/rB,KAAK01B,eAAerT,WAEzBpX,KAAKob,MAtUQ,MAwUpBiR,SAAS1O,GACL5oB,KAAK+rB,KAAK,qCAAuCnD,GACjD5oB,KAAKq0B,UAAUzL,KAAOA,EAGF,IAAhB5oB,KAAK60B,OACL70B,KAAKqiB,SAILriB,KAAK+3B,oBACL/3B,KAAK+0B,UAGb6C,yBAAyB5C,EAAMyC,GAC3Bz3B,KAAK+rB,KAAK,oCACV/rB,KAAKi1B,MAAQD,EACbh1B,KAAK60B,OAAS,EACV70B,KAAKy0B,WACLz0B,KAAKy0B,SAASgD,EAAWz3B,KAAK23B,WAC9B33B,KAAKy0B,SAAW,MAImB,IAAnCz0B,KAAKm1B,2BACLn1B,KAAK+rB,KAAK,kCACV/rB,KAAK21B,YAAa,GAGlB3O,IAAsB,KAClBhnB,KAAKu3B,kCACNtsB,KAAKob,MApWwB,MAuWxCkR,gCAESv3B,KAAK21B,YAA8B,IAAhB31B,KAAK60B,SACzB70B,KAAK+rB,KAAK,4BACV/rB,KAAKs2B,UAAU,CAAErf,EAAG,IAAK9H,EAAG,CAAE8H,EA7V7B,IA6VsC9H,EAAG,OAGlD6mB,6BACI,MAAMhB,EAAOh1B,KAAK01B,eAClB11B,KAAK01B,eAAiB,KAClB11B,KAAKw1B,MAAQR,GAAQh1B,KAAKy1B,MAAQT,GAElCh1B,KAAKqiB,QAOb0T,kBAAkBD,GACd91B,KAAKi1B,MAAQ,KAGRa,GAAiC,IAAhB91B,KAAK60B,OASF,IAAhB70B,KAAK60B,QACV70B,KAAK+rB,KAAK,8BATV/rB,KAAK+rB,KAAK,+BAEN/rB,KAAKq0B,UAAU9K,oBACf5F,GAAkBvb,OAAO,QAAUpI,KAAKq0B,UAAUzL,MAElD5oB,KAAKq0B,UAAU/K,aAAetpB,KAAKq0B,UAAUzL,OAMrD5oB,KAAKqiB,QAETgV,sBAAsBW,GAClBh4B,KAAK+rB,KAAK,0DACN/rB,KAAK00B,UACL10B,KAAK00B,QAAQsD,GACbh4B,KAAK00B,QAAU,MAInB10B,KAAKqsB,cAAgB,KACrBrsB,KAAKqiB,QAETiU,UAAUjiB,GACN,GAAoB,IAAhBrU,KAAK60B,OACL,KAAM,8BAGN70B,KAAKw1B,IAAI5G,KAAKva,GAMtBgO,QACwB,IAAhBriB,KAAK60B,SACL70B,KAAK+rB,KAAK,gCACV/rB,KAAK60B,OAAS,EACd70B,KAAK+3B,oBACD/3B,KAAKqsB,gBACLrsB,KAAKqsB,gBACLrsB,KAAKqsB,cAAgB,OAIjC0L,oBACI/3B,KAAK+rB,KAAK,iCACN/rB,KAAKi1B,QACLj1B,KAAKi1B,MAAM5S,QACXriB,KAAKi1B,MAAQ,MAEbj1B,KAAK01B,iBACL11B,KAAK01B,eAAerT,QACpBriB,KAAK01B,eAAiB,MAEtB11B,KAAK61B,kBACLtI,aAAavtB,KAAK61B,iBAClB71B,KAAK61B,gBAAkB,OA2BnC,MAAMoC,GACF/X,IAAIgY,EAAY7jB,EAAM1J,EAAYwtB,IAClCC,MAAMF,EAAY7jB,EAAM1J,EAAYwtB,IAKpCE,iBAAiBpjB,IAKjBqjB,qBAAqBrjB,IACrBsjB,gBAAgBL,EAAY7jB,EAAM1J,IAClC6tB,kBAAkBN,EAAY7jB,EAAM1J,IACpC8tB,mBAAmBP,EAAYvtB,IAC/B+tB,YAAYC,KAuBhB,MAAMC,GACF1lB,YAAY2lB,GACR74B,KAAK64B,eAAiBA,EACtB74B,KAAK84B,WAAa,GAClB,EAAO96B,MAAM+S,QAAQ8nB,IAAmBA,EAAep2B,OAAS,EAAG,8BAKvEs2B,QAAQC,KAAc5U,GAClB,GAAIpmB,MAAM+S,QAAQ/Q,KAAK84B,WAAWE,IAAa,CAE3C,MAAMC,EAAY,IAAIj5B,KAAK84B,WAAWE,IACtC,IAAK,IAAIv0B,EAAI,EAAGA,EAAIw0B,EAAUx2B,OAAQgC,IAClCw0B,EAAUx0B,GAAGjC,SAAStD,MAAM+5B,EAAUx0B,GAAGy0B,QAAS9U,IAI9D+U,GAAGH,EAAWx2B,EAAU02B,GACpBl5B,KAAKo5B,mBAAmBJ,GACxBh5B,KAAK84B,WAAWE,GAAah5B,KAAK84B,WAAWE,IAAc,GAC3Dh5B,KAAK84B,WAAWE,GAAW/1B,KAAK,CAAET,SAAAA,EAAU02B,QAAAA,IAC5C,MAAMG,EAAYr5B,KAAKs5B,gBAAgBN,GACnCK,GACA72B,EAAStD,MAAMg6B,EAASG,GAGhCE,IAAIP,EAAWx2B,EAAU02B,GACrBl5B,KAAKo5B,mBAAmBJ,GACxB,MAAMC,EAAYj5B,KAAK84B,WAAWE,IAAc,GAChD,IAAK,IAAIv0B,EAAI,EAAGA,EAAIw0B,EAAUx2B,OAAQgC,IAClC,GAAIw0B,EAAUx0B,GAAGjC,WAAaA,KACxB02B,GAAWA,IAAYD,EAAUx0B,GAAGy0B,SAEtC,YADAD,EAAUO,OAAO/0B,EAAG,GAKhC20B,mBAAmBJ,GACf,EAAOh5B,KAAK64B,eAAetX,MAAKkY,GACrBA,IAAOT,IACd,kBAAoBA,IA2BhC,MAAMU,WAAsBd,GACxB1lB,cACIW,MAAM,CAAC,WACP7T,KAAK25B,SAAU,EAKO,oBAAXjqB,aAC4B,IAA5BA,OAAOzD,kBACbuH,MACD9D,OAAOzD,iBAAiB,UAAU,KACzBjM,KAAK25B,UACN35B,KAAK25B,SAAU,EACf35B,KAAK+4B,QAAQ,UAAU,OAE5B,GACHrpB,OAAOzD,iBAAiB,WAAW,KAC3BjM,KAAK25B,UACL35B,KAAK25B,SAAU,EACf35B,KAAK+4B,QAAQ,UAAU,OAE5B,IAGX5K,qBACI,OAAO,IAAIuL,GAEfJ,gBAAgBN,GAEZ,OADA,EAAqB,WAAdA,EAAwB,uBAAyBA,GACjD,CAACh5B,KAAK25B,SAEjBC,kBACI,OAAO55B,KAAK25B,SA6BpB,MAAME,GAKF3mB,YAAY4mB,EAAcC,GACtB,QAAiB,IAAbA,EAAqB,CACrB/5B,KAAKg6B,QAAUF,EAAaxkB,MAAM,KAElC,IAAI2kB,EAAS,EACb,IAAK,IAAIx1B,EAAI,EAAGA,EAAIzE,KAAKg6B,QAAQv3B,OAAQgC,IACjCzE,KAAKg6B,QAAQv1B,GAAGhC,OAAS,IACzBzC,KAAKg6B,QAAQC,GAAUj6B,KAAKg6B,QAAQv1B,GACpCw1B,KAGRj6B,KAAKg6B,QAAQv3B,OAASw3B,EACtBj6B,KAAKk6B,UAAY,OAGjBl6B,KAAKg6B,QAAUF,EACf95B,KAAKk6B,UAAYH,EAGzB3W,WACI,IAAI8U,EAAa,GACjB,IAAK,IAAIzzB,EAAIzE,KAAKk6B,UAAWz1B,EAAIzE,KAAKg6B,QAAQv3B,OAAQgC,IAC1B,KAApBzE,KAAKg6B,QAAQv1B,KACbyzB,GAAc,IAAMl4B,KAAKg6B,QAAQv1B,IAGzC,OAAOyzB,GAAc,KAG7B,SAASiC,KACL,OAAO,IAAIN,GAAK,IAEpB,SAASO,GAAaC,GAClB,OAAIA,EAAKH,WAAaG,EAAKL,QAAQv3B,OACxB,KAEJ43B,EAAKL,QAAQK,EAAKH,WAK7B,SAASI,GAAcD,GACnB,OAAOA,EAAKL,QAAQv3B,OAAS43B,EAAKH,UAEtC,SAASK,GAAaF,GAClB,IAAIN,EAAWM,EAAKH,UAIpB,OAHIH,EAAWM,EAAKL,QAAQv3B,QACxBs3B,IAEG,IAAIF,GAAKQ,EAAKL,QAASD,GAElC,SAASS,GAAYH,GACjB,OAAIA,EAAKH,UAAYG,EAAKL,QAAQv3B,OACvB43B,EAAKL,QAAQK,EAAKL,QAAQv3B,OAAS,GAEvC,KAeX,SAASg4B,GAAUJ,EAAM30B,EAAQ,GAC7B,OAAO20B,EAAKL,QAAQ97B,MAAMm8B,EAAKH,UAAYx0B,GAE/C,SAASg1B,GAAWL,GAChB,GAAIA,EAAKH,WAAaG,EAAKL,QAAQv3B,OAC/B,OAAO,KAEX,MAAMk4B,EAAS,GACf,IAAK,IAAIl2B,EAAI41B,EAAKH,UAAWz1B,EAAI41B,EAAKL,QAAQv3B,OAAS,EAAGgC,IACtDk2B,EAAO13B,KAAKo3B,EAAKL,QAAQv1B,IAE7B,OAAO,IAAIo1B,GAAKc,EAAQ,GAE5B,SAASC,GAAUP,EAAMQ,GACrB,MAAMF,EAAS,GACf,IAAK,IAAIl2B,EAAI41B,EAAKH,UAAWz1B,EAAI41B,EAAKL,QAAQv3B,OAAQgC,IAClDk2B,EAAO13B,KAAKo3B,EAAKL,QAAQv1B,IAE7B,GAAIo2B,aAAwBhB,GACxB,IAAK,IAAIp1B,EAAIo2B,EAAaX,UAAWz1B,EAAIo2B,EAAab,QAAQv3B,OAAQgC,IAClEk2B,EAAO13B,KAAK43B,EAAab,QAAQv1B,QAGpC,CACD,MAAMq2B,EAAcD,EAAavlB,MAAM,KACvC,IAAK,IAAI7Q,EAAI,EAAGA,EAAIq2B,EAAYr4B,OAAQgC,IAChCq2B,EAAYr2B,GAAGhC,OAAS,GACxBk4B,EAAO13B,KAAK63B,EAAYr2B,IAIpC,OAAO,IAAIo1B,GAAKc,EAAQ,GAK5B,SAASI,GAAYV,GACjB,OAAOA,EAAKH,WAAaG,EAAKL,QAAQv3B,OAK1C,SAASu4B,GAAgBC,EAAWC,GAChC,MAAMC,EAAQf,GAAaa,GAAYG,EAAQhB,GAAac,GAC5D,GAAc,OAAVC,EACA,OAAOD,EAEN,GAAIC,IAAUC,EACf,OAAOJ,GAAgBT,GAAaU,GAAYV,GAAaW,IAG7D,MAAM,IAAIprB,MAAM,8BACZorB,EADY,8BAIZD,EACA,KAuBZ,SAASI,GAAWhB,EAAMiB,GACtB,GAAIhB,GAAcD,KAAUC,GAAcgB,GACtC,OAAO,EAEX,IAAK,IAAI72B,EAAI41B,EAAKH,UAAW1iB,EAAI8jB,EAAMpB,UAAWz1B,GAAK41B,EAAKL,QAAQv3B,OAAQgC,IAAK+S,IAC7E,GAAI6iB,EAAKL,QAAQv1B,KAAO62B,EAAMtB,QAAQxiB,GAClC,OAAO,EAGf,OAAO,EAKX,SAAS+jB,GAAalB,EAAMiB,GACxB,IAAI72B,EAAI41B,EAAKH,UACT1iB,EAAI8jB,EAAMpB,UACd,GAAII,GAAcD,GAAQC,GAAcgB,GACpC,OAAO,EAEX,KAAO72B,EAAI41B,EAAKL,QAAQv3B,QAAQ,CAC5B,GAAI43B,EAAKL,QAAQv1B,KAAO62B,EAAMtB,QAAQxiB,GAClC,OAAO,IAET/S,IACA+S,EAEN,OAAO,EAYX,MAAMgkB,GAKFtoB,YAAYmnB,EAAMoB,GACdz7B,KAAKy7B,aAAeA,EACpBz7B,KAAK07B,OAASjB,GAAUJ,EAAM,GAE9Br6B,KAAK27B,YAAc1wB,KAAK2wB,IAAI,EAAG57B,KAAK07B,OAAOj5B,QAC3C,IAAK,IAAIgC,EAAI,EAAGA,EAAIzE,KAAK07B,OAAOj5B,OAAQgC,IACpCzE,KAAK27B,aAAehkB,EAAa3X,KAAK07B,OAAOj3B,IAEjDo3B,GAAyB77B,OAoBjC,SAAS67B,GAAyBC,GAC9B,GAAIA,EAAeH,YAzOO,IA0OtB,MAAM,IAAI7rB,MAAMgsB,EAAeL,aAAfK,yCAIZA,EAAeH,YACf,MAER,GAAIG,EAAeJ,OAAOj5B,OAnPP,GAoPf,MAAM,IAAIqN,MAAMgsB,EAAeL,aAAfK,gGAIZC,GAA4BD,IAMxC,SAASC,GAA4BD,GACjC,OAAqC,IAAjCA,EAAeJ,OAAOj5B,OACf,GAEJ,gBAAkBq5B,EAAeJ,OAAO9pB,KAAK,KAAO,IAmB/D,MAAMoqB,WAA0BpD,GAC5B1lB,cAEI,IAAI+oB,EACAC,EAFJroB,MAAM,CAAC,YAGiB,oBAAbzH,eAC8B,IAA9BA,SAASH,wBACkB,IAAvBG,SAAiB,QAExB8vB,EAAmB,mBACnBD,EAAS,eAE6B,IAA1B7vB,SAAoB,WAChC8vB,EAAmB,sBACnBD,EAAS,kBAE4B,IAAzB7vB,SAAmB,UAC/B8vB,EAAmB,qBACnBD,EAAS,iBAEgC,IAA7B7vB,SAAuB,eACnC8vB,EAAmB,yBACnBD,EAAS,iBAOjBj8B,KAAKm8B,UAAW,EACZD,GACA9vB,SAASH,iBAAiBiwB,GAAkB,KACxC,MAAME,GAAWhwB,SAAS6vB,GACtBG,IAAYp8B,KAAKm8B,WACjBn8B,KAAKm8B,SAAWC,EAChBp8B,KAAK+4B,QAAQ,UAAWqD,OAE7B,GAGXjO,qBACI,OAAO,IAAI6N,GAEf1C,gBAAgBN,GAEZ,OADA,EAAqB,YAAdA,EAAyB,uBAAyBA,GAClD,CAACh5B,KAAKm8B,WAoBrB,MAAME,GAAsB,IAe5B,MAAMC,WAA6BrE,GAM/B/kB,YAAYmhB,EAAWC,EAAgBiI,EAAeC,EAAkBC,EAAqBC,EAAoBC,EAAwBC,GAuCrI,GAtCA/oB,QACA7T,KAAKq0B,UAAYA,EACjBr0B,KAAKs0B,eAAiBA,EACtBt0B,KAAKu8B,cAAgBA,EACrBv8B,KAAKw8B,iBAAmBA,EACxBx8B,KAAKy8B,oBAAsBA,EAC3Bz8B,KAAK08B,mBAAqBA,EAC1B18B,KAAK28B,uBAAyBA,EAC9B38B,KAAK48B,cAAgBA,EAErB58B,KAAKiE,GAAKq4B,GAAqBO,8BAC/B78B,KAAK+rB,KAAOrH,GAAW,KAAO1kB,KAAKiE,GAAK,KACxCjE,KAAK88B,kBAAoB,GACzB98B,KAAK+8B,QAAU,IAAIlkB,IACnB7Y,KAAKg9B,iBAAmB,GACxBh9B,KAAKi9B,iBAAmB,GACxBj9B,KAAKk9B,qBAAuB,EAC5Bl9B,KAAKm9B,qBAAuB,EAC5Bn9B,KAAKo9B,0BAA4B,GACjCp9B,KAAKq9B,YAAa,EAClBr9B,KAAKs9B,gBAAkBjB,GACvBr8B,KAAKu9B,mBA1CuB,IA2C5Bv9B,KAAKw9B,uBAAyB,KAC9Bx9B,KAAK2rB,cAAgB,KACrB3rB,KAAKy9B,0BAA4B,KACjCz9B,KAAKm8B,UAAW,EAEhBn8B,KAAK09B,eAAiB,GACtB19B,KAAK29B,eAAiB,EACtB39B,KAAK49B,UAAY,KACjB59B,KAAKw0B,WAAa,KAClBx0B,KAAKu0B,eAAiB,KACtBv0B,KAAK69B,oBAAqB,EAC1B79B,KAAK89B,uBAAyB,EAC9B99B,KAAK+9B,2BAA6B,EAClC/9B,KAAKg+B,kBAAmB,EACxBh+B,KAAKi+B,2BAA6B,KAClCj+B,KAAKk+B,+BAAiC,KAClCtB,EACA,MAAM,IAAI9sB,MAAM,kFAEpBksB,GAAkBmC,cAAchF,GAAG,UAAWn5B,KAAKo+B,WAAYp+B,OACpB,IAAvCq0B,EAAUzL,KAAKS,QAAQ,YACvBqQ,GAAcyE,cAAchF,GAAG,SAAUn5B,KAAKq+B,UAAWr+B,MAGjEm2B,YAAYmI,EAAQ/vB,EAAMgwB,GACtB,MAAMC,IAAcx+B,KAAK29B,eACnBtH,EAAM,CAAEoI,EAAGD,EAAWpvB,EAAGkvB,EAAQ3oB,EAAGpH,GAC1CvO,KAAK+rB,KAAK,EAAUsK,IACpB,EAAOr2B,KAAKq9B,WAAY,0DACxBr9B,KAAK49B,UAAUzH,YAAYE,GACvBkI,IACAv+B,KAAK09B,eAAec,GAAaD,GAGzCx+B,IAAI6C,GACA5C,KAAK0+B,kBACL,MAAMrlB,EAAW,IAAI,EACfhb,EAAU,CACZY,EAAG2D,EAAM+7B,MAAMvb,WACfwb,EAAGh8B,EAAMi8B,cAEPC,EAAiB,CACnBR,OAAQ,IACRjgC,QAAAA,EACAsM,WAAaiF,IACT,MAAMunB,EAAUvnB,EAAW,EACN,OAAjBA,EAAW,GACX5P,KAAKu8B,cAAcl+B,EAAW,EAAG84B,GACrB,EACJ,MACR9d,EAAS9a,QAAQ44B,IAGjB9d,EAAS7a,OAAO24B,KAI5Bn3B,KAAKi9B,iBAAiBh6B,KAAK67B,GAC3B9+B,KAAKm9B,uBACL,MAAM18B,EAAQT,KAAKi9B,iBAAiBx6B,OAAS,EAmB7C,OAlBKzC,KAAKq9B,YACN51B,YAAW,KACP,MAAM1H,EAAMC,KAAKi9B,iBAAiBx8B,QACtByC,IAARnD,GAAqB++B,IAAmB/+B,WAGrCC,KAAKi9B,iBAAiBx8B,GAC7BT,KAAKm9B,uBAC6B,IAA9Bn9B,KAAKm9B,uBACLn9B,KAAKi9B,iBAAmB,IAE5Bj9B,KAAK+rB,KAAK,OAAStrB,EAAQ,4BAC3B4Y,EAAS7a,OAAO,IAAIsR,MAAM,0BAlHd,KAqHhB9P,KAAKq9B,YACLr9B,KAAK++B,SAASt+B,GAEX4Y,EAAShG,QAEpB2rB,OAAOp8B,EAAOq8B,EAAeC,EAAKv0B,GAC9B3K,KAAK0+B,kBACL,MAAMS,EAAUv8B,EAAMw8B,iBAChBlH,EAAat1B,EAAM+7B,MAAMvb,WAC/BpjB,KAAK+rB,KAAK,qBAAuBmM,EAAa,IAAMiH,GAC/Cn/B,KAAK+8B,QAAQ3jB,IAAI8e,IAClBl4B,KAAK+8B,QAAQ98B,IAAIi4B,EAAY,IAAIrf,KAErC,EAAOjW,EAAMy8B,aAAaC,cAAgB18B,EAAMy8B,aAAaE,eAAgB,sDAC7E,GAAQv/B,KAAK+8B,QAAQh9B,IAAIm4B,GAAY9e,IAAI+lB,GAAU,gDACnD,MAAMK,EAAa,CACf70B,WAAAA,EACA80B,OAAQR,EACRr8B,MAAAA,EACAs8B,IAAAA,GAEJl/B,KAAK+8B,QAAQh9B,IAAIm4B,GAAYj4B,IAAIk/B,EAASK,GACtCx/B,KAAKq9B,YACLr9B,KAAK0/B,YAAYF,GAGzBT,SAASt+B,GACL,MAAMV,EAAMC,KAAKi9B,iBAAiBx8B,GAClCT,KAAKm2B,YAAY,IAAKp2B,EAAI1B,SAAUuR,WACzB5P,KAAKi9B,iBAAiBx8B,GAC7BT,KAAKm9B,uBAC6B,IAA9Bn9B,KAAKm9B,uBACLn9B,KAAKi9B,iBAAmB,IAExBl9B,EAAI4K,YACJ5K,EAAI4K,WAAWiF,MAI3B8vB,YAAYF,GACR,MAAM58B,EAAQ48B,EAAW58B,MACnBs1B,EAAat1B,EAAM+7B,MAAMvb,WACzB+b,EAAUv8B,EAAMw8B,iBACtBp/B,KAAK+rB,KAAK,aAAemM,EAAa,QAAUiH,GAChD,MAAMQ,EAAM,CAAW1gC,EAAGi5B,GAGtBsH,EAAWN,MACXS,EAAO,EAAI/8B,EAAMi8B,aACjBc,EAAO,EAAIH,EAAWN,KAE1BS,EAAgB,EAAIH,EAAWC,SAC/Bz/B,KAAKm2B,YAPU,IAOUwJ,GAAM/vB,IAC3B,MAAMunB,EAAUvnB,EAAoB,EAC9BhK,EAASgK,EAAsB,EAErC0sB,GAAqBsD,sBAAsBzI,EAASv0B,IAC1B5C,KAAK+8B,QAAQh9B,IAAIm4B,IACvCl4B,KAAK+8B,QAAQh9B,IAAIm4B,GAAYn4B,IAAIo/B,MAEXK,IACtBx/B,KAAK+rB,KAAK,kBAAmBnc,GACd,OAAXhK,GACA5F,KAAK6/B,cAAc3H,EAAYiH,GAE/BK,EAAW70B,YACX60B,EAAW70B,WAAW/E,EAAQuxB,OAK9ChJ,6BAA6BgJ,EAASv0B,GAClC,GAAIu0B,GAA8B,iBAAZA,GAAwB,EAASA,EAAS,KAAM,CAElE,MAAM2I,EAAW,EAAQ3I,EAAS,KAClC,GAAIn5B,MAAM+S,QAAQ+uB,KAAcA,EAASzW,QAAQ,YAAa,CAC1D,MAAM0W,EAAY,gBAAkBn9B,EAAMy8B,aAAaW,WAAW5c,WAAa,IACzE6c,EAAYr9B,EAAM+7B,MAAMvb,WAC9B9F,GACI,wGAA2CyiB,QACxCE,sDAInB5H,iBAAiBpjB,GACbjV,KAAKw0B,WAAavf,EAClBjV,KAAK+rB,KAAK,wBACN/rB,KAAKw0B,WACLx0B,KAAKkgC,UAKDlgC,KAAKq9B,YACLr9B,KAAKm2B,YAAY,SAAU,IAAI,SAGvCn2B,KAAKmgC,uCAAuClrB,GAEhDkrB,uCAAuCC,IAGVA,GAAoC,KAAtBA,EAAW39B,QL13E1C,SAAUwS,GACtB,MAAME,EAASH,EAAOC,GAAOE,OAC7B,MAAyB,iBAAXA,IAA2C,IAApBA,EAAc,MKy3EvBkrB,CAAQD,MAC5BpgC,KAAK+rB,KAAK,iEACV/rB,KAAKu9B,mBA7NsB,KAgOnCjF,qBAAqBrjB,GACjBjV,KAAKu0B,eAAiBtf,EACtBjV,KAAK+rB,KAAK,6BACN/rB,KAAKu0B,eACLv0B,KAAKsgC,cAMDtgC,KAAKq9B,YACLr9B,KAAKm2B,YAAY,WAAY,IAAI,SAQ7C+J,UACI,GAAIlgC,KAAKq9B,YAAcr9B,KAAKw0B,WAAY,CACpC,MAAMvf,EAAQjV,KAAKw0B,WACb+L,ELj6EI,SAAUtrB,GAC5B,MAA+BE,EAAfH,EAAOC,GAAyBE,OAChD,QAASA,GAA4B,iBAAXA,GAAuBA,EAAOvI,eAAe,OK+5E5C4zB,CAAcvrB,GAAS,OAAS,QAC7CwrB,EAAc,CAAEC,KAAMzrB,GACD,OAAvBjV,KAAK48B,cACL6D,EAAoB,QAAI,EAEW,iBAAvBzgC,KAAK48B,gBACjB6D,EAAqB,QAAIzgC,KAAK48B,eAElC58B,KAAKm2B,YAAYoK,EAAYE,GAAchrB,IACvC,MAAM7P,EAAS6P,EAAkB,EAC3BpB,EAAOoB,EAAgB,GAAK,QAC9BzV,KAAKw0B,aAAevf,IACL,OAAXrP,EACA5F,KAAK89B,uBAAyB,EAI9B99B,KAAK2gC,eAAe/6B,EAAQyO,QAWhDisB,cACQtgC,KAAKq9B,YAAcr9B,KAAKu0B,gBACxBv0B,KAAKm2B,YAAY,WAAY,CAAE,MAASn2B,KAAKu0B,iBAAmB9e,IAC5D,MAAM7P,EAAS6P,EAAkB,EAC3BpB,EAAOoB,EAAgB,GAAK,QACnB,OAAX7P,EACA5F,KAAK+9B,2BAA6B,EAGlC/9B,KAAK4gC,mBAAmBh7B,EAAQyO,MAQhDwsB,SAASj+B,EAAOs8B,GACZ,MAAMhH,EAAat1B,EAAM+7B,MAAMvb,WACzB+b,EAAUv8B,EAAMw8B,iBACtBp/B,KAAK+rB,KAAK,uBAAyBmM,EAAa,IAAMiH,GACtD,EAAOv8B,EAAMy8B,aAAaC,cAAgB18B,EAAMy8B,aAAaE,eAAgB,wDAC9Dv/B,KAAK6/B,cAAc3H,EAAYiH,IAChCn/B,KAAKq9B,YACfr9B,KAAK8gC,cAAc5I,EAAYiH,EAASv8B,EAAMi8B,aAAcK,GAGpE4B,cAAc5I,EAAYiH,EAAS4B,EAAU7B,GACzCl/B,KAAK+rB,KAAK,eAAiBmM,EAAa,QAAUiH,GAClD,MAAMQ,EAAM,CAAW1gC,EAAGi5B,GAGtBgH,IACAS,EAAO,EAAIoB,EACXpB,EAAO,EAAIT,GAEfl/B,KAAKm2B,YANU,IAMUwJ,GAE7BpH,gBAAgBL,EAAY7jB,EAAM1J,GAC9B3K,KAAK0+B,kBACD1+B,KAAKq9B,WACLr9B,KAAKghC,kBAAkB,IAAK9I,EAAY7jB,EAAM1J,GAG9C3K,KAAKo9B,0BAA0Bn6B,KAAK,CAChCi1B,WAAAA,EACAoG,OAAQ,IACRjqB,KAAAA,EACA1J,WAAAA,IAIZ6tB,kBAAkBN,EAAY7jB,EAAM1J,GAChC3K,KAAK0+B,kBACD1+B,KAAKq9B,WACLr9B,KAAKghC,kBAAkB,KAAM9I,EAAY7jB,EAAM1J,GAG/C3K,KAAKo9B,0BAA0Bn6B,KAAK,CAChCi1B,WAAAA,EACAoG,OAAQ,KACRjqB,KAAAA,EACA1J,WAAAA,IAIZ8tB,mBAAmBP,EAAYvtB,GAC3B3K,KAAK0+B,kBACD1+B,KAAKq9B,WACLr9B,KAAKghC,kBAAkB,KAAM9I,EAAY,KAAMvtB,GAG/C3K,KAAKo9B,0BAA0Bn6B,KAAK,CAChCi1B,WAAAA,EACAoG,OAAQ,KACRjqB,KAAM,KACN1J,WAAAA,IAIZq2B,kBAAkB1C,EAAQpG,EAAY7jB,EAAM1J,GACxC,MAAMtM,EAAU,CAAWY,EAAGi5B,EAAqB/oB,EAAGkF,GACtDrU,KAAK+rB,KAAK,gBAAkBuS,EAAQjgC,GACpC2B,KAAKm2B,YAAYmI,EAAQjgC,GAAU4iC,IAC3Bt2B,GACAlD,YAAW,KACPkD,EAAWs2B,EAAuB,EAAGA,EAAuB,KAC7Dh2B,KAAKob,MAAM,OAI1BnG,IAAIgY,EAAY7jB,EAAM1J,EAAYwtB,GAC9Bn4B,KAAKkhC,YAAY,IAAKhJ,EAAY7jB,EAAM1J,EAAYwtB,GAExDC,MAAMF,EAAY7jB,EAAM1J,EAAYwtB,GAChCn4B,KAAKkhC,YAAY,IAAKhJ,EAAY7jB,EAAM1J,EAAYwtB,GAExD+I,YAAY5C,EAAQpG,EAAY7jB,EAAM1J,EAAYwtB,GAC9Cn4B,KAAK0+B,kBACL,MAAMrgC,EAAU,CACHY,EAAGi5B,EACH/oB,EAAGkF,QAEHnR,IAATi1B,IACA95B,EAAoB,EAAI85B,GAG5Bn4B,KAAKg9B,iBAAiB/5B,KAAK,CACvBq7B,OAAAA,EACAjgC,QAAAA,EACAsM,WAAAA,IAEJ3K,KAAKk9B,uBACL,MAAMz8B,EAAQT,KAAKg9B,iBAAiBv6B,OAAS,EACzCzC,KAAKq9B,WACLr9B,KAAKmhC,SAAS1gC,GAGdT,KAAK+rB,KAAK,kBAAoBmM,GAGtCiJ,SAAS1gC,GACL,MAAM69B,EAASt+B,KAAKg9B,iBAAiBv8B,GAAO69B,OACtCjgC,EAAU2B,KAAKg9B,iBAAiBv8B,GAAOpC,QACvCsM,EAAa3K,KAAKg9B,iBAAiBv8B,GAAOkK,WAChD3K,KAAKg9B,iBAAiBv8B,GAAO2gC,OAASphC,KAAKq9B,WAC3Cr9B,KAAKm2B,YAAYmI,EAAQjgC,GAAUuR,IAC/B5P,KAAK+rB,KAAKuS,EAAS,YAAa1uB,UACzB5P,KAAKg9B,iBAAiBv8B,GAC7BT,KAAKk9B,uBAE6B,IAA9Bl9B,KAAKk9B,uBACLl9B,KAAKg9B,iBAAmB,IAExBryB,GACAA,EAAWiF,EAAsB,EAAGA,EAAsB,MAItE8oB,YAAYC,GAER,GAAI34B,KAAKq9B,WAAY,CACjB,MAAMh/B,EAAU,CAAe+F,EAAGu0B,GAClC34B,KAAK+rB,KAAK,cAAe1tB,GACzB2B,KAAKm2B,YAAsB,IAAK93B,GAASK,IAErC,GAAe,OADAA,EAAqB,EACf,CACjB,MAAM2iC,EAAc3iC,EAAqB,EACzCsB,KAAK+rB,KAAK,cAAe,wBAA0BsV,QAKnEpK,eAAernB,GACX,GAAI,MAAOA,EAAS,CAEhB5P,KAAK+rB,KAAK,gBAAkB,EAAUnc,IACtC,MAAM0xB,EAAS1xB,EAAW,EACpB2uB,EAAav+B,KAAK09B,eAAe4D,GACnC/C,WACOv+B,KAAK09B,eAAe4D,GAC3B/C,EAAW3uB,EAAoB,QAGlC,IAAI,UAAWA,EAChB,KAAM,qCAAuCA,EAAe,MAEvD,MAAOA,GAEZ5P,KAAKuhC,YAAY3xB,EAAW,EAAGA,EAAW,IAGlD2xB,YAAYjD,EAAQ/vB,GAChBvO,KAAK+rB,KAAK,sBAAuBuS,EAAQ/vB,GAC1B,MAAX+vB,EACAt+B,KAAKu8B,cAAchuB,EAAiB,EAAGA,EAAiB,GAC5C,EAAOA,EAAQ,GAEX,MAAX+vB,EACLt+B,KAAKu8B,cAAchuB,EAAiB,EAAGA,EAAiB,GAC3C,EAAMA,EAAQ,GAEX,MAAX+vB,EACLt+B,KAAKwhC,iBAAiBjzB,EAAiB,EAAGA,EAAkB,GAE5C,OAAX+vB,EACLt+B,KAAK2gC,eAAepyB,EAAwB,EAAGA,EAA0B,GAEzD,QAAX+vB,EACLt+B,KAAK4gC,mBAAmBryB,EAAwB,EAAGA,EAA0B,GAE7D,OAAX+vB,EACLt+B,KAAKyhC,uBAAuBlzB,GAG5B3P,GAAM,6CACF,EAAU0/B,GACV,sCAGZ7J,SAASgD,EAAWE,GAChB33B,KAAK+rB,KAAK,oBACV/rB,KAAKq9B,YAAa,EAClBr9B,KAAKk+B,gCAAiC,IAAI/qB,MAAOC,UACjDpT,KAAK0hC,iBAAiBjK,GACtBz3B,KAAK2rB,cAAgBgM,EACjB33B,KAAKg+B,kBACLh+B,KAAK2hC,oBAET3hC,KAAK4hC,gBACL5hC,KAAKg+B,kBAAmB,EACxBh+B,KAAKw8B,kBAAiB,GAE1BqF,iBAAiBj7B,GACb,GAAQ5G,KAAK49B,UAAW,0DACpB59B,KAAKy9B,2BACLlQ,aAAavtB,KAAKy9B,2BAItBz9B,KAAKy9B,0BAA4Bh2B,YAAW,KACxCzH,KAAKy9B,0BAA4B,KACjCz9B,KAAK8hC,yBAEN72B,KAAKob,MAAMzf,IAElB83B,mBACS1+B,KAAK49B,WAAa59B,KAAKg+B,kBACxBh+B,KAAK6hC,iBAAiB,GAG9BzD,WAAWhC,GAEHA,IACCp8B,KAAKm8B,UACNn8B,KAAKs9B,kBAAoBt9B,KAAKu9B,qBAC9Bv9B,KAAK+rB,KAAK,2CACV/rB,KAAKs9B,gBAAkBjB,GAClBr8B,KAAK49B,WACN59B,KAAK6hC,iBAAiB,IAG9B7hC,KAAKm8B,SAAWC,EAEpBiC,UAAU0D,GACFA,GACA/hC,KAAK+rB,KAAK,wBACV/rB,KAAKs9B,gBAAkBjB,GAClBr8B,KAAK49B,WACN59B,KAAK6hC,iBAAiB,KAI1B7hC,KAAK+rB,KAAK,8CACN/rB,KAAK49B,WACL59B,KAAK49B,UAAUvb,SAI3B2f,wBAQI,GAPAhiC,KAAK+rB,KAAK,4BACV/rB,KAAKq9B,YAAa,EAClBr9B,KAAK49B,UAAY,KAEjB59B,KAAKiiC,0BAELjiC,KAAK09B,eAAiB,GAClB19B,KAAKkiC,mBAAoB,CACpBliC,KAAKm8B,SAKDn8B,KAAKk+B,kCAE4B,IAAI/qB,MAAOC,UAAYpT,KAAKk+B,+BAniB5C,MAqiBlBl+B,KAAKs9B,gBAAkBjB,IAE3Br8B,KAAKk+B,+BAAiC,OAVtCl+B,KAAK+rB,KAAK,8CACV/rB,KAAKs9B,gBAAkBt9B,KAAKu9B,mBAC5Bv9B,KAAKi+B,4BAA6B,IAAI9qB,MAAOC,WAUjD,MAAM+uB,GAA8B,IAAIhvB,MAAOC,UAAYpT,KAAKi+B,2BAChE,IAAImE,EAAiBn3B,KAAK2wB,IAAI,EAAG57B,KAAKs9B,gBAAkB6E,GACxDC,EAAiBn3B,KAAKE,SAAWi3B,EACjCpiC,KAAK+rB,KAAK,0BAA4BqW,EAAiB,MACvDpiC,KAAK6hC,iBAAiBO,GAEtBpiC,KAAKs9B,gBAAkBryB,KAAKmb,IAAIpmB,KAAKu9B,mBAhjBd,IAgjBkCv9B,KAAKs9B,iBAElEt9B,KAAKw8B,kBAAiB,GAE1BpiB,6BACI,GAAIpa,KAAKkiC,mBAAoB,CACzBliC,KAAK+rB,KAAK,+BACV/rB,KAAKi+B,4BAA6B,IAAI9qB,MAAOC,UAC7CpT,KAAKk+B,+BAAiC,KACtC,MAAMmE,EAAgBriC,KAAKi3B,eAAexS,KAAKzkB,MACzCsiC,EAAUtiC,KAAKy0B,SAAShQ,KAAKzkB,MAC7BmsB,EAAensB,KAAKgiC,sBAAsBvd,KAAKzkB,MAC/CsrB,EAAStrB,KAAKiE,GAAK,IAAMq4B,GAAqBiG,oBAC9C5W,EAAgB3rB,KAAK2rB,cAC3B,IAAI6W,GAAW,EACXC,EAAa,KACjB,MAAMC,EAAU,WACRD,EACAA,EAAWpgB,SAGXmgB,GAAW,EACXrW,MAGFwW,EAAgB,SAAUtM,GAC5B,EAAOoM,EAAY,0DACnBA,EAAWtM,YAAYE,IAE3Br2B,KAAK49B,UAAY,CACbvb,MAAOqgB,EACPvM,YAAawM,GAEjB,MAAMpb,EAAevnB,KAAK69B,mBAC1B79B,KAAK69B,oBAAqB,EAC1B,IAGI,MAAOpS,EAAWD,SAAuBltB,QAAQkc,IAAI,CACjDxa,KAAK08B,mBAAmBpV,SAASC,GACjCvnB,KAAK28B,uBAAuBrV,SAASC,KAEpCib,EAWDplB,GAAI,0CAVJA,GAAI,8CACJpd,KAAKw0B,WAAa/I,GAAaA,EAAUnD,YACzCtoB,KAAKu0B,eAAiB/I,GAAiBA,EAAcvW,MACrDwtB,EAAa,IAAIrO,GAAW9I,EAAQtrB,KAAKq0B,UAAWr0B,KAAKs0B,eAAgBt0B,KAAKu0B,eAAgBv0B,KAAKw0B,WAAY6N,EAAeC,EAASnW,GACzH6L,IACV1a,GAAK0a,EAAS,KAAOh4B,KAAKq0B,UAAUjR,WAAa,KACjDpjB,KAAK4iC,UA/lBQ,iBAgmBdjX,IAMX,MAAO/sB,GACHoB,KAAK+rB,KAAK,wBAA0BntB,GAC/B4jC,IACGxiC,KAAKq0B,UAAUrL,WAIf1L,GAAK1e,GAET8jC,OAKhBE,UAAU5K,GACN5a,GAAI,uCAAyC4a,GAC7Ch4B,KAAK88B,kBAAkB9E,IAAU,EAC7Bh4B,KAAK49B,UACL59B,KAAK49B,UAAUvb,SAGXriB,KAAKy9B,4BACLlQ,aAAavtB,KAAKy9B,2BAClBz9B,KAAKy9B,0BAA4B,MAEjCz9B,KAAKq9B,YACLr9B,KAAKgiC,yBAIjBa,OAAO7K,GACH5a,GAAI,mCAAqC4a,UAClCh4B,KAAK88B,kBAAkB9E,GAC1B,EAAQh4B,KAAK88B,qBACb98B,KAAKs9B,gBAAkBjB,GAClBr8B,KAAK49B,WACN59B,KAAK6hC,iBAAiB,IAIlCH,iBAAiBjK,GACb,MAAMqL,EAAQrL,GAAY,IAAItkB,MAAOC,UACrCpT,KAAKy8B,oBAAoB,CAAEsG,iBAAkBD,IAEjDb,0BACI,IAAK,IAAIx9B,EAAI,EAAGA,EAAIzE,KAAKg9B,iBAAiBv6B,OAAQgC,IAAK,CACnD,MAAMyb,EAAMlgB,KAAKg9B,iBAAiBv4B,GAC9Byb,GAAgB,MAAOA,EAAI7hB,SAAW6hB,EAAIkhB,SACtClhB,EAAIvV,YACJuV,EAAIvV,WAAW,qBAEZ3K,KAAKg9B,iBAAiBv4B,GAC7BzE,KAAKk9B,wBAIqB,IAA9Bl9B,KAAKk9B,uBACLl9B,KAAKg9B,iBAAmB,IAGhCwE,iBAAiBtJ,EAAYt1B,GAEzB,IAAIu8B,EAKAA,EAJCv8B,EAISA,EAAM2K,KAAIqxB,GAAKnZ,GAAkBmZ,KAAIhtB,KAAK,KAH1C,UAKd,MAAMotB,EAASh/B,KAAK6/B,cAAc3H,EAAYiH,GAC1CH,GAAUA,EAAOr0B,YACjBq0B,EAAOr0B,WAAW,qBAG1Bk1B,cAAc3H,EAAYiH,GACtB,MAAM6D,EAAuB,IAAInJ,GAAK3B,GAAY9U,WAClD,IAAI4b,EACJ,GAAIh/B,KAAK+8B,QAAQ3jB,IAAI4pB,GAAuB,CACxC,MAAMz1B,EAAMvN,KAAK+8B,QAAQh9B,IAAIijC,GAC7BhE,EAASzxB,EAAIxN,IAAIo/B,GACjB5xB,EAAI4M,OAAOglB,GACM,IAAb5xB,EAAI+iB,MACJtwB,KAAK+8B,QAAQ5iB,OAAO6oB,QAKxBhE,OAAS97B,EAEb,OAAO87B,EAEX2B,eAAesC,EAAYC,GACvB9lB,GAAI,uBAAyB6lB,EAAa,IAAMC,GAChDljC,KAAKw0B,WAAa,KAClBx0B,KAAK69B,oBAAqB,EAC1B79B,KAAK49B,UAAUvb,QACI,kBAAf4gB,GAAiD,sBAAfA,IAIlCjjC,KAAK89B,yBACD99B,KAAK89B,wBAzsBW,IA2sBhB99B,KAAKs9B,gBAhtBkB,IAmtBvBt9B,KAAK08B,mBAAmB/U,0BAIpCiZ,mBAAmBqC,EAAYC,GAC3B9lB,GAAI,4BAA8B6lB,EAAa,IAAMC,GACrDljC,KAAKu0B,eAAiB,KACtBv0B,KAAK69B,oBAAqB,EAGP,kBAAfoF,GAAiD,sBAAfA,IAIlCjjC,KAAK+9B,6BACD/9B,KAAK+9B,4BA7tBW,GA8tBhB/9B,KAAK28B,uBAAuBhV,yBAIxC8Z,uBAAuBlzB,GACfvO,KAAKw9B,uBACLx9B,KAAKw9B,uBAAuBjvB,GAGxB,QAASA,GACTwE,QAAQqK,IAAI,aAAe7O,EAAU,IAAEhM,QAAQ,KAAM,iBAIjEq/B,gBAEI5hC,KAAKkgC,UACLlgC,KAAKsgC,cAGL,IAAK,MAAM6C,KAAWnjC,KAAK+8B,QAAQxiB,SAC/B,IAAK,MAAMilB,KAAc2D,EAAQ5oB,SAC7Bva,KAAK0/B,YAAYF,GAGzB,IAAK,IAAI/6B,EAAI,EAAGA,EAAIzE,KAAKg9B,iBAAiBv6B,OAAQgC,IAC1CzE,KAAKg9B,iBAAiBv4B,IACtBzE,KAAKmhC,SAAS18B,GAGtB,KAAOzE,KAAKo9B,0BAA0B36B,QAAQ,CAC1C,MAAMpE,EAAU2B,KAAKo9B,0BAA0B1M,QAC/C1wB,KAAKghC,kBAAkB3iC,EAAQigC,OAAQjgC,EAAQ65B,WAAY75B,EAAQgW,KAAMhW,EAAQsM,YAErF,IAAK,IAAIlG,EAAI,EAAGA,EAAIzE,KAAKi9B,iBAAiBx6B,OAAQgC,IAC1CzE,KAAKi9B,iBAAiBx4B,IACtBzE,KAAK++B,SAASt6B,GAO1Bk9B,oBACI,MAAMhJ,EAAQ,GACd,IAAIyK,EAAa,KASjBzK,EAAM,OAASyK,EAAa,IAAM,GAAY7gC,QAAQ,MAAO,MAAQ,EACjEiR,IACAmlB,EAAM,qBAAuB,ELlxGR,iBAAdllB,WAAmD,gBAAzBA,UAAmB,UKqxGpDklB,EAAM,yBAA2B,GAErC34B,KAAK04B,YAAYC,GAErBuJ,mBACI,MAAMH,EAASrI,GAAcyE,cAAcvE,kBAC3C,OAAO,EAAQ55B,KAAK88B,oBAAsBiF,GAGlDzF,GAAqBO,4BAA8B,EAInDP,GAAqBiG,kBAAoB,EAkBzC,MAAMc,GACFnwB,YAAY7P,EAAMigC,GACdtjC,KAAKqD,KAAOA,EACZrD,KAAKsjC,KAAOA,EAEhBnV,YAAY9qB,EAAMigC,GACd,OAAO,IAAID,GAAUhgC,EAAMigC,IAoBnC,MAAM9iC,GAKF+iC,aACI,OAAOvjC,KAAKwjC,QAAQ/e,KAAKzkB,MAS7ByjC,oBAAoBC,EAASC,GACzB,MAAMC,EAAa,IAAIP,GAAUpe,GAAUye,GACrCG,EAAa,IAAIR,GAAUpe,GAAU0e,GAC3C,OAAgD,IAAzC3jC,KAAKwjC,QAAQI,EAAYC,GAMpCC,UAEI,OAAOT,GAAUU,KAoBzB,IAAIC,GACJ,MAAMC,WAAiBzjC,GACRwjC,0BACP,OAAOA,GAEAA,wBAAa9jC,GACpB8jC,GAAe9jC,EAEnBsjC,QAAQp0B,EAAGuG,GACP,OAAOwP,GAAY/V,EAAE/L,KAAMsS,EAAEtS,MAEjC6gC,YAAYZ,GAGR,MAAMzzB,EAAe,mDAEzB4zB,oBAAoBC,EAASC,GACzB,OAAO,EAEXG,UAEI,OAAOT,GAAUU,IAErBI,UAGI,OAAO,IAAId,GAAUne,GAAU8e,IAEnCI,SAASC,EAAYhhC,GAGjB,OAFA,EAA6B,iBAAfghC,EAAyB,gDAEhC,IAAIhB,GAAUgB,EAAYL,IAKrC5gB,WACI,MAAO,QAGf,MAAMkhB,GAAY,IAAIL,GAqBtB,MAAMM,GAKFrxB,YAAYowB,EAAMkB,EAAUC,EAAYC,EAAYC,EAAmB,MACnE3kC,KAAK0kC,WAAaA,EAClB1kC,KAAK2kC,iBAAmBA,EACxB3kC,KAAK4kC,WAAa,GAClB,IAAIC,EAAM,EACV,MAAQvB,EAAKwB,WAOT,GANAxB,EAAOA,EACPuB,EAAML,EAAWC,EAAWnB,EAAKx+B,IAAK0/B,GAAY,EAE9CE,IACAG,IAAQ,GAERA,EAAM,EAGFvB,EADAtjC,KAAK0kC,WACEpB,EAAKyB,KAGLzB,EAAK0B,UAGf,IAAY,IAARH,EAAW,CAEhB7kC,KAAK4kC,WAAW3hC,KAAKqgC,GACrB,MAIAtjC,KAAK4kC,WAAW3hC,KAAKqgC,GAEjBA,EADAtjC,KAAK0kC,WACEpB,EAAK0B,MAGL1B,EAAKyB,MAK5BE,UACI,GAA+B,IAA3BjlC,KAAK4kC,WAAWniC,OAChB,OAAO,KAEX,IACI/D,EADA4kC,EAAOtjC,KAAK4kC,WAAWjjB,MAQ3B,GALIjjB,EADAsB,KAAK2kC,iBACI3kC,KAAK2kC,iBAAiBrB,EAAKx+B,IAAKw+B,EAAKjkC,OAGrC,CAAEyF,IAAKw+B,EAAKx+B,IAAKzF,MAAOikC,EAAKjkC,OAEtCW,KAAK0kC,WAEL,IADApB,EAAOA,EAAKyB,MACJzB,EAAKwB,WACT9kC,KAAK4kC,WAAW3hC,KAAKqgC,GACrBA,EAAOA,EAAK0B,WAKhB,IADA1B,EAAOA,EAAK0B,OACJ1B,EAAKwB,WACT9kC,KAAK4kC,WAAW3hC,KAAKqgC,GACrBA,EAAOA,EAAKyB,KAGpB,OAAOrmC,EAEXwmC,UACI,OAAOllC,KAAK4kC,WAAWniC,OAAS,EAEpC0iC,OACI,GAA+B,IAA3BnlC,KAAK4kC,WAAWniC,OAChB,OAAO,KAEX,MAAM6gC,EAAOtjC,KAAK4kC,WAAW5kC,KAAK4kC,WAAWniC,OAAS,GACtD,OAAIzC,KAAK2kC,iBACE3kC,KAAK2kC,iBAAiBrB,EAAKx+B,IAAKw+B,EAAKjkC,OAGrC,CAAEyF,IAAKw+B,EAAKx+B,IAAKzF,MAAOikC,EAAKjkC,QAOhD,MAAM+lC,GAQFlyB,YAAYpO,EAAKzF,EAAOgmC,EAAON,EAAMC,GACjChlC,KAAK8E,IAAMA,EACX9E,KAAKX,MAAQA,EACbW,KAAKqlC,MAAiB,MAATA,EAAgBA,EAAQD,GAASE,IAC9CtlC,KAAK+kC,KACO,MAARA,EAAeA,EAAOQ,GAAUC,WACpCxlC,KAAKglC,MACQ,MAATA,EAAgBA,EAAQO,GAAUC,WAY1CC,KAAK3gC,EAAKzF,EAAOgmC,EAAON,EAAMC,GAC1B,OAAO,IAAII,GAAgB,MAAPtgC,EAAcA,EAAM9E,KAAK8E,IAAc,MAATzF,EAAgBA,EAAQW,KAAKX,MAAgB,MAATgmC,EAAgBA,EAAQrlC,KAAKqlC,MAAe,MAARN,EAAeA,EAAO/kC,KAAK+kC,KAAe,MAATC,EAAgBA,EAAQhlC,KAAKglC,OAK5LniC,QACI,OAAO7C,KAAK+kC,KAAKliC,QAAU,EAAI7C,KAAKglC,MAAMniC,QAK9CiiC,UACI,OAAO,EAWXY,iBAAiBpH,GACb,OAAQt+B,KAAK+kC,KAAKW,iBAAiBpH,MAC7BA,EAAOt+B,KAAK8E,IAAK9E,KAAKX,QACxBW,KAAKglC,MAAMU,iBAAiBpH,GAUpCqH,iBAAiBrH,GACb,OAAQt+B,KAAKglC,MAAMW,iBAAiBrH,IAChCA,EAAOt+B,KAAK8E,IAAK9E,KAAKX,QACtBW,KAAK+kC,KAAKY,iBAAiBrH,GAKnCsH,OACI,OAAI5lC,KAAK+kC,KAAKD,UACH9kC,KAGAA,KAAK+kC,KAAKa,OAMzBC,SACI,OAAO7lC,KAAK4lC,OAAO9gC,IAKvBghC,SACI,OAAI9lC,KAAKglC,MAAMF,UACJ9kC,KAAK8E,IAGL9E,KAAKglC,MAAMc,SAS1BC,OAAOjhC,EAAKzF,EAAOolC,GACf,IAAIx1B,EAAIjP,KACR,MAAM6kC,EAAMJ,EAAW3/B,EAAKmK,EAAEnK,KAU9B,OARImK,EADA41B,EAAM,EACF51B,EAAEw2B,KAAK,KAAM,KAAM,KAAMx2B,EAAE81B,KAAKgB,OAAOjhC,EAAKzF,EAAOolC,GAAa,MAEvD,IAARI,EACD51B,EAAEw2B,KAAK,KAAMpmC,EAAO,KAAM,KAAM,MAGhC4P,EAAEw2B,KAAK,KAAM,KAAM,KAAM,KAAMx2B,EAAE+1B,MAAMe,OAAOjhC,EAAKzF,EAAOolC,IAE3Dx1B,EAAE+2B,SAKbC,aACI,GAAIjmC,KAAK+kC,KAAKD,UACV,OAAOS,GAAUC,WAErB,IAAIv2B,EAAIjP,KAKR,OAJKiP,EAAE81B,KAAKmB,UAAaj3B,EAAE81B,KAAKA,KAAKmB,WACjCj3B,EAAIA,EAAEk3B,gBAEVl3B,EAAIA,EAAEw2B,KAAK,KAAM,KAAM,KAAMx2B,EAAE81B,KAAKkB,aAAc,MAC3Ch3B,EAAE+2B,SAOb59B,OAAOtD,EAAK2/B,GACR,IAAIx1B,EAAGm3B,EAEP,GADAn3B,EAAIjP,KACAykC,EAAW3/B,EAAKmK,EAAEnK,KAAO,EACpBmK,EAAE81B,KAAKD,WAAc71B,EAAE81B,KAAKmB,UAAaj3B,EAAE81B,KAAKA,KAAKmB,WACtDj3B,EAAIA,EAAEk3B,gBAEVl3B,EAAIA,EAAEw2B,KAAK,KAAM,KAAM,KAAMx2B,EAAE81B,KAAK38B,OAAOtD,EAAK2/B,GAAa,UAE5D,CAOD,GANIx1B,EAAE81B,KAAKmB,WACPj3B,EAAIA,EAAEo3B,gBAELp3B,EAAE+1B,MAAMF,WAAc71B,EAAE+1B,MAAMkB,UAAaj3B,EAAE+1B,MAAMD,KAAKmB,WACzDj3B,EAAIA,EAAEq3B,iBAEqB,IAA3B7B,EAAW3/B,EAAKmK,EAAEnK,KAAY,CAC9B,GAAImK,EAAE+1B,MAAMF,UACR,OAAOS,GAAUC,WAGjBY,EAAWn3B,EAAE+1B,MAAMY,OACnB32B,EAAIA,EAAEw2B,KAAKW,EAASthC,IAAKshC,EAAS/mC,MAAO,KAAM,KAAM4P,EAAE+1B,MAAMiB,cAGrEh3B,EAAIA,EAAEw2B,KAAK,KAAM,KAAM,KAAM,KAAMx2B,EAAE+1B,MAAM58B,OAAOtD,EAAK2/B,IAE3D,OAAOx1B,EAAE+2B,SAKbE,SACI,OAAOlmC,KAAKqlC,MAKhBW,SACI,IAAI/2B,EAAIjP,KAUR,OATIiP,EAAE+1B,MAAMkB,WAAaj3B,EAAE81B,KAAKmB,WAC5Bj3B,EAAIA,EAAEs3B,eAENt3B,EAAE81B,KAAKmB,UAAYj3B,EAAE81B,KAAKA,KAAKmB,WAC/Bj3B,EAAIA,EAAEo3B,gBAENp3B,EAAE81B,KAAKmB,UAAYj3B,EAAE+1B,MAAMkB,WAC3Bj3B,EAAIA,EAAEu3B,cAEHv3B,EAKXk3B,eACI,IAAIl3B,EAAIjP,KAAKwmC,aAMb,OALIv3B,EAAE+1B,MAAMD,KAAKmB,WACbj3B,EAAIA,EAAEw2B,KAAK,KAAM,KAAM,KAAM,KAAMx2B,EAAE+1B,MAAMqB,gBAC3Cp3B,EAAIA,EAAEs3B,cACNt3B,EAAIA,EAAEu3B,cAEHv3B,EAKXq3B,gBACI,IAAIr3B,EAAIjP,KAAKwmC,aAKb,OAJIv3B,EAAE81B,KAAKA,KAAKmB,WACZj3B,EAAIA,EAAEo3B,eACNp3B,EAAIA,EAAEu3B,cAEHv3B,EAKXs3B,cACI,MAAME,EAAKzmC,KAAKylC,KAAK,KAAM,KAAML,GAASE,IAAK,KAAMtlC,KAAKglC,MAAMD,MAChE,OAAO/kC,KAAKglC,MAAMS,KAAK,KAAM,KAAMzlC,KAAKqlC,MAAOoB,EAAI,MAKvDJ,eACI,MAAMK,EAAK1mC,KAAKylC,KAAK,KAAM,KAAML,GAASE,IAAKtlC,KAAK+kC,KAAKC,MAAO,MAChE,OAAOhlC,KAAK+kC,KAAKU,KAAK,KAAM,KAAMzlC,KAAKqlC,MAAO,KAAMqB,GAKxDF,aACI,MAAMzB,EAAO/kC,KAAK+kC,KAAKU,KAAK,KAAM,MAAOzlC,KAAK+kC,KAAKM,MAAO,KAAM,MAC1DL,EAAQhlC,KAAKglC,MAAMS,KAAK,KAAM,MAAOzlC,KAAKglC,MAAMK,MAAO,KAAM,MACnE,OAAOrlC,KAAKylC,KAAK,KAAM,MAAOzlC,KAAKqlC,MAAON,EAAMC,GAOpD2B,iBACI,MAAMC,EAAa5mC,KAAK6mC,SACxB,OAAO57B,KAAKkb,IAAI,EAAKygB,IAAe5mC,KAAK6C,QAAU,EAEvDgkC,SACI,GAAI7mC,KAAKkmC,UAAYlmC,KAAK+kC,KAAKmB,SAC3B,MAAM,IAAIp2B,MAAM,0BAA4B9P,KAAK8E,IAAM,IAAM9E,KAAKX,MAAQ,KAE9E,GAAIW,KAAKglC,MAAMkB,SACX,MAAM,IAAIp2B,MAAM,mBAAqB9P,KAAK8E,IAAM,IAAM9E,KAAKX,MAAQ,YAEvE,MAAMunC,EAAa5mC,KAAK+kC,KAAK8B,SAC7B,GAAID,IAAe5mC,KAAKglC,MAAM6B,SAC1B,MAAM,IAAI/2B,MAAM,uBAGhB,OAAO82B,GAAc5mC,KAAKkmC,SAAW,EAAI,IAIrDd,GAASE,KAAM,EACfF,GAAS0B,OAAQ,EAwFjB,MAAMvB,GAKFryB,YAAY6zB,EAAaC,EAAQzB,GAAUC,YACvCxlC,KAAK+mC,YAAcA,EACnB/mC,KAAKgnC,MAAQA,EAUjBjB,OAAOjhC,EAAKzF,GACR,OAAO,IAAIkmC,GAAUvlC,KAAK+mC,YAAa/mC,KAAKgnC,MACvCjB,OAAOjhC,EAAKzF,EAAOW,KAAK+mC,aACxBtB,KAAK,KAAM,KAAML,GAAS0B,MAAO,KAAM,OAQhD1+B,OAAOtD,GACH,OAAO,IAAIygC,GAAUvlC,KAAK+mC,YAAa/mC,KAAKgnC,MACvC5+B,OAAOtD,EAAK9E,KAAK+mC,aACjBtB,KAAK,KAAM,KAAML,GAAS0B,MAAO,KAAM,OAShD/mC,IAAI+E,GACA,IAAI+/B,EACAvB,EAAOtjC,KAAKgnC,MAChB,MAAQ1D,EAAKwB,WAAW,CAEpB,GADAD,EAAM7kC,KAAK+mC,YAAYjiC,EAAKw+B,EAAKx+B,KACrB,IAAR+/B,EACA,OAAOvB,EAAKjkC,MAEPwlC,EAAM,EACXvB,EAAOA,EAAKyB,KAEPF,EAAM,IACXvB,EAAOA,EAAK0B,OAGpB,OAAO,KAOXiC,kBAAkBniC,GACd,IAAI+/B,EAAKvB,EAAOtjC,KAAKgnC,MAAOE,EAAc,KAC1C,MAAQ5D,EAAKwB,WAAW,CAEpB,GADAD,EAAM7kC,KAAK+mC,YAAYjiC,EAAKw+B,EAAKx+B,KACrB,IAAR+/B,EAAW,CACX,GAAKvB,EAAKyB,KAAKD,UAOV,OAAIoC,EACEA,EAAYpiC,IAGZ,KATP,IADAw+B,EAAOA,EAAKyB,MACJzB,EAAK0B,MAAMF,WACfxB,EAAOA,EAAK0B,MAEhB,OAAO1B,EAAKx+B,IASX+/B,EAAM,EACXvB,EAAOA,EAAKyB,KAEPF,EAAM,IACXqC,EAAc5D,EACdA,EAAOA,EAAK0B,OAGpB,MAAM,IAAIl1B,MAAM,yEAKpBg1B,UACI,OAAO9kC,KAAKgnC,MAAMlC,UAKtBjiC,QACI,OAAO7C,KAAKgnC,MAAMnkC,QAKtBgjC,SACI,OAAO7lC,KAAKgnC,MAAMnB,SAKtBC,SACI,OAAO9lC,KAAKgnC,MAAMlB,SAWtBJ,iBAAiBpH,GACb,OAAOt+B,KAAKgnC,MAAMtB,iBAAiBpH,GAUvCqH,iBAAiBrH,GACb,OAAOt+B,KAAKgnC,MAAMrB,iBAAiBrH,GAMvC6I,YAAYC,GACR,OAAO,IAAI7C,GAAkBvkC,KAAKgnC,MAAO,KAAMhnC,KAAK+mC,aAAa,EAAOK,GAE5EC,gBAAgBviC,EAAKsiC,GACjB,OAAO,IAAI7C,GAAkBvkC,KAAKgnC,MAAOliC,EAAK9E,KAAK+mC,aAAa,EAAOK,GAE3EE,uBAAuBxiC,EAAKsiC,GACxB,OAAO,IAAI7C,GAAkBvkC,KAAKgnC,MAAOliC,EAAK9E,KAAK+mC,aAAa,EAAMK,GAE1EG,mBAAmBH,GACf,OAAO,IAAI7C,GAAkBvkC,KAAKgnC,MAAO,KAAMhnC,KAAK+mC,aAAa,EAAMK,IAwB/E,SAASI,GAAqBzC,EAAMC,GAChC,OAAO7f,GAAY4f,EAAK1hC,KAAM2hC,EAAM3hC,MAExC,SAASokC,GAAgB1C,EAAMC,GAC3B,OAAO7f,GAAY4f,EAAMC,GAmB7B,IAAI0C,GAzCJnC,GAAUC,WAAa,IAlPvB,MAMIC,KAAK3gC,EAAKzF,EAAOgmC,EAAON,EAAMC,GAC1B,OAAOhlC,KAUX+lC,OAAOjhC,EAAKzF,EAAOolC,GACf,OAAO,IAAIW,GAAStgC,EAAKzF,EAAO,MASpC+I,OAAOtD,EAAK2/B,GACR,OAAOzkC,KAKX6C,QACI,OAAO,EAKXiiC,UACI,OAAO,EAUXY,iBAAiBpH,GACb,OAAO,EAUXqH,iBAAiBrH,GACb,OAAO,EAEXuH,SACI,OAAO,KAEXC,SACI,OAAO,KAEXe,SACI,OAAO,EAKXX,SACI,OAAO,IAkNf,MAAMyB,GAAmB,SAAUC,GAC/B,MAAwB,iBAAbA,EACA,UAAY7hB,GAAsB6hB,GAGlC,UAAYA,GAMrBC,GAAuB,SAAUC,GACnC,GAAIA,EAAaC,aAAc,CAC3B,MAAM7nC,EAAM4nC,EAAa5nC,MACzB,EAAsB,iBAARA,GACK,iBAARA,GACS,iBAARA,GAAoB,EAASA,EAAK,OAAS,6CAGvD,EAAO4nC,IAAiBJ,IAAcI,EAAahD,UAAW,gCAGlE,EAAOgD,IAAiBJ,IAAcI,EAAaE,cAAclD,UAAW,uDAmBhF,IAAImD,GAuOAC,GACAC,GAlOJ,MAAMC,GAMFl1B,YAAYm1B,EAAQC,EAAgBF,GAASH,0BAA0BzC,YACnExlC,KAAKqoC,OAASA,EACdroC,KAAKsoC,cAAgBA,EACrBtoC,KAAKuoC,UAAY,KACjB,OAAuBrlC,IAAhBlD,KAAKqoC,QAAwC,OAAhBroC,KAAKqoC,OAAiB,4DAC1DR,GAAqB7nC,KAAKsoC,eAEnBL,qCAA0B/nC,GACjC+nC,GAA4B/nC,EAErB+nC,uCACP,OAAOA,GAGXF,aACI,OAAO,EAGXC,cACI,OAAOhoC,KAAKsoC,cAGhBE,eAAeC,GACX,OAAO,IAAIL,GAASpoC,KAAKqoC,OAAQI,GAGrCC,kBAAkBC,GAEd,MAAkB,cAAdA,EACO3oC,KAAKsoC,cAGLF,GAASH,0BAA0BzC,WAIlDoD,SAASvO,GACL,OAAIU,GAAYV,GACLr6B,KAEqB,cAAvBo6B,GAAaC,GACXr6B,KAAKsoC,cAGLF,GAASH,0BAA0BzC,WAGlDqD,WACI,OAAO,EAGXC,wBAAwBH,EAAWI,GAC/B,OAAO,KAGXC,qBAAqBL,EAAWM,GAC5B,MAAkB,cAAdN,EACO3oC,KAAKwoC,eAAeS,GAEtBA,EAAanE,WAA2B,cAAd6D,EACxB3oC,KAGAooC,GAASH,0BAA0BzC,WAAWwD,qBAAqBL,EAAWM,GAAcT,eAAexoC,KAAKsoC,eAI/HY,YAAY7O,EAAM4O,GACd,MAAME,EAAQ/O,GAAaC,GAC3B,OAAc,OAAV8O,EACOF,EAEFA,EAAanE,WAAuB,cAAVqE,EACxBnpC,MAGP,EAAiB,cAAVmpC,GAAiD,IAAxB7O,GAAcD,GAAa,8CACpDr6B,KAAKgpC,qBAAqBG,EAAOf,GAASH,0BAA0BzC,WAAW0D,YAAY3O,GAAaF,GAAO4O,KAI9HnE,UACI,OAAO,EAGXsE,cACI,OAAO,EAGXC,aAAa5oC,EAAO69B,GAChB,OAAO,EAEXp+B,IAAIopC,GACA,OAAIA,IAAiBtpC,KAAKgoC,cAAclD,UAC7B,CACH,SAAU9kC,KAAKupC,WACf,YAAavpC,KAAKgoC,cAAc9nC,OAI7BF,KAAKupC,WAIpBpR,OACI,GAAuB,OAAnBn4B,KAAKuoC,UAAoB,CACzB,IAAIiB,EAAS,GACRxpC,KAAKsoC,cAAcxD,YACpB0E,GACI,YACI7B,GAAiB3nC,KAAKsoC,cAAcpoC,OACpC,KAEZ,MAAMmO,SAAcrO,KAAKqoC,OACzBmB,GAAUn7B,EAAO,IAEbm7B,GADS,WAATn7B,EACU0X,GAAsB/lB,KAAKqoC,QAG3BroC,KAAKqoC,OAEnBroC,KAAKuoC,UAAYxkB,GAAKylB,GAE1B,OAAOxpC,KAAKuoC,UAMhBgB,WACI,OAAOvpC,KAAKqoC,OAEhBoB,UAAUnO,GACN,OAAIA,IAAU8M,GAASH,0BAA0BzC,WACtC,EAEFlK,aAAiB8M,GAASH,2BACvB,GAGR,EAAO3M,EAAMyM,aAAc,qBACpB/nC,KAAK0pC,mBAAmBpO,IAMvCoO,mBAAmBC,GACf,MAAMC,SAAuBD,EAAUtB,OACjCwB,SAAsB7pC,KAAKqoC,OAC3ByB,EAAa1B,GAAS2B,iBAAiB1gB,QAAQugB,GAC/CI,EAAY5B,GAAS2B,iBAAiB1gB,QAAQwgB,GAGpD,OAFA,EAAOC,GAAc,EAAG,sBAAwBF,GAChD,EAAOI,GAAa,EAAG,sBAAwBH,GAC3CC,IAAeE,EAEM,WAAjBH,EAEO,EAIH7pC,KAAKqoC,OAASsB,EAAUtB,QAChB,EAEHroC,KAAKqoC,SAAWsB,EAAUtB,OACxB,EAGA,EAKR2B,EAAYF,EAG3BG,YACI,OAAOjqC,KAEXkqC,YACI,OAAO,EAEXC,OAAO7O,GACH,GAAIA,IAAUt7B,KACV,OAAO,EAEN,GAAIs7B,EAAMyM,aAAc,CACzB,MAAM4B,EAAYrO,EAClB,OAAQt7B,KAAKqoC,SAAWsB,EAAUtB,QAC9BroC,KAAKsoC,cAAc6B,OAAOR,EAAUrB,eAGxC,OAAO,GAQnBF,GAAS2B,iBAAmB,CAAC,SAAU,UAAW,SAAU,UA8D5D,MAAMK,GAAiB,IApCvB,cAA4B5pC,GACxBgjC,QAAQp0B,EAAGuG,GACP,MAAM00B,EAAYj7B,EAAEk0B,KAAK0E,cACnBsC,EAAY30B,EAAE2tB,KAAK0E,cACnBuC,EAAWF,EAAUZ,UAAUa,GACrC,OAAiB,IAAbC,EACOplB,GAAY/V,EAAE/L,KAAMsS,EAAEtS,MAGtBknC,EAGfrG,YAAYZ,GACR,OAAQA,EAAK0E,cAAclD,UAE/BrB,oBAAoBC,EAASC,GACzB,OAAQD,EAAQsE,cAAcmC,OAAOxG,EAAQqE,eAEjDlE,UAEI,OAAOT,GAAUU,IAErBI,UACI,OAAO,IAAId,GAAUne,GAAU,IAAIkjB,GAAS,kBAAmBD,KAEnE/D,SAASC,EAAYhhC,GACjB,MAAMykC,EAAeI,GAAe7D,GACpC,OAAO,IAAIhB,GAAUhgC,EAAM,IAAI+kC,GAAS,kBAAmBN,IAK/D1kB,WACI,MAAO,cAqBTonB,GAAQv/B,KAAKmS,IAAI,GACvB,MAAMqtB,GACFv3B,YAAYzQ,GACS,IAACioC,EAIlB1qC,KAAK6C,OAJa6nC,EAIIjoC,EAAS,EAF/BwG,SAAUgC,KAAKmS,IAAIstB,GAAOF,GAAQ,KAGlCxqC,KAAK2qC,SAAW3qC,KAAK6C,MAAQ,EAC7B,MAAM+nC,GAHWrkB,EAGIvmB,KAAK6C,MAHAoG,SAASjL,MAAMuoB,EAAO,GAAG3U,KAAK,KAAM,IAA9C,IAAC2U,EAIjBvmB,KAAK6qC,MAASpoC,EAAS,EAAKmoC,EAEhCE,eAEI,MAAMpsC,IAAWsB,KAAK6qC,MAAS,GAAO7qC,KAAK2qC,UAE3C,OADA3qC,KAAK2qC,WACEjsC,GAgBf,MAAMqsC,GAAgB,SAAUC,EAAWnG,EAAKoG,EAAOC,GACnDF,EAAU3/B,KAAKw5B,GACf,MAAMsG,EAAoB,SAAUC,EAAKpnB,GACrC,MAAMvhB,EAASuhB,EAAOonB,EACtB,IAAIC,EACAvmC,EACJ,GAAe,IAAXrC,EACA,OAAO,KAEN,GAAe,IAAXA,EAGL,OAFA4oC,EAAYL,EAAUI,GACtBtmC,EAAMmmC,EAAQA,EAAMI,GAAaA,EAC1B,IAAIjG,GAAStgC,EAAKumC,EAAU/H,KAAM8B,GAAS0B,MAAO,KAAM,MAE9D,CAED,MAAMwE,EAASriC,SAAUxG,EAAS,EAAI,IAAM2oC,EACtCrG,EAAOoG,EAAkBC,EAAKE,GAC9BtG,EAAQmG,EAAkBG,EAAS,EAAGtnB,GAG5C,OAFAqnB,EAAYL,EAAUM,GACtBxmC,EAAMmmC,EAAQA,EAAMI,GAAaA,EAC1B,IAAIjG,GAAStgC,EAAKumC,EAAU/H,KAAM8B,GAAS0B,MAAO/B,EAAMC,KA0CjEuG,EAvCmB,SAAUC,GAC/B,IAAIlI,EAAO,KACPiI,EAAO,KACP9qC,EAAQuqC,EAAUvoC,OACtB,MAAMgpC,EAAe,SAAUC,EAAWrG,GACtC,MAAM+F,EAAM3qC,EAAQirC,EACd1nB,EAAOvjB,EACbA,GAASirC,EACT,MAAMC,EAAYR,EAAkBC,EAAM,EAAGpnB,GACvCqnB,EAAYL,EAAUI,GACtBtmC,EAAMmmC,EAAQA,EAAMI,GAAaA,EACvCO,EAAc,IAAIxG,GAAStgC,EAAKumC,EAAU/H,KAAM+B,EAAO,KAAMsG,KAE3DC,EAAgB,SAAUC,GACxBvI,GACAA,EAAKyB,KAAO8G,EACZvI,EAAOuI,IAGPN,EAAOM,EACPvI,EAAOuI,IAGf,IAAK,IAAIpnC,EAAI,EAAGA,EAAI+mC,EAAO3oC,QAAS4B,EAAG,CACnC,MAAMqnC,EAAQN,EAAOV,eAEfY,EAAYzgC,KAAKkb,IAAI,EAAGqlB,EAAO3oC,OAAS4B,EAAI,IAC9CqnC,EACAL,EAAaC,EAAWtG,GAAS0B,QAIjC2E,EAAaC,EAAWtG,GAAS0B,OACjC2E,EAAaC,EAAWtG,GAASE,MAGzC,OAAOiG,EAGEQ,CADE,IAAItB,GAAUO,EAAUvoC,SAGvC,OAAO,IAAI8iC,GAAU2F,GAAarG,EAAK0G,IAmB3C,IAAIS,GACJ,MAAMC,GAAiB,GACvB,MAAMC,GACFh5B,YAAYi5B,EAAUC,GAClBpsC,KAAKmsC,SAAWA,EAChBnsC,KAAKosC,UAAYA,EAKVC,qBAKP,OAJA,EAAOJ,IAAkB7B,GAAgB,uCACzC4B,GACIA,IACI,IAAIE,GAAS,CAAE,YAAaD,IAAkB,CAAE,YAAa7B,KAC9D4B,GAEXjsC,IAAIusC,GACA,MAAMC,EAAY,EAAQvsC,KAAKmsC,SAAUG,GACzC,IAAKC,EACD,MAAM,IAAIz8B,MAAM,wBAA0Bw8B,GAE9C,OAAIC,aAAqBhH,GACdgH,EAKA,KAGfC,SAASC,GACL,OAAO,EAASzsC,KAAKosC,UAAWK,EAAgBrpB,YAEpDspB,SAASD,EAAiBE,GACtB,EAAOF,IAAoBnI,GAAW,uEACtC,MAAM0G,EAAY,GAClB,IAAI4B,GAAkB,EACtB,MAAMC,EAAOF,EAAiBxF,YAAY9D,GAAUyJ,MACpD,IAOIC,EAPAC,EAAOH,EAAK5H,UAChB,KAAO+H,GACHJ,EACIA,GAAmBH,EAAgBvI,YAAY8I,EAAK1J,MACxD0H,EAAU/nC,KAAK+pC,GACfA,EAAOH,EAAK5H,UAIZ8H,EADAH,EACW7B,GAAcC,EAAWyB,EAAgBlJ,cAGzC0I,GAEf,MAAMgB,EAAYR,EAAgBrpB,WAC5B8pB,EAAcrtC,OAAO6M,OAAO,GAAI1M,KAAKosC,WAC3Cc,EAAYD,GAAaR,EACzB,MAAMU,EAAattC,OAAO6M,OAAO,GAAI1M,KAAKmsC,UAE1C,OADAgB,EAAWF,GAAaF,EACjB,IAAIb,GAASiB,EAAYD,GAKpCE,aAAa/B,EAAWsB,GACpB,MAAMQ,EAAa5/B,EAAIvN,KAAKmsC,UAAU,CAACkB,EAAiBJ,KACpD,MAAMxsC,EAAQ,EAAQT,KAAKosC,UAAWa,GAEtC,GADA,EAAOxsC,EAAO,oCAAsCwsC,GAChDI,IAAoBpB,GAAgB,CAEpC,GAAIxrC,EAAMyjC,YAAYmH,EAAU/H,MAAO,CAEnC,MAAM0H,EAAY,GACZ6B,EAAOF,EAAiBxF,YAAY9D,GAAUyJ,MACpD,IAAIE,EAAOH,EAAK5H,UAChB,KAAO+H,GACCA,EAAK3pC,OAASgoC,EAAUhoC,MACxB2nC,EAAU/nC,KAAK+pC,GAEnBA,EAAOH,EAAK5H,UAGhB,OADA+F,EAAU/nC,KAAKooC,GACRN,GAAcC,EAAWvqC,EAAM8iC,cAItC,OAAO0I,GAGV,CACD,MAAMqB,EAAeX,EAAiB5sC,IAAIsrC,EAAUhoC,MACpD,IAAIkqC,EAAcF,EAIlB,OAHIC,IACAC,EAAcA,EAAYnlC,OAAO,IAAIi7B,GAAUgI,EAAUhoC,KAAMiqC,KAE5DC,EAAYxH,OAAOsF,EAAWA,EAAU/H,UAGvD,OAAO,IAAI4I,GAASiB,EAAYntC,KAAKosC,WAKzCoB,kBAAkBnC,EAAWsB,GACzB,MAAMQ,EAAa5/B,EAAIvN,KAAKmsC,UAAWkB,IACnC,GAAIA,IAAoBpB,GAEpB,OAAOoB,EAEN,CACD,MAAMC,EAAeX,EAAiB5sC,IAAIsrC,EAAUhoC,MACpD,OAAIiqC,EACOD,EAAgBjlC,OAAO,IAAIi7B,GAAUgI,EAAUhoC,KAAMiqC,IAIrDD,MAInB,OAAO,IAAInB,GAASiB,EAAYntC,KAAKosC,YAqB7C,IAAI5G,GAMJ,MAAMiI,GAKFv6B,YAAYw6B,EAAWpF,EAAeqF,GAClC3tC,KAAK0tC,UAAYA,EACjB1tC,KAAKsoC,cAAgBA,EACrBtoC,KAAK2tC,UAAYA,EACjB3tC,KAAKuoC,UAAY,KAMbvoC,KAAKsoC,eACLT,GAAqB7nC,KAAKsoC,eAE1BtoC,KAAK0tC,UAAU5I,WACf,GAAQ9kC,KAAKsoC,eAAiBtoC,KAAKsoC,cAAcxD,UAAW,wCAGzDU,wBACP,OAAQA,KACHA,GAAa,IAAIiI,GAAa,IAAIlI,GAAUkC,IAAkB,KAAMyE,GAASG,UAGtFtE,aACI,OAAO,EAGXC,cACI,OAAOhoC,KAAKsoC,eAAiB9C,GAGjCgD,eAAeC,GACX,OAAIzoC,KAAK0tC,UAAU5I,UAER9kC,KAGA,IAAIytC,GAAaztC,KAAK0tC,UAAWjF,EAAiBzoC,KAAK2tC,WAItEjF,kBAAkBC,GAEd,GAAkB,cAAdA,EACA,OAAO3oC,KAAKgoC,cAEX,CACD,MAAM4F,EAAQ5tC,KAAK0tC,UAAU3tC,IAAI4oC,GACjC,OAAiB,OAAViF,EAAiBpI,GAAaoI,GAI7ChF,SAASvO,GACL,MAAM8O,EAAQ/O,GAAaC,GAC3B,OAAc,OAAV8O,EACOnpC,KAEJA,KAAK0oC,kBAAkBS,GAAOP,SAASrO,GAAaF,IAG/DwO,SAASF,GACL,OAAyC,OAAlC3oC,KAAK0tC,UAAU3tC,IAAI4oC,GAG9BK,qBAAqBL,EAAWM,GAE5B,GADA,EAAOA,EAAc,8CACH,cAAdN,EACA,OAAO3oC,KAAKwoC,eAAeS,GAE1B,CACD,MAAMoC,EAAY,IAAIhI,GAAUsF,EAAWM,GAC3C,IAAIsE,EAAaM,EACb5E,EAAanE,WACbyI,EAAcvtC,KAAK0tC,UAAUtlC,OAAOugC,GACpCkF,EAAc7tC,KAAK2tC,UAAUH,kBAAkBnC,EAAWrrC,KAAK0tC,aAG/DH,EAAcvtC,KAAK0tC,UAAU3H,OAAO4C,EAAWM,GAC/C4E,EAAc7tC,KAAK2tC,UAAUP,aAAa/B,EAAWrrC,KAAK0tC,YAE9D,MAAMI,EAAcP,EAAYzI,UAC1BU,GACAxlC,KAAKsoC,cACX,OAAO,IAAImF,GAAaF,EAAaO,EAAaD,IAI1D3E,YAAY7O,EAAM4O,GACd,MAAME,EAAQ/O,GAAaC,GAC3B,GAAc,OAAV8O,EACA,OAAOF,EAEN,CACD,EAA8B,cAAvB7O,GAAaC,IAAiD,IAAxBC,GAAcD,GAAa,8CACxE,MAAM0T,EAAoB/tC,KAAK0oC,kBAAkBS,GAAOD,YAAY3O,GAAaF,GAAO4O,GACxF,OAAOjpC,KAAKgpC,qBAAqBG,EAAO4E,IAIhDjJ,UACI,OAAO9kC,KAAK0tC,UAAU5I,UAG1BsE,cACI,OAAOppC,KAAK0tC,UAAU7qC,QAG1B3C,IAAIopC,GACA,GAAItpC,KAAK8kC,UACL,OAAO,KAEX,MAAMhmC,EAAM,GACZ,IAAIkvC,EAAU,EAAGlI,EAAS,EAAGmI,GAAiB,EAW9C,GAVAjuC,KAAKqpC,aAAae,IAAgB,CAACtlC,EAAKikC,KACpCjqC,EAAIgG,GAAOikC,EAAU7oC,IAAIopC,GACzB0E,IACIC,GAAkBR,GAAa9mB,gBAAgB7d,KAAKhE,GACpDghC,EAAS76B,KAAK2wB,IAAIkK,EAAQhhB,OAAOhgB,IAGjCmpC,GAAiB,MAGpB3E,GAAgB2E,GAAkBnI,EAAS,EAAIkI,EAAS,CAEzD,MAAME,EAAQ,GAEd,IAAK,MAAMppC,KAAOhG,EACdovC,EAAMppC,GAAOhG,EAAIgG,GAErB,OAAOopC,EAMP,OAHI5E,IAAiBtpC,KAAKgoC,cAAclD,YACpChmC,EAAI,aAAekB,KAAKgoC,cAAc9nC,OAEnCpB,EAIfq5B,OACI,GAAuB,OAAnBn4B,KAAKuoC,UAAoB,CACzB,IAAIiB,EAAS,GACRxpC,KAAKgoC,cAAclD,YACpB0E,GACI,YACI7B,GAAiB3nC,KAAKgoC,cAAc9nC,OACpC,KAEZF,KAAKqpC,aAAae,IAAgB,CAACtlC,EAAKikC,KACpC,MAAMoF,EAAYpF,EAAU5Q,OACV,KAAdgW,IACA3E,GAAU,IAAM1kC,EAAM,IAAMqpC,MAGpCnuC,KAAKuoC,UAAuB,KAAXiB,EAAgB,GAAKzlB,GAAKylB,GAE/C,OAAOxpC,KAAKuoC,UAGhBO,wBAAwBH,EAAWI,EAAWtoC,GAC1C,MAAM2tC,EAAMpuC,KAAKquC,cAAc5tC,GAC/B,GAAI2tC,EAAK,CACL,MAAME,EAAcF,EAAInH,kBAAkB,IAAI5D,GAAUsF,EAAWI,IACnE,OAAOuF,EAAcA,EAAYjrC,KAAO,KAGxC,OAAOrD,KAAK0tC,UAAUzG,kBAAkB0B,GAGhD4F,kBAAkB9B,GACd,MAAM2B,EAAMpuC,KAAKquC,cAAc5B,GAC/B,GAAI2B,EAAK,CACL,MAAMvI,EAASuI,EAAIvI,SACnB,OAAOA,GAAUA,EAAOxiC,KAGxB,OAAOrD,KAAK0tC,UAAU7H,SAG9B2I,cAAc/B,GACV,MAAM5G,EAAS7lC,KAAKuuC,kBAAkB9B,GACtC,OAAI5G,EACO,IAAIxC,GAAUwC,EAAQ7lC,KAAK0tC,UAAU3tC,IAAI8lC,IAGzC,KAMf4I,iBAAiBhC,GACb,MAAM2B,EAAMpuC,KAAKquC,cAAc5B,GAC/B,GAAI2B,EAAK,CACL,MAAMtI,EAASsI,EAAItI,SACnB,OAAOA,GAAUA,EAAOziC,KAGxB,OAAOrD,KAAK0tC,UAAU5H,SAG9B4I,aAAajC,GACT,MAAM3G,EAAS9lC,KAAKyuC,iBAAiBhC,GACrC,OAAI3G,EACO,IAAIzC,GAAUyC,EAAQ9lC,KAAK0tC,UAAU3tC,IAAI+lC,IAGzC,KAGfuD,aAAa5oC,EAAO69B,GAChB,MAAM8P,EAAMpuC,KAAKquC,cAAc5tC,GAC/B,OAAI2tC,EACOA,EAAI1I,kBAAiBiJ,GACjBrQ,EAAOqQ,EAAYtrC,KAAMsrC,EAAYrL,QAIzCtjC,KAAK0tC,UAAUhI,iBAAiBpH,GAG/C6I,YAAYsF,GACR,OAAOzsC,KAAKqnC,gBAAgBoF,EAAgB3I,UAAW2I,GAE3DpF,gBAAgBuH,EAAWnC,GACvB,MAAM2B,EAAMpuC,KAAKquC,cAAc5B,GAC/B,GAAI2B,EACA,OAAOA,EAAI/G,gBAAgBuH,GAAW9pC,GAAOA,IAE5C,CACD,MAAM+pC,EAAW7uC,KAAK0tC,UAAUrG,gBAAgBuH,EAAUvrC,KAAMggC,GAAUyJ,MAC1E,IAAIE,EAAO6B,EAAS1J,OACpB,KAAe,MAAR6H,GAAgBP,EAAgBjJ,QAAQwJ,EAAM4B,GAAa,GAC9DC,EAAS5J,UACT+H,EAAO6B,EAAS1J,OAEpB,OAAO0J,GAGftH,mBAAmBkF,GACf,OAAOzsC,KAAKsnC,uBAAuBmF,EAAgBtI,UAAWsI,GAElEnF,uBAAuBwH,EAASrC,GAC5B,MAAM2B,EAAMpuC,KAAKquC,cAAc5B,GAC/B,GAAI2B,EACA,OAAOA,EAAI9G,uBAAuBwH,GAAShqC,GAChCA,IAGV,CACD,MAAM+pC,EAAW7uC,KAAK0tC,UAAUpG,uBAAuBwH,EAAQzrC,KAAMggC,GAAUyJ,MAC/E,IAAIE,EAAO6B,EAAS1J,OACpB,KAAe,MAAR6H,GAAgBP,EAAgBjJ,QAAQwJ,EAAM8B,GAAW,GAC5DD,EAAS5J,UACT+H,EAAO6B,EAAS1J,OAEpB,OAAO0J,GAGfpF,UAAUnO,GACN,OAAIt7B,KAAK8kC,UACDxJ,EAAMwJ,UACC,GAGC,EAGPxJ,EAAMyM,cAAgBzM,EAAMwJ,UAC1B,EAEFxJ,IAAUyT,IACP,EAID,EAGf9E,UAAUwC,GACN,GAAIA,IAAoBnI,IACpBtkC,KAAK2tC,UAAUnB,SAASC,GACxB,OAAOzsC,KAEN,CACD,MAAM6tC,EAAc7tC,KAAK2tC,UAAUjB,SAASD,EAAiBzsC,KAAK0tC,WAClE,OAAO,IAAID,GAAaztC,KAAK0tC,UAAW1tC,KAAKsoC,cAAeuF,IAGpE3D,UAAUzpC,GACN,OAAOA,IAAU6jC,IAAatkC,KAAK2tC,UAAUnB,SAAS/rC,GAE1D0pC,OAAO7O,GACH,GAAIA,IAAUt7B,KACV,OAAO,EAEN,GAAIs7B,EAAMyM,aACX,OAAO,EAEN,CACD,MAAMiH,EAAoB1T,EAC1B,GAAKt7B,KAAKgoC,cAAcmC,OAAO6E,EAAkBhH,eAG5C,IAAIhoC,KAAK0tC,UAAU7qC,UAAYmsC,EAAkBtB,UAAU7qC,QAAS,CACrE,MAAMosC,EAAWjvC,KAAKmnC,YAAYiD,IAC5B8E,EAAYF,EAAkB7H,YAAYiD,IAChD,IAAI+E,EAAcF,EAAShK,UACvBmK,EAAeF,EAAUjK,UAC7B,KAAOkK,GAAeC,GAAc,CAChC,GAAID,EAAY9rC,OAAS+rC,EAAa/rC,OACjC8rC,EAAY7L,KAAK6G,OAAOiF,EAAa9L,MACtC,OAAO,EAEX6L,EAAcF,EAAShK,UACvBmK,EAAeF,EAAUjK,UAE7B,OAAuB,OAAhBkK,GAAyC,OAAjBC,EAG/B,OAAO,EAlBP,OAAO,GA2BnBf,cAAc5B,GACV,OAAIA,IAAoBnI,GACb,KAGAtkC,KAAK2tC,UAAU5tC,IAAI0sC,EAAgBrpB,aAItDqqB,GAAa9mB,gBAAkB,iBA8B/B,MAAMooB,GAAW,IA7BjB,cAAsBtB,GAClBv6B,cACIW,MAAM,IAAI0xB,GAAUkC,IAAkBgG,GAAajI,WAAY0G,GAASG,SAE5E5C,UAAUnO,GACN,OAAIA,IAAUt7B,KACH,EAGA,EAGfmqC,OAAO7O,GAEH,OAAOA,IAAUt7B,KAErBgoC,cACI,OAAOhoC,KAEX0oC,kBAAkBC,GACd,OAAO8E,GAAajI,WAExBV,UACI,OAAO,IA8Cf,SAASuK,GAAaC,EAAM1H,EAAW,MACnC,GAAa,OAAT0H,EACA,OAAO7B,GAAajI,WAaxB,GAXoB,iBAAT8J,GAAqB,cAAeA,IAC3C1H,EAAW0H,EAAK,cAEpB,EAAoB,OAAb1H,GACiB,iBAAbA,GACa,iBAAbA,GACc,iBAAbA,GAAyB,QAASA,EAAW,uCAAyCA,GAC9E,iBAAT0H,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACrDA,EAAOA,EAAK,WAGI,iBAATA,GAAqB,QAASA,EAErC,OAAO,IAAIlH,GADMkH,EACaD,GAAazH,IAE/C,GAAM0H,aAAgBtxC,MA2BjB,CACD,IAAIslC,EAAOmK,GAAajI,WAYxB,OAXA1f,GAAKwpB,GAAM,CAACxqC,EAAKyqC,KACb,GAAI,EAASD,EAAMxqC,IACa,MAAxBA,EAAIsE,UAAU,EAAG,GAAY,CAE7B,MAAM2/B,EAAYsG,GAAaE,IAC3BxG,EAAUhB,cAAiBgB,EAAUjE,YACrCxB,EAAOA,EAAK0F,qBAAqBlkC,EAAKikC,QAK/CzF,EAAKkF,eAAe6G,GAAazH,IAxCD,CACvC,MAAM/5B,EAAW,GACjB,IAAI2hC,GAAuB,EAa3B,GAXA1pB,GADqBwpB,GACF,CAACxqC,EAAK8oC,KACrB,GAA4B,MAAxB9oC,EAAIsE,UAAU,EAAG,GAAY,CAE7B,MAAM2/B,EAAYsG,GAAazB,GAC1B7E,EAAUjE,YACX0K,EACIA,IAAyBzG,EAAUf,cAAclD,UACrDj3B,EAAS5K,KAAK,IAAIogC,GAAUv+B,EAAKikC,SAIrB,IAApBl7B,EAASpL,OACT,OAAOgrC,GAAajI,WAExB,MAAMiK,EAAW1E,GAAcl9B,EAAU25B,IAAsB6D,GAAaA,EAAUhoC,MAAMokC,IAC5F,GAAI+H,EAAsB,CACtB,MAAME,EAAiB3E,GAAcl9B,EAAUu8B,GAAe7G,cAC9D,OAAO,IAAIkK,GAAagC,EAAUJ,GAAazH,GAAW,IAAIsE,GAAS,CAAE,YAAawD,GAAkB,CAAE,YAAatF,MAGvH,OAAO,IAAIqD,GAAagC,EAAUJ,GAAazH,GAAWsE,GAASG,UAlF/ExsC,OAAOyE,iBAAiB++B,GAAW,CAC/BU,IAAK,CACD1kC,MAAO,IAAIgkC,GAAUpe,GAAUwoB,GAAajI,aAEhDmK,IAAK,CACDtwC,MAAO,IAAIgkC,GAAUne,GAAU6pB,OAMvC9K,GAASD,aAAeyJ,GAAajI,WACrC4C,GAASH,0BAA4BwF,GAx9BjC/F,GAy9BSqH,GAjsBT5G,GAksBO4G,GAtsBX,SAAyB7uC,GACrBgoC,GAAiBhoC,EA4xBrB0vC,CAAgBP,IAkBhB,MAAMQ,WAAkBrvC,GACpB0S,YAAY48B,GACRj8B,QACA7T,KAAK8vC,WAAaA,EAClB,GAAQ/U,GAAY+U,IAA4C,cAA7B1V,GAAa0V,GAA6B,2DAEjFC,aAAaC,GACT,OAAOA,EAAKpH,SAAS5oC,KAAK8vC,YAE9B5L,YAAYZ,GACR,OAAQA,EAAKsF,SAAS5oC,KAAK8vC,YAAYhL,UAE3CtB,QAAQp0B,EAAGuG,GACP,MAAMs6B,EAASjwC,KAAK+vC,aAAa3gC,EAAEk0B,MAC7B4M,EAASlwC,KAAK+vC,aAAap6B,EAAE2tB,MAC7BiH,EAAW0F,EAAOxG,UAAUyG,GAClC,OAAiB,IAAb3F,EACOplB,GAAY/V,EAAE/L,KAAMsS,EAAEtS,MAGtBknC,EAGfnG,SAASC,EAAYhhC,GACjB,MAAM8sC,EAAYd,GAAahL,GACzBf,EAAOmK,GAAajI,WAAW0D,YAAYlpC,KAAK8vC,WAAYK,GAClE,OAAO,IAAI9M,GAAUhgC,EAAMigC,GAE/Ba,UACI,MAAMb,EAAOmK,GAAajI,WAAW0D,YAAYlpC,KAAK8vC,WAAYf,IAClE,OAAO,IAAI1L,GAAUne,GAAUoe,GAEnClgB,WACI,OAAOqX,GAAUz6B,KAAK8vC,WAAY,GAAGl+B,KAAK,MAuDlD,MAAMw+B,GAAc,IAnCpB,cAAyB5vC,GACrBgjC,QAAQp0B,EAAGuG,GACP,MAAM40B,EAAWn7B,EAAEk0B,KAAKmG,UAAU9zB,EAAE2tB,MACpC,OAAiB,IAAbiH,EACOplB,GAAY/V,EAAE/L,KAAMsS,EAAEtS,MAGtBknC,EAGfrG,YAAYZ,GACR,OAAO,EAEXG,oBAAoBC,EAASC,GACzB,OAAQD,EAAQyG,OAAOxG,GAE3BG,UAEI,OAAOT,GAAUU,IAErBI,UAEI,OAAOd,GAAUsM,IAErBvL,SAASC,EAAYhhC,GACjB,MAAM8sC,EAAYd,GAAahL,GAC/B,OAAO,IAAIhB,GAAUhgC,EAAM8sC,GAK/B/sB,WACI,MAAO,WAiLf,SAASitB,GAAmB1H,EAAW2H,EAAcC,GACjD,MAAO,CACHliC,KAAM,gBACNiiC,aAAAA,EACA3H,UAAAA,EACA4H,QAAAA,GA4bR,MAAMC,GACFt9B,cACIlT,KAAKywC,WAAY,EACjBzwC,KAAK0wC,WAAY,EACjB1wC,KAAK2wC,eAAgB,EACrB3wC,KAAK4wC,gBAAiB,EACtB5wC,KAAK6wC,SAAU,EACf7wC,KAAK8wC,aAAc,EACnB9wC,KAAK+wC,eAAgB,EACrB/wC,KAAKgxC,OAAS,EACdhxC,KAAKixC,UAAY,GACjBjxC,KAAKkxC,iBAAmB,KACxBlxC,KAAKmxC,gBAAkB,GACvBnxC,KAAKoxC,eAAiB,KACtBpxC,KAAKqxC,cAAgB,GACrBrxC,KAAKsxC,OAASlH,GAElBmH,WACI,OAAOvxC,KAAK0wC,UAEhBc,gBACI,OAAOxxC,KAAK4wC,eAEhBa,eACI,OAAOzxC,KAAK+wC,cAKhBW,iBACI,MAAuB,KAAnB1xC,KAAKixC,UAKEjxC,KAAK0wC,UAGc,MAAnB1wC,KAAKixC,UAMpBU,qBAEI,OADA,EAAO3xC,KAAK0wC,UAAW,oCAChB1wC,KAAKkxC,iBAMhBU,oBAEI,OADA,EAAO5xC,KAAK0wC,UAAW,oCACnB1wC,KAAK2wC,cACE3wC,KAAKmxC,gBAGLlsB,GAGf4sB,SACI,OAAO7xC,KAAK6wC,QAKhBiB,mBAEI,OADA,EAAO9xC,KAAK6wC,QAAS,kCACd7wC,KAAKoxC,eAMhBW,kBAEI,OADA,EAAO/xC,KAAK6wC,QAAS,kCACjB7wC,KAAK8wC,YACE9wC,KAAKqxC,cAGLnsB,GAGf8sB,WACI,OAAOhyC,KAAKywC,UAKhBwB,mBACI,OAAOjyC,KAAKywC,WAAgC,KAAnBzwC,KAAKixC,UAKlCiB,WAEI,OADA,EAAOlyC,KAAKywC,UAAW,oCAChBzwC,KAAKgxC,OAEhBhR,WACI,OAAOhgC,KAAKsxC,OAEhB/R,eACI,QAASv/B,KAAK0wC,WAAa1wC,KAAK6wC,SAAW7wC,KAAKywC,WAEpDnR,YACI,OAAOt/B,KAAKu/B,gBAAkBv/B,KAAKsxC,SAAWlH,GAElD3E,OACI,MAAMA,EAAO,IAAI+K,GAajB,OAZA/K,EAAKgL,UAAYzwC,KAAKywC,UACtBhL,EAAKuL,OAAShxC,KAAKgxC,OACnBvL,EAAKiL,UAAY1wC,KAAK0wC,UACtBjL,EAAKyL,iBAAmBlxC,KAAKkxC,iBAC7BzL,EAAKkL,cAAgB3wC,KAAK2wC,cAC1BlL,EAAK0L,gBAAkBnxC,KAAKmxC,gBAC5B1L,EAAKoL,QAAU7wC,KAAK6wC,QACpBpL,EAAK2L,eAAiBpxC,KAAKoxC,eAC3B3L,EAAKqL,YAAc9wC,KAAK8wC,YACxBrL,EAAK4L,cAAgBrxC,KAAKqxC,cAC1B5L,EAAK6L,OAAStxC,KAAKsxC,OACnB7L,EAAKwL,UAAYjxC,KAAKixC,UACfxL,GAkHf,SAAS0M,GAAuCC,GAC5C,MAAMC,EAAK,GACX,GAAID,EAAY9S,YACZ,OAAO+S,EAEX,IAAIC,EAqCJ,OApCIF,EAAYd,SAAWlH,GACvBkI,EAAU,YAELF,EAAYd,SAAWlB,GAC5BkC,EAAU,SAELF,EAAYd,SAAWhN,GAC5BgO,EAAU,QAGV,EAAOF,EAAYd,kBAAkBzB,GAAW,4BAChDyC,EAAUF,EAAYd,OAAOluB,YAEjCivB,EAA2B,QAAI,EAAUC,GACrCF,EAAY1B,YACZ2B,EAA2B,QAAI,EAAUD,EAAYlB,kBACjDkB,EAAYzB,gBACZ0B,EAA2B,SACvB,IAAM,EAAUD,EAAYjB,mBAGpCiB,EAAYvB,UACZwB,EAAuB,MAAI,EAAUD,EAAYhB,gBAC7CgB,EAAYtB,cACZuB,EAAuB,OACnB,IAAM,EAAUD,EAAYf,iBAGpCe,EAAY3B,YACR2B,EAAYV,iBACZW,EAAsC,aAAID,EAAYpB,OAGtDqB,EAAoC,YAAID,EAAYpB,QAGrDqB,EAEX,SAASE,GAA0BH,GAC/B,MAAMtzC,EAAM,GAeZ,GAdIszC,EAAY1B,YACZ5xC,EAAgC,GAC5BszC,EAAYlB,iBACZkB,EAAYzB,gBACZ7xC,EAA+B,GAC3BszC,EAAYjB,kBAGpBiB,EAAYvB,UACZ/xC,EAA8B,GAAIszC,EAAYhB,eAC1CgB,EAAYtB,cACZhyC,EAA6B,GAAIszC,EAAYf,gBAGjDe,EAAY3B,UAAW,CACvB3xC,EAAmB,EAAIszC,EAAYpB,OACnC,IAAIwB,EAAWJ,EAAYnB,UACV,KAAbuB,IAEIA,EADAJ,EAAYV,iBACD,IAGA,KAGnB5yC,EAAwB,GAAI0zC,EAMhC,OAHIJ,EAAYd,SAAWlH,KACvBtrC,EAAmB,EAAIszC,EAAYd,OAAOluB,YAEvCtkB,EAwBX,MAAM2zC,WAA2Bxa,GAK7B/kB,YAAYmhB,EAAWkI,EAAeG,EAAoBC,GACtD9oB,QACA7T,KAAKq0B,UAAYA,EACjBr0B,KAAKu8B,cAAgBA,EACrBv8B,KAAK08B,mBAAqBA,EAC1B18B,KAAK28B,uBAAyBA,EAE9B38B,KAAK+rB,KAAOrH,GAAW,WAKvB1kB,KAAK0yC,SAAW,GAEpBha,YAAYC,GACR,MAAM,IAAI7oB,MAAM,2BAEpBqe,oBAAoBvrB,EAAOs8B,GACvB,YAAYh8B,IAARg8B,EACO,OAASA,GAGhB,EAAOt8B,EAAMy8B,aAAaC,YAAa,kDAChC18B,EAAM+7B,MAAMvb,YAI3B4b,OAAOp8B,EAAOq8B,EAAeC,EAAKv0B,GAC9B,MAAMutB,EAAat1B,EAAM+7B,MAAMvb,WAC/BpjB,KAAK+rB,KAAK,qBAAuBmM,EAAa,IAAMt1B,EAAMw8B,kBAE1D,MAAMuT,EAAWF,GAAmBG,aAAahwC,EAAOs8B,GAClD2T,EAAa,GACnB7yC,KAAK0yC,SAASC,GAAYE,EAC1B,MAAMC,EAAwBX,GAAuCvvC,EAAMy8B,cAC3Er/B,KAAK+yC,aAAa7a,EAAa,QAAS4a,GAAuB,CAACl0C,EAAOF,KACnE,IAAI2V,EAAO3V,EAQX,GAPc,MAAVE,IACAyV,EAAO,KACPzV,EAAQ,MAEE,OAAVA,GACAoB,KAAKu8B,cAAcrE,EAAY7jB,GAAmB,EAAO6qB,GAEzD,EAAQl/B,KAAK0yC,SAAUC,KAAcE,EAAY,CACjD,IAAIjtC,EAKAA,EAJChH,EAGc,MAAVA,EACI,oBAGA,cAAgBA,EANhB,KAQb+L,EAAW/E,EAAQ,UAK/Bi7B,SAASj+B,EAAOs8B,GACZ,MAAMyT,EAAWF,GAAmBG,aAAahwC,EAAOs8B,UACjDl/B,KAAK0yC,SAASC,GAEzB5yC,IAAI6C,GACA,MAAMkwC,EAAwBX,GAAuCvvC,EAAMy8B,cACrEnH,EAAat1B,EAAM+7B,MAAMvb,WACzB/J,EAAW,IAAI,EAiBrB,OAhBArZ,KAAK+yC,aAAa7a,EAAa,QAAS4a,GAAuB,CAACl0C,EAAOF,KACnE,IAAI2V,EAAO3V,EACG,MAAVE,IACAyV,EAAO,KACPzV,EAAQ,MAEE,OAAVA,GACAoB,KAAKu8B,cAAcrE,EAAY7jB,GAClB,EACJ,MACTgF,EAAS9a,QAAQ8V,IAGjBgF,EAAS7a,OAAO,IAAIsR,MAAMuE,OAG3BgF,EAAShG,QAGpBglB,iBAAiBpjB,IAOjB89B,aAAa7a,EAAY4a,EAAwB,GAAItwC,GAEjD,OADAswC,EAA8B,OAAI,SAC3Bx0C,QAAQkc,IAAI,CACfxa,KAAK08B,mBAAmBpV,UAA2B,GACnDtnB,KAAK28B,uBAAuBrV,UAA2B,KACxDnoB,MAAK,EAAEssB,EAAWD,MACbC,GAAaA,EAAUnD,cACvBwqB,EAA4B,KAAIrnB,EAAUnD,aAE1CkD,GAAiBA,EAAcvW,QAC/B69B,EAA0B,GAAItnB,EAAcvW,OAEhD,MAAM+b,GAAOhxB,KAAKq0B,UAAUxL,OAAS,WAAa,WAC9C7oB,KAAKq0B,UAAUzL,KACfsP,EAFQ,OAKRl4B,KAAKq0B,UAAUvL,ULt0L/B,SAAqBkqB,GACjB,MAAMlpB,EAAS,GACf,IAAK,MAAOhlB,EAAKzF,KAAUQ,OAAOoa,QAAQ+4B,GAClCh1C,MAAM+S,QAAQ1R,GACdA,EAAMM,SAAQszC,IACVnpB,EAAO7mB,KAAKiwC,mBAAmBpuC,GAAO,IAAMouC,mBAAmBD,OAInEnpB,EAAO7mB,KAAKiwC,mBAAmBpuC,GAAO,IAAMouC,mBAAmB7zC,IAGvE,OAAOyqB,EAAOrnB,OAAS,IAAMqnB,EAAOlY,KAAK,KAAO,GK2zLpCuhC,CAAYL,GAChB9yC,KAAK+rB,KAAK,4BAA8BiF,GACxC,MAAMoiB,EAAM,IAAIC,eAChBD,EAAI7hB,mBAAqB,KACrB,GAAI/uB,GAA+B,IAAnB4wC,EAAI1mB,WAAkB,CAClC1sB,KAAK+rB,KAAK,qBAAuBiF,EAAM,qBAAsBoiB,EAAIxtC,OAAQ,YAAawtC,EAAIE,cAC1F,IAAI79B,EAAM,KACV,GAAI29B,EAAIxtC,QAAU,KAAOwtC,EAAIxtC,OAAS,IAAK,CACvC,IACI6P,EAAMb,EAASw+B,EAAIE,cAEvB,MAAOpnC,GACHoR,GAAK,qCACD0T,EACA,KACAoiB,EAAIE,cAEZ9wC,EAAS,KAAMiT,QAII,MAAf29B,EAAIxtC,QAAiC,MAAfwtC,EAAIxtC,QAC1B0X,GAAK,sCACD0T,EACA,YACAoiB,EAAIxtC,QAEZpD,EAAS4wC,EAAIxtC,QAEjBpD,EAAW,OAGnB4wC,EAAIhxB,KAAK,MAAO4O,GAAuB,GACvCoiB,EAAIxkB,WAwBhB,MAAM2kB,GACFrgC,cACIlT,KAAKwzC,UAAY/F,GAAajI,WAElCiO,QAAQpZ,GACJ,OAAOr6B,KAAKwzC,UAAU5K,SAASvO,GAEnCqZ,eAAerZ,EAAMsZ,GACjB3zC,KAAKwzC,UAAYxzC,KAAKwzC,UAAUtK,YAAY7O,EAAMsZ,IAoB1D,SAASC,KACL,MAAO,CACHv0C,MAAO,KACPwO,SAAU,IAAIgL,KAUtB,SAASg7B,GAA2BC,EAAoBzZ,EAAMhmB,GAC1D,GAAI0mB,GAAYV,GACZyZ,EAAmBz0C,MAAQgV,EAC3By/B,EAAmBjmC,SAASkmC,aAE3B,GAAiC,OAA7BD,EAAmBz0C,MACxBy0C,EAAmBz0C,MAAQy0C,EAAmBz0C,MAAM6pC,YAAY7O,EAAMhmB,OAErE,CACD,MAAM2/B,EAAW5Z,GAAaC,GACzByZ,EAAmBjmC,SAASuL,IAAI46B,IACjCF,EAAmBjmC,SAAS5N,IAAI+zC,EAAUJ,MAI9CC,GAFcC,EAAmBjmC,SAAS9N,IAAIi0C,GAC9C3Z,EAAOE,GAAaF,GACoBhmB,IAqDhD,SAAS4/B,GAA8BH,EAAoBI,EAAYC,GAClC,OAA7BL,EAAmBz0C,MACnB80C,EAAKD,EAAYJ,EAAmBz0C,OAe5C,SAAwCy0C,EAAoBK,GACxDL,EAAmBjmC,SAASlO,SAAQ,CAACy0C,EAAMtvC,KACvCqvC,EAAKrvC,EAAKsvC,MAdVC,CAA+BP,GAAoB,CAAChvC,EAAKsvC,KAErDH,GAA8BG,EADjB,IAAIva,GAAKqa,EAAW9wB,WAAa,IAAMte,GACVqvC,MAqCtD,MAAMG,GACFphC,YAAYqhC,GACRv0C,KAAKu0C,YAAcA,EACnBv0C,KAAKw0C,MAAQ,KAEjBz0C,MACI,MAAM00C,EAAWz0C,KAAKu0C,YAAYx0C,MAC5B+iC,EAAQjjC,OAAO6M,OAAO,GAAI+nC,GAOhC,OANIz0C,KAAKw0C,OACL1uB,GAAK9lB,KAAKw0C,OAAO,CAACE,EAAMr1C,KACpByjC,EAAM4R,GAAQ5R,EAAM4R,GAAQr1C,KAGpCW,KAAKw0C,MAAQC,EACN3R,GA2Bf,MAAM6R,GACFzhC,YAAY0hC,EAAYC,GACpB70C,KAAK60C,QAAUA,EACf70C,KAAK80C,eAAiB,GACtB90C,KAAK+0C,eAAiB,IAAIT,GAAcM,GACxC,MAAMhuC,EATe,IAUjB,IAAgDqE,KAAKE,SACzD6b,GAAsBhnB,KAAKg1C,aAAavwB,KAAKzkB,MAAOiL,KAAKob,MAAMzf,IAEnEouC,eACI,MAAMrc,EAAQ34B,KAAK+0C,eAAeh1C,MAC5Bk1C,EAAgB,GACtB,IAAIC,GAAoB,EACxBpvB,GAAK6S,GAAO,CAAC+b,EAAMr1C,KACXA,EAAQ,GAAK,EAASW,KAAK80C,eAAgBJ,KAC3CO,EAAcP,GAAQr1C,EACtB61C,GAAoB,MAGxBA,GACAl1C,KAAK60C,QAAQnc,YAAYuc,GAG7BjuB,GAAsBhnB,KAAKg1C,aAAavwB,KAAKzkB,MAAOiL,KAAKob,MAAsB,EAAhBpb,KAAKE,SAxB9C,OAgD9B,IAAIgqC,GAuBJ,SAASC,GAAoCjW,GACzC,MAAO,CACHkW,UAAU,EACVC,YAAY,EACZnW,QAAAA,EACAoW,QAAQ,IA3BhB,SAAWJ,GACPA,EAAcA,EAAyB,UAAI,GAAK,YAChDA,EAAcA,EAAqB,MAAI,GAAK,QAC5CA,EAAcA,EAA8B,eAAI,GAAK,iBACrDA,EAAcA,EAA+B,gBAAI,GAAK,kBAJ1D,CAKGA,KAAkBA,GAAgB,KA0CrC,MAAMK,GAIFtiC,YACmBmnB,EACAob,EACAC,GACf11C,KAAKq6B,KAAOA,EACZr6B,KAAKy1C,aAAeA,EACpBz1C,KAAK01C,OAASA,EAEd11C,KAAKqO,KAAO8mC,GAAcQ,eAE1B31C,KAAK2M,OAtDF,CACH0oC,UAAU,EACVC,YAAY,EACZnW,QAAS,KACToW,QAAQ,GAoDZK,kBAAkBjN,GACd,GAAK5N,GAAY/6B,KAAKq6B,MAIjB,IAA+B,MAA3Br6B,KAAKy1C,aAAap2C,MAGvB,OAFA,EAAOW,KAAKy1C,aAAa5nC,SAASi3B,UAAW,4DAEtC9kC,KAEN,CACD,MAAM2rC,EAAY3rC,KAAKy1C,aAAaI,QAAQ,IAAIhc,GAAK8O,IACrD,OAAO,IAAI6M,GAAarb,KAAgBwR,EAAW3rC,KAAK01C,SATxD,OADA,EAAOtb,GAAap6B,KAAKq6B,QAAUsO,EAAW,iDACvC,IAAI6M,GAAajb,GAAav6B,KAAKq6B,MAAOr6B,KAAKy1C,aAAcz1C,KAAK01C,SA+DrF,MAAMI,GACF5iC,YAAYvG,EAAQ0tB,EAAM2V,GACtBhwC,KAAK2M,OAASA,EACd3M,KAAKq6B,KAAOA,EACZr6B,KAAKgwC,KAAOA,EAEZhwC,KAAKqO,KAAO8mC,GAAcY,UAE9BH,kBAAkBjN,GACd,OAAI5N,GAAY/6B,KAAKq6B,MACV,IAAIyb,GAAU91C,KAAK2M,OAAQwtB,KAAgBn6B,KAAKgwC,KAAKtH,kBAAkBC,IAGvE,IAAImN,GAAU91C,KAAK2M,OAAQ4tB,GAAav6B,KAAKq6B,MAAOr6B,KAAKgwC,OAqB5E,MAAMgG,GACF9iC,YACmBvG,EACA0tB,EACAxsB,GACf7N,KAAK2M,OAASA,EACd3M,KAAKq6B,KAAOA,EACZr6B,KAAK6N,SAAWA,EAEhB7N,KAAKqO,KAAO8mC,GAAcc,MAE9BL,kBAAkBjN,GACd,GAAI5N,GAAY/6B,KAAKq6B,MAAO,CACxB,MAAMsR,EAAY3rC,KAAK6N,SAASgoC,QAAQ,IAAIhc,GAAK8O,IACjD,OAAIgD,EAAU7G,UAEH,KAEF6G,EAAUtsC,MAER,IAAIy2C,GAAU91C,KAAK2M,OAAQwtB,KAAgBwR,EAAUtsC,OAIrD,IAAI22C,GAAMh2C,KAAK2M,OAAQwtB,KAAgBwR,GAKlD,OADA,EAAOvR,GAAap6B,KAAKq6B,QAAUsO,EAAW,kEACvC,IAAIqN,GAAMh2C,KAAK2M,OAAQ4tB,GAAav6B,KAAKq6B,MAAOr6B,KAAK6N,UAGpEuV,WACI,MAAQ,aACJpjB,KAAKq6B,KACL,KACAr6B,KAAK2M,OAAOyW,WACZ,WACApjB,KAAK6N,SAASuV,WACd,KA0BZ,MAAM8yB,GACFhjC,YAAYijC,EAAOC,EAAmBC,GAClCr2C,KAAKm2C,MAAQA,EACbn2C,KAAKo2C,kBAAoBA,EACzBp2C,KAAKq2C,UAAYA,EAKrBC,qBACI,OAAOt2C,KAAKo2C,kBAKhBG,aACI,OAAOv2C,KAAKq2C,UAEhBG,kBAAkBnc,GACd,GAAIU,GAAYV,GACZ,OAAOr6B,KAAKs2C,uBAAyBt2C,KAAKq2C,UAE9C,MAAMrC,EAAW5Z,GAAaC,GAC9B,OAAOr6B,KAAKy2C,mBAAmBzC,GAEnCyC,mBAAmB3xC,GACf,OAAS9E,KAAKs2C,uBAAyBt2C,KAAKq2C,WAAcr2C,KAAKm2C,MAAMtN,SAAS/jC,GAElF2uC,UACI,OAAOzzC,KAAKm2C,OA4DpB,SAASO,GAAoCC,EAAgBC,EAAQ5d,EAAW6d,EAASC,EAAeC,GACpG,MAAMC,EAAkBH,EAAQp8B,QAAOw8B,GAAUA,EAAO5oC,OAAS2qB,IACjEge,EAAgB3rC,MAAK,CAAC+D,EAAGuG,IAmB7B,SAAsCghC,EAAgBvnC,EAAGuG,GACrD,GAAmB,MAAfvG,EAAEu5B,WAAoC,MAAfhzB,EAAEgzB,UACzB,MAAM94B,EAAe,sCAEzB,MAAMqnC,EAAW,IAAI7T,GAAUj0B,EAAEu5B,UAAWv5B,EAAEkhC,cACxC6G,EAAW,IAAI9T,GAAU1tB,EAAEgzB,UAAWhzB,EAAE26B,cAC9C,OAAOqG,EAAerF,OAAO9N,QAAQ0T,EAAUC,GAzBhBC,CAA6BT,EAAgBvnC,EAAGuG,KAC/EqhC,EAAgBr3C,SAAQs3C,IACpB,MAAMI,EAQd,SAA+CV,EAAgBM,EAAQF,GACnE,MAAoB,UAAhBE,EAAO5oC,MAAoC,kBAAhB4oC,EAAO5oC,OAIlC4oC,EAAOK,SAAWP,EAAWjO,wBAAwBmO,EAAOtO,UAAWsO,EAAO3G,aAAcqG,EAAerF,SAHpG2F,EAVoBM,CAAsCZ,EAAgBM,EAAQF,GACzFD,EAAcn3C,SAAQ63C,IACdA,EAAaC,WAAWR,EAAO5oC,OAC/BuoC,EAAO3zC,KAAKu0C,EAAaE,YAAYL,EAAoBV,EAAegB,eAuCxF,SAASC,GAAab,EAAYc,GAC9B,MAAO,CAAEd,WAAAA,EAAYc,YAAAA,GAEzB,SAASC,GAAyBC,EAAWC,EAAW52C,EAAU62C,GAC9D,OAAOL,GAAa,IAAI1B,GAAU8B,EAAW52C,EAAU62C,GAAWF,EAAUF,aAEhF,SAASK,GAA0BH,EAAWI,EAAY/2C,EAAU62C,GAChE,OAAOL,GAAaG,EAAUhB,WAAY,IAAIb,GAAUiC,EAAY/2C,EAAU62C,IAElF,SAASG,GAA8BL,GACnC,OAAOA,EAAUhB,WAAWT,qBACtByB,EAAUhB,WAAWtD,UACrB,KAEV,SAAS4E,GAA+BN,GACpC,OAAOA,EAAUF,YAAYvB,qBACvByB,EAAUF,YAAYpE,UACtB,KAmBV,IAAI6E,GAcJ,MAAMC,GACFrlC,YAAY7T,EAAOwO,EAVD,MACbyqC,KACDA,GAAyB,IAAI/S,GAAUhgB,KAEpC+yB,IAMuBE,IAC1Bx4C,KAAKX,MAAQA,EACbW,KAAK6N,SAAWA,EAEpBsgB,kBAAkBrvB,GACd,IAAIs1C,EAAO,IAAImE,GAAc,MAI7B,OAHAzyB,GAAKhnB,GAAK,CAAC25C,EAAWC,KAClBtE,EAAOA,EAAKn0C,IAAI,IAAI45B,GAAK4e,GAAYC,MAElCtE,EAKXtP,UACI,OAAsB,OAAf9kC,KAAKX,OAAkBW,KAAK6N,SAASi3B,UAYhD6T,iCAAiCC,EAAcC,GAC3C,GAAkB,MAAd74C,KAAKX,OAAiBw5C,EAAU74C,KAAKX,OACrC,MAAO,CAAEg7B,KAAMF,KAAgB96B,MAAOW,KAAKX,OAG3C,GAAI07B,GAAY6d,GACZ,OAAO,KAEN,CACD,MAAMzP,EAAQ/O,GAAawe,GACrBhL,EAAQ5tC,KAAK6N,SAAS9N,IAAIopC,GAChC,GAAc,OAAVyE,EAAgB,CAChB,MAAMkL,EAA4BlL,EAAM+K,iCAAiCpe,GAAaqe,GAAeC,GACrG,OAAiC,MAA7BC,EAEO,CAAEze,KADQO,GAAU,IAAIf,GAAKsP,GAAQ2P,EAA0Bze,MAC7Ch7B,MAAOy5C,EAA0Bz5C,OAGnD,KAIX,OAAO,MASvB05C,yBAAyBH,GACrB,OAAO54C,KAAK24C,iCAAiCC,GAAc,KAAM,IAKrE/C,QAAQ+C,GACJ,GAAI7d,GAAY6d,GACZ,OAAO54C,KAEN,CACD,MAAMmpC,EAAQ/O,GAAawe,GACrBjN,EAAY3rC,KAAK6N,SAAS9N,IAAIopC,GACpC,OAAkB,OAAdwC,EACOA,EAAUkK,QAAQtb,GAAaqe,IAG/B,IAAIL,GAAc,OAWrCt4C,IAAI24C,EAAcI,GACd,GAAIje,GAAY6d,GACZ,OAAO,IAAIL,GAAcS,EAAOh5C,KAAK6N,UAEpC,CACD,MAAMs7B,EAAQ/O,GAAawe,GAErBK,GADQj5C,KAAK6N,SAAS9N,IAAIopC,IAAU,IAAIoP,GAAc,OACrCt4C,IAAIs6B,GAAaqe,GAAeI,GACjDzL,EAAcvtC,KAAK6N,SAASk4B,OAAOoD,EAAO8P,GAChD,OAAO,IAAIV,GAAcv4C,KAAKX,MAAOkuC,IAS7CnlC,OAAOwwC,GACH,GAAI7d,GAAY6d,GACZ,OAAI54C,KAAK6N,SAASi3B,UACP,IAAIyT,GAAc,MAGlB,IAAIA,GAAc,KAAMv4C,KAAK6N,UAGvC,CACD,MAAMs7B,EAAQ/O,GAAawe,GACrBhL,EAAQ5tC,KAAK6N,SAAS9N,IAAIopC,GAChC,GAAIyE,EAAO,CACP,MAAMqL,EAAWrL,EAAMxlC,OAAOmyB,GAAaqe,IAC3C,IAAIrL,EAOJ,OALIA,EADA0L,EAASnU,UACK9kC,KAAK6N,SAASzF,OAAO+gC,GAGrBnpC,KAAK6N,SAASk4B,OAAOoD,EAAO8P,GAE3B,OAAfj5C,KAAKX,OAAkBkuC,EAAYzI,UAC5B,IAAIyT,GAAc,MAGlB,IAAIA,GAAcv4C,KAAKX,MAAOkuC,GAIzC,OAAOvtC,MAUnBD,IAAI64C,GACA,GAAI7d,GAAY6d,GACZ,OAAO54C,KAAKX,MAEX,CACD,MAAM8pC,EAAQ/O,GAAawe,GACrBhL,EAAQ5tC,KAAK6N,SAAS9N,IAAIopC,GAChC,OAAIyE,EACOA,EAAM7tC,IAAIw6B,GAAaqe,IAGvB,MAWnBM,QAAQN,EAAcO,GAClB,GAAIpe,GAAY6d,GACZ,OAAOO,EAEN,CACD,MAAMhQ,EAAQ/O,GAAawe,GAErBK,GADQj5C,KAAK6N,SAAS9N,IAAIopC,IAAU,IAAIoP,GAAc,OACrCW,QAAQ3e,GAAaqe,GAAeO,GAC3D,IAAI5L,EAOJ,OALIA,EADA0L,EAASnU,UACK9kC,KAAK6N,SAASzF,OAAO+gC,GAGrBnpC,KAAK6N,SAASk4B,OAAOoD,EAAO8P,GAEvC,IAAIV,GAAcv4C,KAAKX,MAAOkuC,IAQ7C6L,KAAK7jC,GACD,OAAOvV,KAAKq5C,MAAMlf,KAAgB5kB,GAKtC8jC,MAAMC,EAAW/jC,GACb,MAAMgkC,EAAQ,GAId,OAHAv5C,KAAK6N,SAAS63B,kBAAiB,CAACsO,EAAUrI,KACtC4N,EAAMvF,GAAYrI,EAAU0N,MAAMze,GAAU0e,EAAWtF,GAAWz+B,MAE/DA,EAAG+jC,EAAWt5C,KAAKX,MAAOk6C,GAKrCC,WAAWnf,EAAMnjB,GACb,OAAOlX,KAAKy5C,YAAYpf,EAAMF,KAAgBjjB,GAElDuiC,YAAYC,EAAcJ,EAAWpiC,GACjC,MAAMxY,IAASsB,KAAKX,OAAQ6X,EAAEoiC,EAAWt5C,KAAKX,OAC9C,GAAIX,EACA,OAAOA,EAGP,GAAIq8B,GAAY2e,GACZ,OAAO,KAEN,CACD,MAAMvQ,EAAQ/O,GAAasf,GACrBC,EAAY35C,KAAK6N,SAAS9N,IAAIopC,GACpC,OAAIwQ,EACOA,EAAUF,YAAYlf,GAAamf,GAAe9e,GAAU0e,EAAWnQ,GAAQjyB,GAG/E,MAKvB0iC,cAAcvf,EAAMnjB,GAChB,OAAOlX,KAAK65C,eAAexf,EAAMF,KAAgBjjB,GAErD2iC,eAAeH,EAAcI,EAAqB5iC,GAC9C,GAAI6jB,GAAY2e,GACZ,OAAO15C,KAEN,CACGA,KAAKX,OACL6X,EAAE4iC,EAAqB95C,KAAKX,OAEhC,MAAM8pC,EAAQ/O,GAAasf,GACrBC,EAAY35C,KAAK6N,SAAS9N,IAAIopC,GACpC,OAAIwQ,EACOA,EAAUE,eAAetf,GAAamf,GAAe9e,GAAUkf,EAAqB3Q,GAAQjyB,GAG5F,IAAIqhC,GAAc,OAUrCwB,QAAQ7iC,GACJlX,KAAKg6C,SAAS7f,KAAgBjjB,GAElC8iC,SAASF,EAAqB5iC,GAC1BlX,KAAK6N,SAAS63B,kBAAiB,CAACiD,EAAWgD,KACvCA,EAAUqO,SAASpf,GAAUkf,EAAqBnR,GAAYzxB,MAE9DlX,KAAKX,OACL6X,EAAE4iC,EAAqB95C,KAAKX,OAGpC46C,aAAa/iC,GACTlX,KAAK6N,SAAS63B,kBAAiB,CAACiD,EAAWgD,KACnCA,EAAUtsC,OACV6X,EAAEyxB,EAAWgD,EAAUtsC,WA4BvC,MAAM66C,GACFhnC,YAAYinC,GACRn6C,KAAKm6C,WAAaA,EAEtBhsB,eACI,OAAO,IAAI+rB,GAAc,IAAI3B,GAAc,QAGnD,SAAS6B,GAAsBC,EAAehgB,EAAMiJ,GAChD,GAAIvI,GAAYV,GACZ,OAAO,IAAI6f,GAAc,IAAI3B,GAAcjV,IAE1C,CACD,MAAMgX,EAAWD,EAAcF,WAAWpB,yBAAyB1e,GACnE,GAAgB,MAAZigB,EAAkB,CAClB,MAAMC,EAAeD,EAASjgB,KAC9B,IAAIh7B,EAAQi7C,EAASj7C,MACrB,MAAMu5C,EAAe5d,GAAgBuf,EAAclgB,GAEnD,OADAh7B,EAAQA,EAAM6pC,YAAY0P,EAActV,GACjC,IAAI4W,GAAcG,EAAcF,WAAWl6C,IAAIs6C,EAAcl7C,IAEnE,CACD,MAAMw2C,EAAU,IAAI0C,GAAcjV,GAC5BkX,EAAeH,EAAcF,WAAWjB,QAAQ7e,EAAMwb,GAC5D,OAAO,IAAIqE,GAAcM,KAIrC,SAASC,GAAuBJ,EAAehgB,EAAMqgB,GACjD,IAAIC,EAAWN,EAIf,OAHAv0B,GAAK40B,GAAS,CAAC1G,EAAU1Q,KACrBqX,EAAWP,GAAsBO,EAAU/f,GAAUP,EAAM2Z,GAAW1Q,MAEnEqX,EAUX,SAASC,GAAyBP,EAAehgB,GAC7C,GAAIU,GAAYV,GACZ,OAAO6f,GAAcW,QAEpB,CACD,MAAML,EAAeH,EAAcF,WAAWjB,QAAQ7e,EAAM,IAAIke,GAAc,OAC9E,OAAO,IAAI2B,GAAcM,IAWjC,SAASM,GAA8BT,EAAehgB,GAClD,OAA4D,MAArD0gB,GAA6BV,EAAehgB,GAUvD,SAAS0gB,GAA6BV,EAAehgB,GACjD,MAAMigB,EAAWD,EAAcF,WAAWpB,yBAAyB1e,GACnE,OAAgB,MAAZigB,EACOD,EAAcF,WAChBp6C,IAAIu6C,EAASjgB,MACbuO,SAAS5N,GAAgBsf,EAASjgB,KAAMA,IAGtC,KASf,SAAS2gB,GAAiCX,GACtC,MAAMxsC,EAAW,GACXy1B,EAAO+W,EAAcF,WAAW96C,MAgBtC,OAfY,MAARikC,EAEKA,EAAKyE,cACNzE,EAAK+F,aAAae,IAAgB,CAACzB,EAAWI,KAC1Cl7B,EAAS5K,KAAK,IAAIogC,GAAUsF,EAAWI,OAK/CsR,EAAcF,WAAWtsC,SAAS63B,kBAAiB,CAACiD,EAAWgD,KACpC,MAAnBA,EAAUtsC,OACVwO,EAAS5K,KAAK,IAAIogC,GAAUsF,EAAWgD,EAAUtsC,WAItDwO,EAEX,SAASotC,GAAgCZ,EAAehgB,GACpD,GAAIU,GAAYV,GACZ,OAAOggB,EAEN,CACD,MAAMa,EAAgBH,GAA6BV,EAAehgB,GAClE,OACW,IAAI6f,GADM,MAAjBgB,EACyB,IAAI3C,GAAc2C,GAGlBb,EAAcF,WAAWtE,QAAQxb,KAQtE,SAAS8gB,GAAqBd,GAC1B,OAAOA,EAAcF,WAAWrV,UAQpC,SAASsW,GAAmBf,EAAe/W,GACvC,OAAO+X,GAAkBlhB,KAAgBkgB,EAAcF,WAAY7W,GAEvE,SAAS+X,GAAkBzC,EAAc0C,EAAWhY,GAChD,GAAuB,MAAnBgY,EAAUj8C,MAEV,OAAOikC,EAAK4F,YAAY0P,EAAc0C,EAAUj8C,OAE/C,CACD,IAAIk8C,EAAgB,KAgBpB,OAfAD,EAAUztC,SAAS63B,kBAAiB,CAACsO,EAAUrI,KAC1B,cAAbqI,GAGA,EAA2B,OAApBrI,EAAUtsC,MAAgB,6CACjCk8C,EAAgB5P,EAAUtsC,OAG1BikC,EAAO+X,GAAkBzgB,GAAUge,EAAc5E,GAAWrI,EAAWrI,MAI1EA,EAAKsF,SAASgQ,GAAc9T,WAA+B,OAAlByW,IAC1CjY,EAAOA,EAAK4F,YAAYtO,GAAUge,EAAc,aAAc2C,IAE3DjY,GAwBf,SAASkY,GAAqBF,EAAWjhB,GACrC,OAAOohB,GAAgBphB,EAAMihB,GAwGjC,SAASI,GAA6BC,EAAathB,GAC/C,GAAIshB,EAAY3L,KACZ,OAAOzU,GAAaogB,EAAYthB,KAAMA,GAGtC,IAAK,MAAMsO,KAAagT,EAAY9tC,SAChC,GAAI8tC,EAAY9tC,SAASjB,eAAe+7B,IACpCpN,GAAaX,GAAU+gB,EAAYthB,KAAMsO,GAAYtO,GACrD,OAAO,EAGf,OAAO,EAmBf,SAASuhB,GAAwB9rB,GAC7B,OAAOA,EAAMsM,QAMjB,SAASyf,GAAoBC,EAAQrhC,EAAQshC,GACzC,IAAI1B,EAAgBH,GAAcW,QAClC,IAAK,IAAIp2C,EAAI,EAAGA,EAAIq3C,EAAOr5C,SAAUgC,EAAG,CACpC,MAAMqrB,EAAQgsB,EAAOr3C,GAIrB,GAAIgW,EAAOqV,GAAQ,CACf,MAAMksB,EAAYlsB,EAAMuK,KACxB,IAAIue,EACJ,GAAI9oB,EAAMkgB,KACFzU,GAAawgB,EAAUC,IACvBpD,EAAe5d,GAAgB+gB,EAAUC,GACzC3B,EAAgBD,GAAsBC,EAAezB,EAAc9oB,EAAMkgB,OAEpEzU,GAAaygB,EAAWD,KAC7BnD,EAAe5d,GAAgBghB,EAAWD,GAC1C1B,EAAgBD,GAAsBC,EAAelgB,KAAgBrK,EAAMkgB,KAAKpH,SAASgQ,SAI5F,KAAI9oB,EAAMjiB,SAsBX,MAAMgC,EAAe,8CArBrB,GAAI0rB,GAAawgB,EAAUC,GACvBpD,EAAe5d,GAAgB+gB,EAAUC,GACzC3B,EAAgBI,GAAuBJ,EAAezB,EAAc9oB,EAAMjiB,eAEzE,GAAI0tB,GAAaygB,EAAWD,GAE7B,GADAnD,EAAe5d,GAAgBghB,EAAWD,GACtChhB,GAAY6d,GACZyB,EAAgBI,GAAuBJ,EAAelgB,KAAgBrK,EAAMjiB,cAE3E,CACD,MAAM+/B,EAAQ,EAAQ9d,EAAMjiB,SAAUusB,GAAawe,IACnD,GAAIhL,EAAO,CAEP,MAAMqO,EAAWrO,EAAMhF,SAASrO,GAAaqe,IAC7CyB,EAAgBD,GAAsBC,EAAelgB,KAAgB8hB,OAW7F,OAAO5B,EASX,SAAS6B,GAAgCZ,EAAWa,EAAUC,EAAqBC,EAAmBC,GAClG,GAAKD,GAAsBC,EAqBtB,CACD,MAAMlkB,EAAQ6iB,GAAgCK,EAAUiB,cAAeJ,GACvE,IAAKG,GAAuBnB,GAAqB/iB,GAC7C,OAAOgkB,EAIP,GAAKE,GACsB,MAAvBF,GACCtB,GAA8B1iB,EAAO+B,MAGrC,CACD,MAAM1f,EAAS,SAAUqV,GACrB,OAASA,EAAMsM,SAAWkgB,MACpBD,KACIA,EAAkBhzB,QAAQyG,EAAM0sB,YACrCjhB,GAAazL,EAAMuK,KAAM8hB,IACtB5gB,GAAa4gB,EAAUrsB,EAAMuK,QAIzC,OAAO+gB,GAFaS,GAAoBP,EAAUmB,UAAWhiC,EAAQ0hC,GAChDC,GAAuB3O,GAAajI,YAXzD,OAAO,KA/B6B,CAC5C,MAAM0V,EAAgBH,GAA6BO,EAAUiB,cAAeJ,GAC5E,GAAqB,MAAjBjB,EACA,OAAOA,EAEN,CACD,MAAMwB,EAAWzB,GAAgCK,EAAUiB,cAAeJ,GAC1E,OAAIhB,GAAqBuB,GACdN,EAEqB,MAAvBA,GACJtB,GAA8B4B,EAAUviB,MAMlCihB,GAAmBsB,EADLN,GAAuB3O,GAAajI,YAHlD,OAoMvB,SAASmX,GAAmCC,EAAcR,EAAqBC,EAAmBC,GAC9F,OAAOJ,GAAgCU,EAAatB,UAAWsB,EAAaT,SAAUC,EAAqBC,EAAmBC,GAOlI,SAASO,GAAsCD,EAAcE,GACzD,OAtKJ,SAA4CxB,EAAWa,EAAUW,GAC7D,IAAIC,EAAmBtP,GAAajI,WACpC,MAAMwX,EAAcjC,GAA6BO,EAAUiB,cAAeJ,GAC1E,GAAIa,EAOA,OANKA,EAAYjV,cAEbiV,EAAY3T,aAAae,IAAgB,CAACzB,EAAW+P,KACjDqE,EAAmBA,EAAiB/T,qBAAqBL,EAAW+P,MAGrEqE,EAEN,GAAID,EAAwB,CAG7B,MAAM1kB,EAAQ6iB,GAAgCK,EAAUiB,cAAeJ,GASvE,OARAW,EAAuBzT,aAAae,IAAgB,CAACzB,EAAWI,KAC5D,MAAMzF,EAAO8X,GAAmBH,GAAgC7iB,EAAO,IAAIyB,GAAK8O,IAAaI,GAC7FgU,EAAmBA,EAAiB/T,qBAAqBL,EAAWrF,MAGxE0X,GAAiC5iB,GAAOz4B,SAAQ0rC,IAC5C0R,EAAmBA,EAAiB/T,qBAAqBqC,EAAUhoC,KAAMgoC,EAAU/H,SAEhFyZ,EASP,OAHA/B,GADcC,GAAgCK,EAAUiB,cAAeJ,IAC/Bx8C,SAAQ0rC,IAC5C0R,EAAmBA,EAAiB/T,qBAAqBqC,EAAUhoC,KAAMgoC,EAAU/H,SAEhFyZ,EAqIJE,CAAmCL,EAAatB,UAAWsB,EAAaT,SAAUW,GAkB7F,SAASI,GAA+CN,EAAcviB,EAAM8iB,EAAmBC,GAC3F,OAvIJ,SAAqD9B,EAAWa,EAAU1D,EAAW0E,EAAmBC,GACpG,EAAOD,GAAqBC,EAAoB,6DAChD,MAAM/iB,EAAOO,GAAUuhB,EAAU1D,GACjC,GAAIqC,GAA8BQ,EAAUiB,cAAeliB,GAGvD,OAAO,KAEN,CAED,MAAMgjB,EAAapC,GAAgCK,EAAUiB,cAAeliB,GAC5E,OAAI8gB,GAAqBkC,GAEdD,EAAmBxU,SAAS6P,GAS5B2C,GAAmBiC,EAAYD,EAAmBxU,SAAS6P,KAiHnE6E,CAA4CV,EAAatB,UAAWsB,EAAaT,SAAU9hB,EAAM8iB,EAAmBC,GAQ/H,SAASG,GAA2BX,EAAcviB,GAC9C,OA7FJ,SAAiCihB,EAAWjhB,GACxC,OAAO0gB,GAA6BO,EAAUiB,cAAeliB,GA4FtDmjB,CAAwBZ,EAAatB,UAAW1gB,GAAUgiB,EAAaT,SAAU9hB,IAa5F,SAASojB,GAA8Bb,EAAc5I,EAAU0J,GAC3D,OAhIJ,SAAoCpC,EAAWa,EAAUnI,EAAUoJ,GAC/D,MAAM/iB,EAAOO,GAAUuhB,EAAUnI,GAC3BkH,EAAgBH,GAA6BO,EAAUiB,cAAeliB,GAC5E,OAAqB,MAAjB6gB,EACOA,EAGHkC,EAAmB3G,mBAAmBzC,GAE/BoH,GADYH,GAAgCK,EAAUiB,cAAeliB,GACtC+iB,EAAmB3J,UAAU/K,kBAAkBsL,IAG9E,KAoHR2J,CAA2Bf,EAAatB,UAAWsB,EAAaT,SAAUnI,EAAU0J,GAK/F,SAASE,GAAkBhB,EAAcjU,GACrC,OAAO8S,GAAgB7gB,GAAUgiB,EAAaT,SAAUxT,GAAYiU,EAAatB,WAErF,SAASG,GAAgBphB,EAAMihB,GAC3B,MAAO,CACHa,SAAU9hB,EACVihB,UAAAA,GAoBR,MAAMuC,GACF3qC,cACIlT,KAAK89C,UAAY,IAAIjlC,IAEzBklC,iBAAiB9G,GACb,MAAM5oC,EAAO4oC,EAAO5oC,KACd2lC,EAAWiD,EAAOtO,UACxB,EAAgB,gBAATt6B,GACM,kBAATA,GACS,kBAATA,EAA8C,6CAClD,EAAoB,cAAb2lC,EAA0B,mDACjC,MAAMgK,EAAYh+C,KAAK89C,UAAU/9C,IAAIi0C,GACrC,GAAIgK,EAAW,CACX,MAAMC,EAAUD,EAAU3vC,KAC1B,GAAa,gBAATA,GACY,kBAAZ4vC,EACAj+C,KAAK89C,UAAU79C,IAAI+zC,EAAU3D,GAAmB2D,EAAUiD,EAAO3G,aAAc0N,EAAU1N,oBAExF,GAAa,kBAATjiC,GACO,gBAAZ4vC,EACAj+C,KAAK89C,UAAU3jC,OAAO65B,QAErB,GAAa,kBAAT3lC,GACO,kBAAZ4vC,EACAj+C,KAAK89C,UAAU79C,IAAI+zC,GAvjFPrL,EAujFoCqL,EAtjFrD,CAAE3lC,KAAM,gBAAqCiiC,aAsjFkB0N,EAAUzN,QAtjFd5H,UAAAA,UAwjFrD,GAAa,kBAATt6B,GACO,gBAAZ4vC,EACAj+C,KAAK89C,UAAU79C,IAAI+zC,EA9jFnC,SAA0BrL,EAAW2H,GACjC,MAAO,CAAEjiC,KAAM,cAAiCiiC,aAAAA,EAAc3H,UAAAA,GA6jFrBuV,CAAiBlK,EAAUiD,EAAO3G,mBAE9D,IAAa,kBAATjiC,GACO,kBAAZ4vC,EAIA,MAAMpuC,EAAe,mCACjBonC,EACA,mBACA+G,GANJh+C,KAAK89C,UAAU79C,IAAI+zC,EAAU3D,GAAmB2D,EAAUiD,EAAO3G,aAAc0N,EAAUzN,gBAU7FvwC,KAAK89C,UAAU79C,IAAI+zC,EAAUiD,GAzkFzC,IAA4BtO,EA4kFxBwV,aACI,OAAOngD,MAAMsc,KAAKta,KAAK89C,UAAUvjC,WAmCzC,MAAM6jC,GAA2B,IAXjC,MACIC,iBAAiBrK,GACb,OAAO,KAEXsK,mBAAmB79C,EAAOmtC,EAAOpnB,GAC7B,OAAO,OAWf,MAAM+3B,GACFrrC,YAAYsrC,EAASC,EAAYC,EAA0B,MACvD1+C,KAAKw+C,QAAUA,EACfx+C,KAAKy+C,WAAaA,EAClBz+C,KAAK0+C,wBAA0BA,EAEnCL,iBAAiBrK,GACb,MAAM1Q,EAAOtjC,KAAKy+C,WAAW1H,WAC7B,GAAIzT,EAAKmT,mBAAmBzC,GACxB,OAAO1Q,EAAKmQ,UAAU/K,kBAAkBsL,GAEvC,CACD,MAAM2K,EAA6C,MAAhC3+C,KAAK0+C,wBAClB,IAAIxI,GAAUl2C,KAAK0+C,yBAAyB,GAAM,GAClD1+C,KAAKy+C,WAAW5G,YACtB,OAAO4F,GAA8Bz9C,KAAKw+C,QAASxK,EAAU2K,IAGrEL,mBAAmB79C,EAAOmtC,EAAOpnB,GAC7B,MAAMo4B,EAAqD,MAAhC5+C,KAAK0+C,wBAC1B1+C,KAAK0+C,wBACLrG,GAA+Br4C,KAAKy+C,YACpCI,EAnJd,SAAsCjC,EAAcgC,EAAoBhQ,EAAW/rC,EAAO2jB,EAAS/lB,GAC/F,OA7FJ,SAAmC66C,EAAWa,EAAUyC,EAAoBhQ,EAAW/rC,EAAO2jB,EAAS/lB,GACnG,IAAIq+C,EACJ,MAAM1mB,EAAQ6iB,GAAgCK,EAAUiB,cAAeJ,GACjEjB,EAAgBH,GAA6B3iB,EAAO+B,MAC1D,GAAqB,MAAjB+gB,EACA4D,EAAY5D,MAEX,IAA0B,MAAtB0D,EAKL,MAAO,GAJPE,EAAY1D,GAAmBhjB,EAAOwmB,GAO1C,GADAE,EAAYA,EAAU7U,UAAUxpC,GAC3Bq+C,EAAUha,WAAcga,EAAU/W,aAgBnC,MAAO,GAhB0C,CACjD,MAAM8W,EAAQ,GACRha,EAAMpkC,EAAM8iC,aACZsJ,EAAOrmB,EACPs4B,EAAUxX,uBAAuBsH,EAAWnuC,GAC5Cq+C,EAAUzX,gBAAgBuH,EAAWnuC,GAC3C,IAAIusC,EAAOH,EAAK5H,UAChB,KAAO+H,GAAQ6R,EAAMp8C,OAASI,GACG,IAAzBgiC,EAAImI,EAAM4B,IACViQ,EAAM57C,KAAK+pC,GAEfA,EAAOH,EAAK5H,UAEhB,OAAO4Z,GAiEJE,CAA0BnC,EAAatB,UAAWsB,EAAaT,SAAUyC,EAAoBhQ,EAAW/rC,EAAO2jB,EAAS/lB,GAkJ7Gu+C,CAA6Bh/C,KAAKw+C,QAASI,EAAoBhR,EAAO,EAAGpnB,EAAS/lB,GAChG,OAAqB,IAAjBo+C,EAAMp8C,OACC,KAGAo8C,EAAM,IA4FzB,SAASI,GAAgDC,EAAenH,EAAWoH,EAAYC,EAAazyC,EAAQ0yC,GAChH,MAAMC,EAAevH,EAAUhB,WAC/B,GAA2D,MAAvDwG,GAA2B6B,EAAaD,GAExC,OAAOpH,EAEN,CACD,IAAIwH,EAAeZ,EACnB,GAAI5jB,GAAYokB,GAGZ,GADA,EAAOpH,EAAUF,YAAYvB,qBAAsB,8DAC/CyB,EAAUF,YAAYtB,aAAc,CAIpC,MAAMsB,EAAcQ,GAA+BN,GAI7CyH,EAAwB3C,GAAsCuC,EAH3CvH,aAAuBpK,GAC1CoK,EACApK,GAAajI,YAEnB+Z,EAAgBL,EAAczkC,OAAOglC,eAAe1H,EAAUhB,WAAWtD,UAAW+L,EAAuBH,OAE1G,CACD,MAAMK,EAAe/C,GAAmCyC,EAAa/G,GAA+BN,IACpGwH,EAAgBL,EAAczkC,OAAOglC,eAAe1H,EAAUhB,WAAWtD,UAAWiM,EAAcL,OAGrG,CACD,MAAMrL,EAAW5Z,GAAa+kB,GAC9B,GAAiB,cAAbnL,EAA0B,CAC1B,EAAqC,IAA9B1Z,GAAc6kB,GAAmB,yDACxC,MAAMQ,EAAeL,EAAa7L,UAClCkL,EAAa5G,EAAUF,YAAYpE,UAEnC,MAAMmM,EAAkB1C,GAA+CkC,EAAaD,EAAYQ,EAAchB,GAE1GY,EADmB,MAAnBK,EACgBV,EAAczkC,OAAO+tB,eAAemX,EAAcC,GAIlDN,EAAa7L,cAGhC,CACD,MAAMoM,EAAkBtlB,GAAa4kB,GAErC,IAAIW,EACJ,GAAIR,EAAa7I,mBAAmBzC,GAAW,CAC3C2K,EAAa5G,EAAUF,YAAYpE,UACnC,MAAMsM,EAAmB7C,GAA+CkC,EAAaD,EAAYG,EAAa7L,UAAWkL,GAErHmB,EADoB,MAApBC,EACgBT,EACX7L,UACA/K,kBAAkBsL,GAClB9K,YAAY2W,EAAiBE,GAIlBT,EAAa7L,UAAU/K,kBAAkBsL,QAI7D8L,EAAgBrC,GAA8B2B,EAAapL,EAAU+D,EAAUF,aAG/E0H,EADiB,MAAjBO,EACgBZ,EAAczkC,OAAOyuB,YAAYoW,EAAa7L,UAAWO,EAAU8L,EAAeD,EAAiBlzC,EAAQ0yC,GAI3GC,EAAa7L,WAIzC,OAAOqE,GAAyBC,EAAWwH,EAAeD,EAAahJ,sBAAwBvb,GAAYokB,GAAaD,EAAczkC,OAAOulC,iBAGrJ,SAASC,GAAkCf,EAAegB,EAAcf,EAAYgB,EAAaf,EAAagB,EAAeC,EAAkBhB,GAC3I,MAAMiB,EAAgBJ,EAAarI,YACnC,IAAI0I,EACJ,MAAMC,EAAeH,EACfnB,EAAczkC,OACdykC,EAAczkC,OAAOgmC,mBAC3B,GAAI1lB,GAAYokB,GACZoB,EAAiBC,EAAaf,eAAea,EAAc7M,UAAW0M,EAAa,WAElF,GAAIK,EAAaR,iBAAmBM,EAAc/J,aAAc,CAEjE,MAAMmK,EAAgBJ,EACjB7M,UACAvK,YAAYiW,EAAYgB,GAC7BI,EAAiBC,EAAaf,eAAea,EAAc7M,UAAWiN,EAAe,UAEpF,CACD,MAAM1M,EAAW5Z,GAAa+kB,GAC9B,IAAKmB,EAAc9J,kBAAkB2I,IACjC7kB,GAAc6kB,GAAc,EAE5B,OAAOe,EAEX,MAAML,EAAkBtlB,GAAa4kB,GAE/BlW,EADYqX,EAAc7M,UAAU/K,kBAAkBsL,GAC7B9K,YAAY2W,EAAiBM,GAExDI,EADa,cAAbvM,EACiBwM,EAAahY,eAAe8X,EAAc7M,UAAWxK,GAGrDuX,EAAatX,YAAYoX,EAAc7M,UAAWO,EAAU/K,EAAc4W,EAAiBzB,GAA0B,MAG9I,MAAMxG,EAAeM,GAA0BgI,EAAcK,EAAgBD,EAAchK,sBAAwBvb,GAAYokB,GAAaqB,EAAaR,gBAEzJ,OAAOf,GAAgDC,EAAetH,EAAcuH,EAAYC,EADjF,IAAIb,GAA6Ba,EAAaxH,EAAcwI,GAC0Cf,GAEzH,SAASsB,GAAgCzB,EAAegB,EAAcf,EAAYgB,EAAaf,EAAagB,EAAef,GACvH,MAAMC,EAAeY,EAAanJ,WAClC,IAAIa,EAAc2H,EAClB,MAAM5yC,EAAS,IAAI4xC,GAA6Ba,EAAac,EAAcE,GAC3E,GAAIrlB,GAAYokB,GACZI,EAAgBL,EAAczkC,OAAOglC,eAAeS,EAAanJ,WAAWtD,UAAW0M,EAAad,GACpGzH,EAAeE,GAAyBoI,EAAcX,GAAe,EAAML,EAAczkC,OAAOulC,oBAE/F,CACD,MAAMhM,EAAW5Z,GAAa+kB,GAC9B,GAAiB,cAAbnL,EACAuL,EAAgBL,EAAczkC,OAAO+tB,eAAe0X,EAAanJ,WAAWtD,UAAW0M,GACvFvI,EAAeE,GAAyBoI,EAAcX,EAAeD,EAAahJ,qBAAsBgJ,EAAa/I,kBAEpH,CACD,MAAMsJ,EAAkBtlB,GAAa4kB,GAC/ByB,EAAWtB,EAAa7L,UAAU/K,kBAAkBsL,GAC1D,IAAIiF,EACJ,GAAIle,GAAY8kB,GAEZ5G,EAAWkH,MAEV,CACD,MAAMpX,EAAYp8B,EAAO0xC,iBAAiBrK,GAMlCiF,EALS,MAAblQ,EACqC,cAAjCvO,GAAYqlB,IACZ9W,EAAUH,SAASlO,GAAWmlB,IAAkB/a,UAGrCiE,EAGAA,EAAUG,YAAY2W,EAAiBM,GAK3C1S,GAAajI,WAQ5BoS,EALCgJ,EAASzW,OAAO8O,GAKFiH,EAHApI,GAAyBoI,EADnBhB,EAAczkC,OAAOyuB,YAAYoW,EAAa7L,UAAWO,EAAUiF,EAAU4G,EAAiBlzC,EAAQ0yC,GACvDC,EAAahJ,qBAAsB4I,EAAczkC,OAAOulC,iBAOxI,OAAOpI,EAEX,SAASiJ,GAA2B9I,EAAW/D,GAC3C,OAAO+D,EAAUhB,WAAWN,mBAAmBzC,GAwBnD,SAAS8M,GAAwB5B,EAAe5b,EAAMlL,GAIlD,OAHAA,EAAM2hB,SAAQ,CAACnB,EAAc7P,KACzBzF,EAAOA,EAAK4F,YAAY0P,EAAc7P,MAEnCzF,EAEX,SAASyd,GAA8B7B,EAAenH,EAAW1d,EAAM2mB,EAAiB5B,EAAavH,EAAawI,EAAkBhB,GAGhI,GAAItH,EAAUF,YAAYpE,UAAU3O,YAC/BiT,EAAUF,YAAYvB,qBACvB,OAAOyB,EAQX,IACIkJ,EADAC,EAAenJ,EAGfkJ,EADAlmB,GAAYV,GACI2mB,EAGA,IAAIzI,GAAc,MAAMW,QAAQ7e,EAAM2mB,GAE1D,MAAMrC,EAAa5G,EAAUF,YAAYpE,UAqBzC,OApBAwN,EAAcpzC,SAAS63B,kBAAiB,CAACsO,EAAUrI,KAC/C,GAAIgT,EAAW9V,SAASmL,GAAW,CAC/B,MAGMiF,EAAW6H,GAAwB5B,EAHrBnH,EAAUF,YACzBpE,UACA/K,kBAAkBsL,GAC8CrI,GACrEuV,EAAejB,GAAkCf,EAAegC,EAAc,IAAIrnB,GAAKma,GAAWiF,EAAUmG,EAAavH,EAAawI,EAAkBhB,OAGhK4B,EAAcpzC,SAAS63B,kBAAiB,CAACsO,EAAUmN,KAC/C,MAAMC,GAAsBrJ,EAAUF,YAAYpB,mBAAmBzC,SACxC9wC,IAAzBi+C,EAAe9hD,MACnB,IAAKs/C,EAAW9V,SAASmL,KAAcoN,EAAoB,CACvD,MAGMnI,EAAW6H,GAAwB5B,EAHrBnH,EAAUF,YACzBpE,UACA/K,kBAAkBsL,GAC8CmN,GACrED,EAAejB,GAAkCf,EAAegC,EAAc,IAAIrnB,GAAKma,GAAWiF,EAAUmG,EAAavH,EAAawI,EAAkBhB,OAGzJ6B,EA2JX,SAASG,GAA2BC,EAAMjnB,GACtC,MAAMknB,EAAQlJ,GAA+BiJ,EAAK7C,YAClD,OAAI8C,IAGID,EAAK1+C,MAAMy8B,aAAaE,iBACtBxE,GAAYV,KACTknB,EAAM7Y,kBAAkBtO,GAAaC,IAAOyK,WAC1Cyc,EAAM3Y,SAASvO,GAGvB,KAgDX,SAASmnB,GAAmBF,EAAMG,EAAWrC,EAAahD,GAClDqF,EAAUpzC,OAAS8mC,GAAcc,OACJ,OAA7BwL,EAAU90C,OAAOwyB,UACjB,EAAOkZ,GAA+BiJ,EAAK7C,YAAa,6DACxD,EAAOrG,GAA8BkJ,EAAK7C,YAAa,4DAE3D,MAAMyB,EAAeoB,EAAK7C,WACpB//C,EA1gBV,SAAqCwgD,EAAegB,EAAcuB,EAAWrC,EAAagB,GACtF,MAAMf,EAAc,IAAIxB,GACxB,IAAIjG,EAAcyI,EAClB,GAAIoB,EAAUpzC,OAAS8mC,GAAcY,UAAW,CAC5C,MAAM90B,EAAYwgC,EACdxgC,EAAUtU,OAAO0oC,SACjBuC,EAAe+I,GAAgCzB,EAAegB,EAAcj/B,EAAUoZ,KAAMpZ,EAAU+uB,KAAMoP,EAAagB,EAAef,IAGxI,EAAOp+B,EAAUtU,OAAO2oC,WAAY,mBAIpC+K,EACIp/B,EAAUtU,OAAO4oC,QACZ2K,EAAarI,YAAYtB,eAAiBxb,GAAY9Z,EAAUoZ,MACzEud,EAAeqI,GAAkCf,EAAegB,EAAcj/B,EAAUoZ,KAAMpZ,EAAU+uB,KAAMoP,EAAagB,EAAeC,EAAkBhB,SAG/J,GAAIoC,EAAUpzC,OAAS8mC,GAAcc,MAAO,CAC7C,MAAM7d,EAAQqpB,EACVrpB,EAAMzrB,OAAO0oC,SACbuC,EAiNZ,SAAqCsH,EAAenH,EAAW1d,EAAM2mB,EAAiB5B,EAAavH,EAAawH,GAO5G,IAAI6B,EAAenJ,EAanB,OAZAiJ,EAAgBjH,SAAQ,CAACnB,EAAc7P,KACnC,MAAMiT,EAAYphB,GAAUP,EAAMue,GAC9BiI,GAA2B9I,EAAW3d,GAAa4hB,MACnDkF,EAAeP,GAAgCzB,EAAegC,EAAclF,EAAWjT,EAAWqW,EAAavH,EAAawH,OAGpI2B,EAAgBjH,SAAQ,CAACnB,EAAc7P,KACnC,MAAMiT,EAAYphB,GAAUP,EAAMue,GAC7BiI,GAA2B9I,EAAW3d,GAAa4hB,MACpDkF,EAAeP,GAAgCzB,EAAegC,EAAclF,EAAWjT,EAAWqW,EAAavH,EAAawH,OAG7H6B,EArOgBQ,CAA4BxC,EAAegB,EAAc9nB,EAAMiC,KAAMjC,EAAMvqB,SAAUuxC,EAAagB,EAAef,IAGhI,EAAOjnB,EAAMzrB,OAAO2oC,WAAY,mBAEhC+K,EACIjoB,EAAMzrB,OAAO4oC,QAAU2K,EAAarI,YAAYtB,aACpDqB,EAAemJ,GAA8B7B,EAAegB,EAAc9nB,EAAMiC,KAAMjC,EAAMvqB,SAAUuxC,EAAagB,EAAeC,EAAkBhB,SAGvJ,GAAIoC,EAAUpzC,OAAS8mC,GAAcQ,eAAgB,CACtD,MAAMgM,EAAeF,EAKjB7J,EAJC+J,EAAajM,OA0T1B,SAAsCwJ,EAAenH,EAAW1d,EAAM+kB,EAAahD,EAAqBiD,GACpG,IAAIj+C,EACJ,GAAqD,MAAjDm8C,GAA2B6B,EAAa/kB,GACxC,OAAO0d,EAEN,CACD,MAAMprC,EAAS,IAAI4xC,GAA6Ba,EAAarH,EAAWqE,GAClEwF,EAAgB7J,EAAUhB,WAAWtD,UAC3C,IAAI8L,EACJ,GAAIxkB,GAAYV,IAAgC,cAAvBD,GAAaC,GAAuB,CACzD,IAAIsJ,EACJ,GAAIoU,EAAUF,YAAYvB,qBACtB3S,EAAUgZ,GAAmCyC,EAAa/G,GAA+BN,QAExF,CACD,MAAM8J,EAAiB9J,EAAUF,YAAYpE,UAC7C,EAAOoO,aAA0BpU,GAAc,iDAC/C9J,EAAUkZ,GAAsCuC,EAAayC,GAEjEle,EAAUA,EACV4b,EAAgBL,EAAczkC,OAAOglC,eAAemC,EAAeje,EAAS0b,OAE3E,CACD,MAAMrL,EAAW5Z,GAAaC,GAC9B,IAAI4e,EAAWwE,GAA8B2B,EAAapL,EAAU+D,EAAUF,aAC9D,MAAZoB,GACAlB,EAAUF,YAAYpB,mBAAmBzC,KACzCiF,EAAW2I,EAAclZ,kBAAkBsL,IAG3CuL,EADY,MAAZtG,EACgBiG,EAAczkC,OAAOyuB,YAAY0Y,EAAe5N,EAAUiF,EAAU1e,GAAaF,GAAO1tB,EAAQ0yC,GAE3GtH,EAAUhB,WAAWtD,UAAU5K,SAASmL,GAE7BkL,EAAczkC,OAAOyuB,YAAY0Y,EAAe5N,EAAUvG,GAAajI,WAAYjL,GAAaF,GAAO1tB,EAAQ0yC,GAG/GuC,EAEhBrC,EAAcza,WACdiT,EAAUF,YAAYvB,uBAEtBl1C,EAAWu7C,GAAmCyC,EAAa/G,GAA+BN,IACtF32C,EAAS2mC,eACTwX,EAAgBL,EAAczkC,OAAOglC,eAAeF,EAAen+C,EAAUi+C,KAOzF,OAHAj+C,EACI22C,EAAUF,YAAYvB,sBACyC,MAA3DiH,GAA2B6B,EAAajlB,MACzC2d,GAAyBC,EAAWwH,EAAen+C,EAAU89C,EAAczkC,OAAOulC,iBAzWtE8B,CAA6B5C,EAAegB,EAAcyB,EAAatnB,KAAM+kB,EAAagB,EAAef,GAyQpI,SAAmCH,EAAenH,EAAWgK,EAAStM,EAAc2J,EAAagB,EAAef,GAC5G,GAAwD,MAApD9B,GAA2B6B,EAAa2C,GACxC,OAAOhK,EAGX,MAAMsI,EAAmBtI,EAAUF,YAAYtB,aAGzCsB,EAAcE,EAAUF,YAC9B,GAA0B,MAAtBpC,EAAap2C,MAAe,CAE5B,GAAK07B,GAAYgnB,IAAYlK,EAAYvB,sBACrCuB,EAAYrB,kBAAkBuL,GAC9B,OAAO9B,GAAkCf,EAAenH,EAAWgK,EAASlK,EAAYpE,UAAU7K,SAASmZ,GAAU3C,EAAagB,EAAeC,EAAkBhB,GAElK,GAAItkB,GAAYgnB,GAAU,CAG3B,IAAIf,EAAkB,IAAIzI,GAAc,MAIxC,OAHAV,EAAYpE,UAAUpK,aAAa/E,IAAW,CAACjhC,EAAMigC,KACjD0d,EAAkBA,EAAgB/gD,IAAI,IAAI45B,GAAKx2B,GAAOigC,MAEnDyd,GAA8B7B,EAAenH,EAAWgK,EAASf,EAAiB5B,EAAagB,EAAeC,EAAkBhB,GAGvI,OAAOtH,EAGV,CAED,IAAIiJ,EAAkB,IAAIzI,GAAc,MAOxC,OANA9C,EAAasE,SAAQ,CAACiI,EAAW3iD,KAC7B,MAAM4iD,EAAkBrnB,GAAUmnB,EAASC,GACvCnK,EAAYrB,kBAAkByL,KAC9BjB,EAAkBA,EAAgB/gD,IAAI+hD,EAAWnK,EAAYpE,UAAU7K,SAASqZ,QAGjFlB,GAA8B7B,EAAenH,EAAWgK,EAASf,EAAiB5B,EAAagB,EAAeC,EAAkBhB,IAjTpH6C,CAA0BhD,EAAegB,EAAcyB,EAAatnB,KAAMsnB,EAAalM,aAAc2J,EAAagB,EAAef,OAMnJ,IAAIoC,EAAUpzC,OAAS8mC,GAAcgN,gBAItC,MAAMtyC,EAAe,2BAA6B4xC,EAAUpzC,MAH5DupC,EA6SR,SAAqCsH,EAAenH,EAAW1d,EAAM+kB,EAAaC,GAC9E,MAAM+C,EAAgBrK,EAAUF,YAEhC,OAAOoH,GAAgDC,EADlChH,GAA0BH,EAAWqK,EAAc3O,UAAW2O,EAAc9L,sBAAwBvb,GAAYV,GAAO+nB,EAAc7L,cACtElc,EAAM+kB,EAAahB,GAA0BiB,GAhT9GgD,CAA4BnD,EAAegB,EAAcuB,EAAUpnB,KAAM+kB,EAAaC,GAKzG,MAAMxI,EAAUwI,EAAYlB,aAE5B,OAEJ,SAAyC+B,EAActI,EAAcyH,GACjE,MAAMrH,EAAYJ,EAAab,WAC/B,GAAIiB,EAAU1B,qBAAsB,CAChC,MAAMgM,EAAgBtK,EAAUvE,UAAU1L,cAAgBiQ,EAAUvE,UAAU3O,UACxEyd,EAAkBnK,GAA8B8H,IAClDb,EAAY58C,OAAS,IACpBy9C,EAAanJ,WAAWT,sBACxBgM,IAAkBtK,EAAUvE,UAAUtJ,OAAOoY,KAC7CvK,EAAUvE,UAAUzL,cAAcmC,OAAOoY,EAAgBva,iBAC1DqX,EAAYp8C,KA7uFb,CAAEoL,KAAM,QAAqBiiC,aA6uFC8H,GAA8BR,MAZnE4K,CAAgCtC,EAActI,EAAcf,GACrD,CAAEkB,UAAWH,EAAcf,QAAAA,GAydnB4L,CAA4BnB,EAAKoB,WAAYxC,EAAcuB,EAAWrC,EAAahD,GA9gBtG,IAAoC8C,EAAenH,EAmhB/C,OAnhBgCmH,EA+gBLoC,EAAKoB,WA/gBe3K,EA+gBHr5C,EAAOq5C,UA9gBnD,EAAOA,EAAUhB,WAAWtD,UAAUvJ,UAAUgV,EAAczkC,OAAOulB,YAAa,0BAClF,EAAO+X,EAAUF,YAAYpE,UAAUvJ,UAAUgV,EAAczkC,OAAOulB,YAAa,2BA8gBnF,EAAOthC,EAAOq5C,UAAUF,YAAYvB,uBAC/B4J,EAAarI,YAAYvB,qBAAsB,2DACpDgL,EAAK7C,WAAa//C,EAAOq5C,UAiB7B,SAAuCuJ,EAAMzK,EAASE,EAAY4L,GAC9D,MAAM7L,EAAgB6L,EAChB,CAACA,GACDrB,EAAKsB,oBACX,OA/uDJ,SAAgDjM,EAAgBE,EAASE,EAAY8L,GACjF,MAAMjM,EAAS,GACTkM,EAAQ,GAYd,OAXAjM,EAAQl3C,SAAQs3C,IAx9CpB,IAA0BtO,EAy9CE,kBAAhBsO,EAAO5oC,MACPsoC,EAAerF,OAAO7N,oBAAoBwT,EAAO1G,QAAS0G,EAAO3G,eACjEwS,EAAM7/C,MA39CQ0lC,EA29CcsO,EAAOtO,UA19CpC,CAAEt6B,KAAM,cAAiCiiC,aA09CM2G,EAAO3G,aA19CC3H,UAAAA,QA69C9D+N,GAAoCC,EAAgBC,EAAQ,gBAAqCC,EAASgM,EAAoB9L,GAC9HL,GAAoCC,EAAgBC,EAAQ,cAAiCC,EAASgM,EAAoB9L,GAC1HL,GAAoCC,EAAgBC,EAAQ,cAAiCkM,EAAOD,EAAoB9L,GACxHL,GAAoCC,EAAgBC,EAAQ,gBAAqCC,EAASgM,EAAoB9L,GAC9HL,GAAoCC,EAAgBC,EAAQ,QAAqBC,EAASgM,EAAoB9L,GACvGH,EAiuDAmM,CAAuCzB,EAAK0B,gBAAiBnM,EAASE,EAAYD,GApBlFmM,CAA8B3B,EAAM5iD,EAAOm4C,QAASn4C,EAAOq5C,UAAUhB,WAAWtD,UAAW,MAuCtG,IAAIyP,GAgNAC,GA/KJ,SAASC,GAAwBC,EAAW5B,EAAWrC,EAAakE,GAChE,MAAMnkB,EAAUsiB,EAAU90C,OAAOwyB,QACjC,GAAgB,OAAZA,EAAkB,CAClB,MAAMmiB,EAAO+B,EAAUE,MAAMxjD,IAAIo/B,GAEjC,OADA,EAAe,MAARmiB,EAAc,gDACdE,GAAmBF,EAAMG,EAAWrC,EAAakE,GAEvD,CACD,IAAI1M,EAAS,GACb,IAAK,MAAM0K,KAAQ+B,EAAUE,MAAMhpC,SAC/Bq8B,EAASA,EAAO4M,OAAOhC,GAAmBF,EAAMG,EAAWrC,EAAakE,IAE5E,OAAO1M,GAmHf,SAAS6M,GAAgCJ,EAAWhpB,GAChD,IAAIwd,EAAc,KAClB,IAAK,MAAMyJ,KAAQ+B,EAAUE,MAAMhpC,SAC/Bs9B,EAAcA,GAAewJ,GAA2BC,EAAMjnB,GAElE,OAAOwd,EA6EX,MAAM6L,GAKFxwC,YAAYywC,GACR3jD,KAAK2jD,gBAAkBA,EAIvB3jD,KAAK4jD,eAAiB,IAAIrL,GAAc,MAIxCv4C,KAAK6jD,kBAniCF,CACHtH,cAAerC,GAAcW,QAC7B4B,UAAW,GACXqH,aAAc,GAiiCd9jD,KAAK+jD,cAAgB,IAAIlrC,IACzB7Y,KAAKgkD,cAAgB,IAAInrC,KAQjC,SAASorC,GAA2BC,EAAU7pB,EAAM8pB,EAAS3H,EAASpgB,GAGlE,OAl7CJ,SAA+Bkf,EAAWjhB,EAAM2V,EAAMwM,EAASpgB,GAC3D,EAAOogB,EAAUlB,EAAUwI,YAAa,qDACxB5gD,IAAZk5B,IACAA,GAAU,GAEdkf,EAAUmB,UAAUx5C,KAAK,CACrBo3B,KAAAA,EACA2V,KAAAA,EACAwM,QAAAA,EACApgB,QAAAA,IAEAA,IACAkf,EAAUiB,cAAgBnC,GAAsBkB,EAAUiB,cAAeliB,EAAM2V,IAEnFsL,EAAUwI,YAActH,EAm6CxB4H,CAAsBF,EAASL,kBAAmBxpB,EAAM8pB,EAAS3H,EAASpgB,GACrEA,EAIMioB,GAAoCH,EAAU,IAAIpO,GAtzEtD,CACHT,UAAU,EACVC,YAAY,EACZnW,QAAS,KACToW,QAAQ,GAkzEqFlb,EAAM8pB,IAH5F,GAuBf,SAASG,GAAqBJ,EAAU1H,EAAS9G,GAAS,GACtD,MAAM5lB,EA76CV,SAA2BwrB,EAAWkB,GAClC,IAAK,IAAI/3C,EAAI,EAAGA,EAAI62C,EAAUmB,UAAUh6C,OAAQgC,IAAK,CACjD,MAAM8/C,EAASjJ,EAAUmB,UAAUh4C,GACnC,GAAI8/C,EAAO/H,UAAYA,EACnB,OAAO+H,EAGf,OAAO,KAs6COC,CAAkBN,EAASL,kBAAmBrH,GAE5D,GA/5CJ,SAA8BlB,EAAWkB,GAKrC,MAAMpO,EAAMkN,EAAUmB,UAAUgI,WAAUj3C,GAC/BA,EAAEgvC,UAAYA,IAEzB,EAAOpO,GAAO,EAAG,gDACjB,MAAMsW,EAAgBpJ,EAAUmB,UAAUrO,GAC1CkN,EAAUmB,UAAUjjB,OAAO4U,EAAK,GAChC,IAAIuW,EAAyBD,EAActoB,QACvCwoB,GAAsC,EACtCngD,EAAI62C,EAAUmB,UAAUh6C,OAAS,EACrC,KAAOkiD,GAA0BlgD,GAAK,GAAG,CACrC,MAAMogD,EAAevJ,EAAUmB,UAAUh4C,GACrCogD,EAAazoB,UACT33B,GAAK2pC,GACLsN,GAA6BmJ,EAAcH,EAAcrqB,MAEzDsqB,GAAyB,EAEpBppB,GAAampB,EAAcrqB,KAAMwqB,EAAaxqB,QAEnDuqB,GAAsC,IAG9CngD,IAEJ,QAAKkgD,IAGIC,GAoCb,SAA6BtJ,GACzBA,EAAUiB,cAAgBV,GAAoBP,EAAUmB,UAAWb,GAAyBzhB,MACxFmhB,EAAUmB,UAAUh6C,OAAS,EAC7B64C,EAAUwI,YACNxI,EAAUmB,UAAUnB,EAAUmB,UAAUh6C,OAAS,GAAG+5C,QAGxDlB,EAAUwI,aAAe,EAzCzBgB,CAAoBxJ,IACb,IAIHoJ,EAAc1U,KACdsL,EAAUiB,cAAgB3B,GAAyBU,EAAUiB,cAAemI,EAAcrqB,MAI1FvU,GADiB4+B,EAAc72C,UACf86B,IACZ2S,EAAUiB,cAAgB3B,GAAyBU,EAAUiB,cAAe3hB,GAAU8pB,EAAcrqB,KAAMsO,QAG3G,IA82Ccoc,CAAqBb,EAASL,kBAAmBrH,GAIrE,CACD,IAAI/G,EAAe,IAAI8C,GAAc,MAUrC,OATkB,MAAdzoB,EAAMkgB,KAENyF,EAAeA,EAAax1C,IAAIk6B,MAAgB,GAGhDrU,GAAKgK,EAAMjiB,UAAWqqB,IAClBud,EAAeA,EAAax1C,IAAI,IAAI45B,GAAK3B,IAAa,MAGvDmsB,GAAoCH,EAAU,IAAI1O,GAAa1lB,EAAMuK,KAAMob,EAAcC,IAbhG,MAAO,GAqBf,SAASsP,GAA6Bd,EAAU7pB,EAAM8pB,GAClD,OAAOE,GAAoCH,EAAU,IAAIpO,GA51ElD,CACHT,UAAU,EACVC,YAAY,EACZnW,QAAS,KACToW,QAAQ,GAw1EmFlb,EAAM8pB,IAiOzG,SAASc,GAA+Bf,EAAU7pB,EAAMgiB,GACpD,MACMf,EAAY4I,EAASL,kBACrBhM,EAAcqM,EAASN,eAAepK,WAAWnf,GAAM,CAACif,EAAW+J,KACrE,MACMxL,EAAc4L,GAAgCJ,EAD/BroB,GAAgBse,EAAWjf,IAEhD,GAAIwd,EACA,OAAOA,KAGf,OAAOqE,GAAgCZ,EAAWjhB,EAAMwd,EAAawE,GAT3C,GAmD9B,SAASgI,GAAoCH,EAAUzC,GACnD,OAAOyD,GAA8BzD,EAAWyC,EAASN,eACxC,KAAMpI,GAAqB0I,EAASL,kBAAmB1pB,OAK5E,SAAS+qB,GAA8BzD,EAAW0D,EAAetN,EAAauH,GAC1E,GAAIrkB,GAAY0mB,EAAUpnB,MACtB,OAAO+qB,GAAyC3D,EAAW0D,EAAetN,EAAauH,GAEtF,CACD,MAAMiE,EAAY8B,EAAcplD,IAAIo6B,MAEjB,MAAf0d,GAAoC,MAAbwL,IACvBxL,EAAc4L,GAAgCJ,EAAWlpB,OAE7D,IAAIyc,EAAS,GACb,MAAMjO,EAAYvO,GAAaqnB,EAAUpnB,MACnCgrB,EAAiB5D,EAAU7L,kBAAkBjN,GAC7CgD,EAAYwZ,EAAct3C,SAAS9N,IAAI4oC,GAC7C,GAAIgD,GAAa0Z,EAAgB,CAC7B,MAAMC,EAAmBzN,EACnBA,EAAYnP,kBAAkBC,GAC9B,KACA4c,EAAmB3H,GAAkBwB,EAAazW,GACxDiO,EAASA,EAAO4M,OAAO0B,GAA8BG,EAAgB1Z,EAAW2Z,EAAkBC,IAKtG,OAHIlC,IACAzM,EAASA,EAAO4M,OAAOJ,GAAwBC,EAAW5B,EAAWrC,EAAavH,KAE/EjB,GAMf,SAASwO,GAAyC3D,EAAW0D,EAAetN,EAAauH,GACrF,MAAMiE,EAAY8B,EAAcplD,IAAIo6B,MAEjB,MAAf0d,GAAoC,MAAbwL,IACvBxL,EAAc4L,GAAgCJ,EAAWlpB,OAE7D,IAAIyc,EAAS,GAcb,OAbAuO,EAAct3C,SAAS63B,kBAAiB,CAACiD,EAAWgD,KAChD,MAAM2Z,EAAmBzN,EACnBA,EAAYnP,kBAAkBC,GAC9B,KACA4c,EAAmB3H,GAAkBwB,EAAazW,GAClD0c,EAAiB5D,EAAU7L,kBAAkBjN,GAC/C0c,IACAzO,EAASA,EAAO4M,OAAO4B,GAAyCC,EAAgB1Z,EAAW2Z,EAAkBC,QAGjHlC,IACAzM,EAASA,EAAO4M,OAAOJ,GAAwBC,EAAW5B,EAAWrC,EAAavH,KAE/EjB,EA6CX,SAAS4O,GAAwBtB,EAAUhlB,GACvC,OAAOglB,EAASH,cAAchkD,IAAIm/B,GAKtC,SAASumB,GAAuBC,GAC5B,MAAMC,EAAaD,EAASr8B,QAAQ,KAEpC,OADA,GAAuB,IAAhBs8B,GAAqBA,EAAaD,EAASjjD,OAAS,EAAG,iBACvD,CACH08B,QAASumB,EAAS98C,OAAO+8C,EAAa,GACtCtrB,KAAM,IAAIR,GAAK6rB,EAAS98C,OAAO,EAAG+8C,KAM1C,SAASC,GAA8B1B,EAAU2B,EAAWpE,GACxD,MAAM4B,EAAYa,EAASN,eAAe7jD,IAAI8lD,GAG9C,OAFA,EAAOxC,EAAW,wDAEXD,GAAwBC,EAAW5B,EADtBjG,GAAqB0I,EAASL,kBAAmBgC,GACH,MAuHtE,MAAMC,GACF5yC,YAAYijC,GACRn2C,KAAKm2C,MAAQA,EAEjBzN,kBAAkBC,GACd,MAAMiF,EAAQ5tC,KAAKm2C,MAAMzN,kBAAkBC,GAC3C,OAAO,IAAImd,GAAsBlY,GAErCtK,OACI,OAAOtjC,KAAKm2C,OAGpB,MAAM4P,GACF7yC,YAAYgxC,EAAU7pB,GAClBr6B,KAAKgmD,UAAY9B,EACjBlkD,KAAKimD,MAAQ5rB,EAEjBqO,kBAAkBC,GACd,MAAM8P,EAAY7d,GAAU56B,KAAKimD,MAAOtd,GACxC,OAAO,IAAIod,GAAsB/lD,KAAKgmD,UAAWvN,GAErDnV,OACI,OAAO2hB,GAA+BjlD,KAAKgmD,UAAWhmD,KAAKimD,QAMnE,MASMC,GAA2B,SAAU7mD,EAAO8mD,EAAaC,GAC3D,OAAK/mD,GAA0B,iBAAVA,GAGrB,EAAO,QAASA,EAAO,6CACK,iBAAjBA,EAAM,OACNgnD,GAA2BhnD,EAAM,OAAQ8mD,EAAaC,GAEhC,iBAAjB/mD,EAAM,OACXinD,GAA4BjnD,EAAM,OAAQ8mD,QAGjD,GAAO,EAAO,4BAA8BtxC,KAAKE,UAAU1V,EAAO,KAAM,KAVjEA,GAaTgnD,GAA6B,SAAUE,EAAIC,EAAUJ,GACvD,GACS,cADDG,EAEA,OAAOH,EAAwB,UAE/B,GAAO,EAAO,4BAA8BG,IAGlDD,GAA8B,SAAUC,EAAIC,EAAUC,GACnDF,EAAG35C,eAAe,cACnB,GAAO,EAAO,4BAA8BiI,KAAKE,UAAUwxC,EAAI,KAAM,IAEzE,MAAMzjB,EAAQyjB,EAAc,UACP,iBAAVzjB,GACP,GAAO,EAAO,+BAAiCA,GAEnD,MAAM4jB,EAAeF,EAASljB,OAG9B,GAFA,EAAOojB,MAAAA,EAA8D,+CAEhEA,EAAa3e,aACd,OAAOjF,EAEX,MACMqjB,EADOO,EACYnd,WACzB,MAA2B,iBAAhB4c,EACArjB,EAGJqjB,EAAcrjB,GAiBnB6jB,GAA+B,SAAUrjB,EAAMkjB,EAAUJ,GAC3D,OAAOQ,GAAqBtjB,EAAM,IAAIwiB,GAAsBU,GAAWJ,IAE3E,SAASQ,GAAqBtjB,EAAM6iB,EAAaC,GAC7C,MAAMS,EAASvjB,EAAK0E,cAAc9nC,MAC5B0nC,EAAWse,GAAyBW,EAAQV,EAAYzd,kBAAkB,aAAc0d,GAC9F,IAAIziB,EACJ,GAAIL,EAAKyE,aAAc,CACnB,MAAM+e,EAAWxjB,EACXjkC,EAAQ6mD,GAAyBY,EAASvd,WAAY4c,EAAaC,GACzE,OAAI/mD,IAAUynD,EAASvd,YACnB3B,IAAakf,EAAS9e,cAAc9nC,MAC7B,IAAIkoC,GAAS/oC,EAAOgwC,GAAazH,IAGjCtE,EAGV,CACD,MAAMyjB,EAAezjB,EAWrB,OAVAK,EAAUojB,EACNnf,IAAamf,EAAa/e,cAAc9nC,QACxCyjC,EAAUA,EAAQ6E,eAAe,IAAIJ,GAASR,KAElDmf,EAAa1d,aAAae,IAAgB,CAACzB,EAAWI,KAClD,MAAME,EAAe2d,GAAqB7d,EAAWod,EAAYzd,kBAAkBC,GAAYyd,GAC3Fnd,IAAiBF,IACjBpF,EAAUA,EAAQqF,qBAAqBL,EAAWM,OAGnDtF,GAyBf,MAAMqjB,GAMF9zC,YAAY7P,EAAO,GAAI4jD,EAAS,KAAM3jB,EAAO,CAAEz1B,SAAU,GAAIq5C,WAAY,IACrElnD,KAAKqD,KAAOA,EACZrD,KAAKinD,OAASA,EACdjnD,KAAKsjC,KAAOA,GASpB,SAAS6jB,GAAY/S,EAAMgT,GAEvB,IAAI/sB,EAAO+sB,aAAmBvtB,GAAOutB,EAAU,IAAIvtB,GAAKutB,GACpDxZ,EAAQwG,EAAMpH,EAAO5S,GAAaC,GACtC,KAAgB,OAAT2S,GAAe,CAClB,MAAMjE,EAAY,EAAQ6E,EAAMtK,KAAKz1B,SAAUm/B,IAAS,CACpDn/B,SAAU,GACVq5C,WAAY,GAEhBtZ,EAAQ,IAAIoZ,GAAKha,EAAMY,EAAO7E,GAC9B1O,EAAOE,GAAaF,GACpB2S,EAAO5S,GAAaC,GAExB,OAAOuT,EAOX,SAASyZ,GAAajT,GAClB,OAAOA,EAAK9Q,KAAKjkC,MAOrB,SAASioD,GAAalT,EAAM/0C,GACxB+0C,EAAK9Q,KAAKjkC,MAAQA,EAClBkoD,GAAkBnT,GAKtB,SAASoT,GAAgBpT,GACrB,OAAOA,EAAK9Q,KAAK4jB,WAAa,EAalC,SAASO,GAAiBrT,EAAM9V,GAC5BxY,GAAKsuB,EAAK9Q,KAAKz1B,UAAU,CAAC+/B,EAAOjC,KAC7BrN,EAAO,IAAI0oB,GAAKpZ,EAAOwG,EAAMzI,OAYrC,SAAS+b,GAAsBtT,EAAM9V,EAAQqpB,EAAaC,GAClDD,IAAgBC,GAChBtpB,EAAO8V,GAEXqT,GAAiBrT,GAAMxG,IACnB8Z,GAAsB9Z,EAAOtP,GAAQ,EAAMspB,MAE3CD,GAAeC,GACftpB,EAAO8V,GAwBf,SAASyT,GAAYzT,GACjB,OAAO,IAAIva,GAAqB,OAAhBua,EAAK6S,OACf7S,EAAK/wC,KACLwkD,GAAYzT,EAAK6S,QAAU,IAAM7S,EAAK/wC,MAKhD,SAASkkD,GAAkBnT,GACH,OAAhBA,EAAK6S,QAUb,SAAyB7S,EAAMzL,EAAWiF,GACtC,MAAMka,EA1EV,SAAqB1T,GACjB,YAA8BlxC,IAAvBmkD,GAAajT,KAAwBoT,GAAgBpT,GAyEzC2T,CAAYna,GACzBoa,EAAc,EAAS5T,EAAK9Q,KAAKz1B,SAAU86B,GAC7Cmf,GAAcE,UACP5T,EAAK9Q,KAAKz1B,SAAS86B,GAC1ByL,EAAK9Q,KAAK4jB,aACVK,GAAkBnT,IAEZ0T,GAAeE,IACrB5T,EAAK9Q,KAAKz1B,SAAS86B,GAAaiF,EAAMtK,KACtC8Q,EAAK9Q,KAAK4jB,aACVK,GAAkBnT,IApBlB6T,CAAgB7T,EAAK6S,OAAQ7S,EAAK/wC,KAAM+wC,GA2ChD,MAAM8T,GAAqB,iCAKrBC,GAAsB,+BAItBC,GAAiB,SACjB,GAAa,SAAUtjD,GACzB,MAAuB,iBAARA,GAAmC,IAAfA,EAAIrC,SAAiBylD,GAAmBp/C,KAAKhE,IAE9EujD,GAAoB,SAAUnwB,GAChC,MAA8B,iBAAfA,GACW,IAAtBA,EAAWz1B,SACV0lD,GAAoBr/C,KAAKovB,IA8B5BowB,GAAuB,SAAUC,EAAal0C,EAAM4xC,GACtD,MAAM5rB,EAAO4rB,aAAiBpsB,GAAO,IAAI2B,GAAeyqB,EAAOsC,GAAetC,EAC9E,QAAa/iD,IAATmR,EACA,MAAM,IAAIvE,MAAMy4C,EAAc,sBAAwBxsB,GAA4B1B,IAEtF,GAAoB,mBAAThmB,EACP,MAAM,IAAIvE,MAAMy4C,EACZ,uBACAxsB,GAA4B1B,GAC5B,oBACAhmB,EAAK+O,YAEb,GAAIyB,GAAoBxQ,GACpB,MAAM,IAAIvE,MAAMy4C,EACZ,YACAl0C,EAAK+O,WACL,IACA2Y,GAA4B1B,IAGpC,GAAoB,iBAAThmB,GACPA,EAAK5R,OAAS2lD,GAAiB,GAC/BzwC,EAAatD,GAAQ+zC,GACrB,MAAM,IAAIt4C,MAAMy4C,EAAAA,sDAIZxsB,GAA4B1B,GAC5B,MACAhmB,EAAKjL,UAAU,EAAG,IAClB,SAIR,GAAIiL,GAAwB,iBAATA,EAAmB,CAClC,IAAIm0C,GAAc,EACdC,GAAiB,EAqBrB,GApBA3iC,GAAKzR,GAAM,CAACvP,EAAKzF,KACb,GAAY,WAARyF,EACA0jD,GAAc,OAEb,GAAY,cAAR1jD,GAA+B,QAARA,IAC5B2jD,GAAiB,GACZ,GAAW3jD,IACZ,MAAM,IAAIgL,MAAMy4C,EACZ,6BACAzjD,EACA,KACAi3B,GAA4B1B,GAJhBkuB,yFAr8OpC,SAA4BzsB,EAAgB8R,GAEpC9R,EAAeJ,OAAOj5B,OAAS,IAC/Bq5B,EAAeH,aAAe,GAElCG,EAAeJ,OAAOz4B,KAAK2qC,GAC3B9R,EAAeH,aAAehkB,EAAai2B,GAC3C/R,GAAyBC,GAu8OjB4sB,CAAmBruB,EAAMv1B,GACzBwjD,GAAqBC,EAAalpD,EAAOg7B,GAt8OrD,SAA2ByB,GACvB,MAAM6sB,EAAO7sB,EAAeJ,OAAO/Z,MACnCma,EAAeH,aAAehkB,EAAagxC,GAEvC7sB,EAAeJ,OAAOj5B,OAAS,IAC/Bq5B,EAAeH,aAAe,GAk8O1BitB,CAAkBvuB,MAElBmuB,GAAeC,EACf,MAAM,IAAI34C,MAAMy4C,EACZ,4BACAxsB,GAA4B1B,GAC5B,sCAwGVwuB,GAAqB,SAAUpxC,EAAQqxC,EAAc5wB,EAAYte,GACnE,KAAIA,QAA2B1W,IAAfg1B,GAGXmwB,GAAkBnwB,IACnB,MAAM,IAAIpoB,MAAM,EAAY2H,EAAQqxC,GAChC,0BACA5wB,EAFY,qFAiExB,MAAM6wB,GACF71C,cACIlT,KAAKgpD,YAAc,GAInBhpD,KAAKipD,gBAAkB,GAM/B,SAASC,GAAsBC,EAAYC,GAEvC,IAAIC,EAAW,KACf,IAAK,IAAI5kD,EAAI,EAAGA,EAAI2kD,EAAc3mD,OAAQgC,IAAK,CAC3C,MAAM4P,EAAO+0C,EAAc3kD,GACrB41B,EAAOhmB,EAAKi1C,UACD,OAAbD,GAAsBhuB,GAAWhB,EAAMgvB,EAAShvB,QAChD8uB,EAAWH,YAAY/lD,KAAKomD,GAC5BA,EAAW,MAEE,OAAbA,IACAA,EAAW,CAAEzS,OAAQ,GAAIvc,KAAAA,IAE7BgvB,EAASzS,OAAO3zC,KAAKoR,GAErBg1C,GACAF,EAAWH,YAAY/lD,KAAKomD,GAyBpC,SAASE,GAAoCJ,EAAYK,EAAaJ,GAClEF,GAAsBC,EAAYC,GAItC,SAAsDD,EAAYtQ,GAC9DsQ,EAAWF,kBACX,IAAIQ,GAAU,EACd,IAAK,IAAIhlD,EAAI,EAAGA,EAAI0kD,EAAWH,YAAYvmD,OAAQgC,IAAK,CACpD,MAAMilD,EAAYP,EAAWH,YAAYvkD,GACrCilD,IAEI7Q,EADc6Q,EAAUrvB,OAExBsvB,GAAeR,EAAWH,YAAYvkD,IACtC0kD,EAAWH,YAAYvkD,GAAK,MAG5BglD,GAAU,GAIlBA,IACAN,EAAWH,YAAc,IAE7BG,EAAWF,kBAtBXW,CAA6CT,GAAYU,GAAatuB,GAAasuB,EAAWL,IAC1FjuB,GAAaiuB,EAAaK,KA0BlC,SAASF,GAAeD,GACpB,IAAK,IAAIjlD,EAAI,EAAGA,EAAIilD,EAAU9S,OAAOn0C,OAAQgC,IAAK,CAC9C,MAAM40B,EAAYqwB,EAAU9S,OAAOnyC,GACnC,GAAkB,OAAd40B,EAAoB,CACpBqwB,EAAU9S,OAAOnyC,GAAK,KACtB,MAAMqlD,EAAUzwB,EAAU0wB,iBACtB,IACA3sC,GAAI,UAAYic,EAAUjW,YAE9B0D,GAAegjC,KA+B3B,MAAME,GACF92C,YAAYmhB,EAAW41B,EAAkBvtB,EAAoBwtB,GACzDlqD,KAAKq0B,UAAYA,EACjBr0B,KAAKiqD,iBAAmBA,EACxBjqD,KAAK08B,mBAAqBA,EAC1B18B,KAAKkqD,kBAAoBA,EACzBlqD,KAAKmqD,gBAAkB,EACvBnqD,KAAK+0C,eAAiB,KACtB/0C,KAAKoqD,YAAc,IAAIrB,GACvB/oD,KAAKqqD,aAAe,EACpBrqD,KAAKsqD,6BAA+B,KAEpCtqD,KAAKqsB,cAAgBunB,KAErB5zC,KAAKuqD,sBAAwB,IAAIvD,GAEjChnD,KAAKwqD,sBAAwB,KAE7BxqD,KAAK8E,IAAM9E,KAAKq0B,UAAU3K,cAK9BtG,WACI,OAASpjB,KAAKq0B,UAAUxL,OAAS,WAAa,WAAa7oB,KAAKq0B,UAAUzL,MAGlF,SAAS6hC,GAAUC,EAAMtqC,EAAOuqC,GAE5B,GADAD,EAAK1+B,OAASxB,GAA0BkgC,EAAKr2B,WACzCq2B,EAAKT,mBAtnU4B,iBAAXv6C,QACtBA,OAAkB,WAClBA,OAAkB,UAAa,WAC/B,IAKck7C,OAAO,6FAA+F,EA+mUpHF,EAAK7V,QAAU,IAAIpC,GAAmBiY,EAAKr2B,WAAW,CAAC6D,EAAY7jB,EAAMw2C,EAAS3rB,KAC9E4rB,GAAiBJ,EAAMxyB,EAAY7jB,EAAMw2C,EAAS3rB,KACnDwrB,EAAKhuB,mBAAoBguB,EAAKR,mBAEjCziD,YAAW,IAAMsjD,GAAoBL,GAA2B,IAAO,OAEtE,CAED,GAAI,MAAOC,EAAuD,CAC9D,GAA4B,iBAAjBA,EACP,MAAM,IAAI76C,MAAM,sEAEpB,IACI,EAAU66C,GAEd,MAAOz+C,GACH,MAAM,IAAI4D,MAAM,kCAAoC5D,IAG5Dw+C,EAAKF,sBAAwB,IAAIluB,GAAqBouB,EAAKr2B,UAAWjU,GAAO,CAAC8X,EAAY7jB,EAAMw2C,EAAS3rB,KACrG4rB,GAAiBJ,EAAMxyB,EAAY7jB,EAAMw2C,EAAS3rB,MAClD8rB,IACAD,GAAoBL,EAAMM,MAC1BtQ,KA0GZ,SAAgCgQ,EAAMhQ,GAClC50B,GAAK40B,GAAS,CAAC51C,EAAKzF,KAChB4rD,GAAeP,EAAM5lD,EAAKzF,MA3GtB6rD,CAAuBR,EAAMhQ,KAC9BgQ,EAAKhuB,mBAAoBguB,EAAKR,kBAAmBS,GACpDD,EAAK7V,QAAU6V,EAAKF,sBAExBE,EAAKhuB,mBAAmBlV,wBAAuBvS,IAC3Cy1C,EAAK7V,QAAQxc,iBAAiBpjB,MAElCy1C,EAAKR,kBAAkB1iC,wBAAuB9oB,IAC1CgsD,EAAK7V,QAAQvc,qBAAqB55B,EAAOuW,UAI7Cy1C,EAAKS,eAjwTT,SAAyCthC,EAAUuhC,GAC/C,MAAM3gC,EAAaZ,EAASzG,WAI5B,OAHKmH,GAAUE,KACXF,GAAUE,GA8vT8D,IAAIkqB,GAAc+V,EAAK1+B,OAAQ0+B,EAAK7V,UA5vTzGtqB,GAAUE,GA4vTK4gC,CAAgCX,EAAKr2B,WAE3Dq2B,EAAKY,UAAY,IAAI/X,GACrBmX,EAAKa,cAAgB,IAAI7H,GAAS,CAC9B8H,eAAgB,CAAC5oD,EAAOs8B,EAAKD,EAAet0B,KACxC,IAAI8gD,EAAa,GACjB,MAAMnoB,EAAOonB,EAAKY,UAAU7X,QAAQ7wC,EAAM+7B,OAS1C,OANK2E,EAAKwB,YACN2mB,EAAazG,GAA6B0F,EAAKa,cAAe3oD,EAAM+7B,MAAO2E,GAC3E77B,YAAW,KACPkD,EAAW,QACZ,IAEA8gD,GAEXC,cAAe,SAEnBT,GAAeP,EAAM,aAAa,GAClCA,EAAKiB,gBAAkB,IAAIjI,GAAS,CAChC8H,eAAgB,CAAC5oD,EAAOs8B,EAAKD,EAAet0B,KACxC+/C,EAAK7V,QAAQ7V,OAAOp8B,EAAOq8B,EAAeC,GAAK,CAACt5B,EAAQyO,KACpD,MAAMuiC,EAASjsC,EAAW/E,EAAQyO,GAClCk1C,GAAoCmB,EAAKN,YAAaxnD,EAAM+7B,MAAOiY,MAGhE,IAEX8U,cAAe,CAAC9oD,EAAOs8B,KACnBwrB,EAAK7V,QAAQhU,SAASj+B,EAAOs8B,MAOzC,SAAS0sB,GAAelB,GACpB,MACM3zC,EADa2zC,EAAKY,UAAU7X,QAAQ,IAAI5Z,GAAK,2BACzB35B,OAAS,EACnC,OAAO,IAAIiT,MAAOC,UAAY2D,EAKlC,SAAS80C,GAAyBnB,GAC9B,OApyBAnwC,GADiCA,EAqyBP,CACtBkd,UAAWm0B,GAAelB,MAryBX,IACD,UAAInwC,EAAkB,YAAK,IAAIpH,MAAOC,UACjDmH,EAHgB,IAAUA,EA4yBrC,SAASuwC,GAAiBJ,EAAMxyB,EAAY7jB,EAAMw2C,EAAS3rB,GAEvDwrB,EAAKP,kBACL,MAAM9vB,EAAO,IAAIR,GAAK3B,GACtB7jB,EAAOq2C,EAAKJ,6BACNI,EAAKJ,6BAA6BpyB,EAAY7jB,GAC9CA,EACN,IAAIuiC,EAAS,GACb,GAAI1X,EACA,GAAI2rB,EAAS,CACT,MAAMiB,EAAiBv+C,EAAI8G,GAAO03C,GAAQ1c,GAAa0c,KACvDnV,EAhtCZ,SAAuCsN,EAAU7pB,EAAM2mB,EAAiB9hB,GACpE,MAAMwmB,EAAWF,GAAwBtB,EAAUhlB,GACnD,GAAIwmB,EAAU,CACV,MAAMjnB,EAAIgnB,GAAuBC,GAC3BG,EAAYpnB,EAAEpE,KAAM8E,EAAUV,EAAEU,QAChCyZ,EAAe5d,GAAgB6qB,EAAWxrB,GAC1C2xB,EAAazT,GAAc0T,WAAWjL,GAE5C,OAAO4E,GAA8B1B,EAAU2B,EADpC,IAAI7P,GAAMZ,GAAoCjW,GAAUyZ,EAAcoT,IAKjF,MAAO,GAosCME,CAA8BxB,EAAKiB,gBAAiBtxB,EAAMyxB,EAAgB5sB,OAElF,CACD,MAAMitB,EAAa9c,GAAah7B,GAChCuiC,EAvuCZ,SAA2CsN,EAAU7pB,EAAM2V,EAAM9Q,GAC7D,MAAMwmB,EAAWF,GAAwBtB,EAAUhlB,GACnD,GAAgB,MAAZwmB,EAAkB,CAClB,MAAMjnB,EAAIgnB,GAAuBC,GAC3BG,EAAYpnB,EAAEpE,KAAM8E,EAAUV,EAAEU,QAChCyZ,EAAe5d,GAAgB6qB,EAAWxrB,GAEhD,OAAOurB,GAA8B1B,EAAU2B,EADpC,IAAI/P,GAAUV,GAAoCjW,GAAUyZ,EAAc5I,IAKrF,MAAO,GA4tCMoc,CAAkC1B,EAAKiB,gBAAiBtxB,EAAM8xB,EAAYjtB,QAGtF,GAAI2rB,EAAS,CACd,MAAM7J,EAAkBzzC,EAAI8G,GAAO03C,GAAQ1c,GAAa0c,KACxDnV,EA51CR,SAAkCsN,EAAU7pB,EAAM2mB,GAC9C,MAAMgL,EAAazT,GAAc0T,WAAWjL,GAC5C,OAAOqD,GAAoCH,EAAU,IAAIlO,GAr2ElD,CACHX,UAAU,EACVC,YAAY,EACZnW,QAAS,KACToW,QAAQ,GAi2E+Elb,EAAM2xB,IA01CpFK,CAAyB3B,EAAKiB,gBAAiBtxB,EAAM2mB,OAE7D,CACD,MAAMhR,EAAOX,GAAah7B,GAC1BuiC,EAASoO,GAA6B0F,EAAKiB,gBAAiBtxB,EAAM2V,GAEtE,IAAIsc,EAAejyB,EACfuc,EAAOn0C,OAAS,IAGhB6pD,EAAeC,GAAsB7B,EAAMrwB,IAE/CkvB,GAAoCmB,EAAKN,YAAakC,EAAc1V,GAExE,SAASmU,GAAoBL,EAAMM,GAC/BC,GAAeP,EAAM,YAAaM,IACZ,IAAlBA,GAsHR,SAAmCN,GAC/B8B,GAAQ9B,EAAM,sBACd,MAAMtE,EAAeyF,GAAyBnB,GACxC+B,EAA2B7Y,KACjCK,GAA8ByW,EAAKr+B,cAAe8N,MAAgB,CAACE,EAAMiJ,KACrE,MAAMopB,EA94BmB,SAAUryB,EAAMiJ,EAAM4gB,EAAUkC,GAC7D,OAAOQ,GAAqBtjB,EAAM,IAAIyiB,GAAsB7B,EAAU7pB,GAAO+rB,GA64BxDuG,CAAyBtyB,EAAMiJ,EAAMonB,EAAKiB,gBAAiBvF,GAC5EvS,GAA2B4Y,EAA0BpyB,EAAMqyB,MAE/D,IAAI9V,EAAS,GACb3C,GAA8BwY,EAA0BtyB,MAAgB,CAACE,EAAM2V,KAC3E4G,EAASA,EAAO4M,OAAOwB,GAA6B0F,EAAKiB,gBAAiBtxB,EAAM2V,IAChF,MAAMsc,EAAeM,GAAsBlC,EAAMrwB,GACjDkyB,GAAsB7B,EAAM4B,MAEhC5B,EAAKr+B,cAAgBunB,KACrB2V,GAAoCmB,EAAKN,YAAajwB,KAAgByc,GApIlEiW,CAA0BnC,GAQlC,SAASO,GAAeP,EAAMxyB,EAAY74B,GACtC,MAAMg7B,EAAO,IAAIR,GAAK,UAAY3B,GAC5ByL,EAAU0L,GAAahwC,GAC7BqrD,EAAKY,UAAU5X,eAAerZ,EAAMsJ,GACpC,MAAMiT,EAASoO,GAA6B0F,EAAKa,cAAelxB,EAAMsJ,GACtE4lB,GAAoCmB,EAAKN,YAAa/vB,EAAMuc,GAEhE,SAASkW,GAAmBpC,GACxB,OAAOA,EAAKL,eAiChB,SAAS0C,GAAoBrC,EAAMrwB,EAAM2yB,EAAQlf,EAAanjC,GAC1D6hD,GAAQ9B,EAAM,MAAO,CACjBrwB,KAAMA,EAAKjX,WACX/jB,MAAO2tD,EACPplB,SAAUkG,IAId,MAAMsY,EAAeyF,GAAyBnB,GACxCuC,EAAoB5d,GAAa2d,EAAQlf,GACzC0Y,EAAWvB,GAA+ByF,EAAKiB,gBAAiBtxB,GAChEsJ,EAAUgjB,GAA6BsG,EAAmBzG,EAAUJ,GACpE5J,EAAUsQ,GAAmBpC,GAC7B9T,EAASqN,GAA2ByG,EAAKiB,gBAAiBtxB,EAAMsJ,EAAS6Y,GAAS,GACxF0M,GAAsBwB,EAAKN,YAAaxT,GACxC8T,EAAK7V,QAAQ30B,IAAIma,EAAKjX,WAAY6pC,EAAkB/sD,KAAgB,IAAO,CAAC0F,EAAQy7B,KAChF,MAAM6rB,EAAqB,OAAXtnD,EACXsnD,GACD5vC,GAAK,UAAY+c,EAAO,YAAcz0B,GAE1C,MAAMunD,EAAc7I,GAAqBoG,EAAKiB,gBAAiBnP,GAAU0Q,GACzE3D,GAAoCmB,EAAKN,YAAa/vB,EAAM8yB,GAiJpE,SAAoCzC,EAAMloD,EAAUoD,EAAQy7B,GACpD7+B,GACAskB,IAAe,KACX,GAAe,OAAXlhB,EACApD,EAAS,UAER,CACD,MAAMmR,GAAQ/N,GAAU,SAASwnD,cACjC,IAAIx9C,EAAU+D,EACV0tB,IACAzxB,GAAW,KAAOyxB,GAEtB,MAAMziC,EAAQ,IAAIkR,MAAMF,GAExBhR,EAAM+U,KAAOA,EACbnR,EAAS5D,OA/JjByuD,CAA2B3C,EAAM//C,EAAY/E,EAAQy7B,MAEzD,MAAMirB,EAAeM,GAAsBlC,EAAMrwB,GACjDkyB,GAAsB7B,EAAM4B,GAE5B/C,GAAoCmB,EAAKN,YAAakC,EAAc,IAoIxE,SAASE,GAAQ9B,KAAStmC,GACtB,IAAIO,EAAS,GACT+lC,EAAKF,wBACL7lC,EAAS+lC,EAAKF,sBAAsBvmD,GAAK,KAE7CmZ,GAAIuH,KAAWP,GA+GnB,SAASkpC,GAAmB5C,EAAMrwB,EAAMkzB,GACpC,OAAQtI,GAA+ByF,EAAKiB,gBAAiBtxB,EAAMkzB,IAC/D9f,GAAajI,WAWrB,SAASgoB,GAA0B9C,EAAMpnB,EAAOonB,EAAKH,uBAKjD,GAHKjnB,GACDmqB,GAAwC/C,EAAMpnB,GAE9C+jB,GAAa/jB,GAAO,CACpB,MAAMoqB,EAAQC,GAA0BjD,EAAMpnB,GAC9C,EAAOoqB,EAAMjrD,OAAS,EAAG,yCACVirD,EAAME,OAAOlsD,GAAuC,IAAvBA,EAAYkE,UAmBhE,SAAkC8kD,EAAMrwB,EAAMqzB,GAE1C,MAAMG,EAAeH,EAAMngD,KAAIugD,GACpBA,EAAIC,iBAETC,EAAcV,GAAmB5C,EAAMrwB,EAAMwzB,GACnD,IAAII,EAAaD,EACjB,MAAME,EAAaF,EAAY71B,OAC/B,IAAK,IAAI1zB,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IAAK,CACnC,MAAMqpD,EAAMJ,EAAMjpD,GAClB,EAAsB,IAAfqpD,EAAIloD,OAAwB,iEACnCkoD,EAAIloD,OAAS,EACbkoD,EAAIK,aACJ,MAAMvV,EAAe5d,GAAgBX,EAAMyzB,EAAIzzB,MAE/C4zB,EAAaA,EAAW/kB,YAAY0P,EAAmCkV,EAAIM,0BAE/E,MAAMC,EAAaJ,EAAW/tD,KAAI,GAC5BouD,EAAaj0B,EAEnBqwB,EAAK7V,QAAQ30B,IAAIouC,EAAWlrC,WAAYirC,GAAazoD,IACjD4mD,GAAQ9B,EAAM,2BAA4B,CACtCrwB,KAAMi0B,EAAWlrC,WACjBxd,OAAAA,IAEJ,IAAIgxC,EAAS,GACb,GAAe,OAAXhxC,EAAiB,CAIjB,MAAMyV,EAAY,GAClB,IAAK,IAAI5W,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IAC9BipD,EAAMjpD,GAAGmB,OAAS,EAClBgxC,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiB+B,EAAMjpD,GAAGspD,iBACvEL,EAAMjpD,GAAGkG,YAGT0Q,EAAUpY,MAAK,IAAMyqD,EAAMjpD,GAAGkG,WAAW,MAAM,EAAM+iD,EAAMjpD,GAAG8pD,iCAElEb,EAAMjpD,GAAG+pD,YAGbf,GAAwC/C,EAAMvD,GAAYuD,EAAKH,sBAAuBlwB,IAEtFmzB,GAA0B9C,EAAMA,EAAKH,uBACrChB,GAAoCmB,EAAKN,YAAa/vB,EAAMuc,GAE5D,IAAK,IAAInyC,EAAI,EAAGA,EAAI4W,EAAU5Y,OAAQgC,IAClCqiB,GAAezL,EAAU5W,QAG5B,CAED,GAAe,cAAXmB,EACA,IAAK,IAAInB,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IACN,IAApBipD,EAAMjpD,GAAGmB,OACT8nD,EAAMjpD,GAAGmB,OAAS,EAGlB8nD,EAAMjpD,GAAGmB,OAAS,MAIzB,CACD0X,GAAK,kBAAoBgxC,EAAWlrC,WAAa,YAAcxd,GAC/D,IAAK,IAAInB,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IAC9BipD,EAAMjpD,GAAGmB,OAAS,EAClB8nD,EAAMjpD,GAAGgqD,YAAc7oD,EAG/B2mD,GAAsB7B,EAAMrwB,MAEjC6zB,GAxFKQ,CAAyBhE,EAAM7C,GAAYvkB,GAAOoqB,QAGjDlG,GAAgBlkB,IACrBmkB,GAAiBnkB,GAAMyF,IACnBykB,GAA0B9C,EAAM3hB,MAgG5C,SAASwjB,GAAsB7B,EAAMlB,GACjC,MAAMmF,EAA0BC,GAA+BlE,EAAMlB,GAC/DnvB,EAAOwtB,GAAY8G,GAGzB,OASJ,SAAmCjE,EAAMgD,EAAOrzB,GAC5C,GAAqB,IAAjBqzB,EAAMjrD,OACN,OAKJ,MAAM4Y,EAAY,GAClB,IAAIu7B,EAAS,GAEb,MAGMiX,EAHcH,EAAMjzC,QAAOmkB,GACT,IAAbA,EAAEh5B,SAEoB2H,KAAIqxB,GAC1BA,EAAEmvB,iBAEb,IAAK,IAAItpD,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IAAK,CACnC,MAAM/C,EAAcgsD,EAAMjpD,GACpBm0C,EAAe5d,GAAgBX,EAAM34B,EAAY24B,MACvD,IAA8Bo0B,EAA1BI,GAAmB,EAEvB,GADA,EAAwB,OAAjBjW,EAAuB,iEACH,IAAvBl3C,EAAYkE,OACZipD,GAAmB,EACnBJ,EAAc/sD,EAAY+sD,YAC1B7X,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiBjqD,EAAYqsD,gBAAgB,SAE7F,GAA2B,IAAvBrsD,EAAYkE,OACjB,GAAIlE,EAAYysD,YA1oBI,GA2oBhBU,GAAmB,EACnBJ,EAAc,WACd7X,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiBjqD,EAAYqsD,gBAAgB,QAE7F,CAED,MAAMe,EAAcxB,GAAmB5C,EAAMhpD,EAAY24B,KAAMwzB,GAC/DnsD,EAAYqtD,qBAAuBD,EACnC,MAAM3K,EAAUuJ,EAAMjpD,GAAG0S,OAAO23C,EAAY5uD,OAC5C,QAAgBgD,IAAZihD,EAAuB,CACvBmE,GAAqB,qCAAsCnE,EAASziD,EAAY24B,MAChF,IAAI20B,EAAc3f,GAAa8U,GACgB,iBAAZA,GACpB,MAAXA,GACA,EAASA,EAAS,eAGlB6K,EAAcA,EAAYxmB,eAAesmB,EAAY9mB,gBAEzD,MAAMinB,EAAavtD,EAAYqsD,eACzB3H,EAAeyF,GAAyBnB,GACxCwE,EAAkBvI,GAA6BqI,EAAaF,EAAa1I,GAC/E1kD,EAAY0sD,yBAA2BY,EACvCttD,EAAY6sD,8BAAgCW,EAC5CxtD,EAAYqsD,eAAiBjB,GAAmBpC,GAEhDmD,EAAar0B,OAAOq0B,EAAaxkC,QAAQ4lC,GAAa,GACtDrY,EAASA,EAAO4M,OAAOS,GAA2ByG,EAAKiB,gBAAiBjqD,EAAY24B,KAAM60B,EAAiBxtD,EAAYqsD,eAAgBrsD,EAAYytD,eACnJvY,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiBsD,GAAY,SAG9EJ,GAAmB,EACnBJ,EAAc,SACd7X,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiBjqD,EAAYqsD,gBAAgB,IAI1GxE,GAAoCmB,EAAKN,YAAa/vB,EAAMuc,GAC5DA,EAAS,GACLiY,IAEAnB,EAAMjpD,GAAGmB,OAAS,EAIP4oD,EAERd,EAAMjpD,GAAG+pD,UADR/mD,WAAW+mD,EAAWvjD,KAAKob,MAAM,IAEjCqnC,EAAMjpD,GAAGkG,aACW,WAAhB8jD,EACApzC,EAAUpY,MAAK,IAAMyqD,EAAMjpD,GAAGkG,WAAW,MAAM,EAAO+iD,EAAMjpD,GAAGsqD,wBAG/D1zC,EAAUpY,MAAK,IAAMyqD,EAAMjpD,GAAGkG,WAAW,IAAImF,MAAM2+C,IAAc,EAAO,UARhF,IAAWD,EAcnBf,GAAwC/C,EAAMA,EAAKH,uBAEnD,IAAK,IAAI9lD,EAAI,EAAGA,EAAI4W,EAAU5Y,OAAQgC,IAClCqiB,GAAezL,EAAU5W,IAG7B+oD,GAA0B9C,EAAMA,EAAKH,uBAvGrC6E,CAA0B1E,EADZiD,GAA0BjD,EAAMiE,GACPt0B,GAChCA,EAgHX,SAASu0B,GAA+BlE,EAAMrwB,GAC1C,IAAI8O,EAGAkmB,EAAkB3E,EAAKH,sBAE3B,IADAphB,EAAQ/O,GAAaC,GACJ,OAAV8O,QAAoDjmC,IAAlCmkD,GAAagI,IAClCA,EAAkBlI,GAAYkI,EAAiBlmB,GAE/CA,EAAQ/O,GADRC,EAAOE,GAAaF,IAGxB,OAAOg1B,EASX,SAAS1B,GAA0BjD,EAAM2E,GAErC,MAAMC,EAAmB,GAIzB,OAHAC,GAAsC7E,EAAM2E,EAAiBC,GAE7DA,EAAiBjkD,MAAK,CAAC+D,EAAGuG,IAAMvG,EAAEogD,MAAQ75C,EAAE65C,QACrCF,EAEX,SAASC,GAAsC7E,EAAMpnB,EAAMoqB,GACvD,MAAM+B,EAAYpI,GAAa/jB,GAC/B,GAAImsB,EACA,IAAK,IAAIhrD,EAAI,EAAGA,EAAIgrD,EAAUhtD,OAAQgC,IAClCipD,EAAMzqD,KAAKwsD,EAAUhrD,IAG7BgjD,GAAiBnkB,GAAMsK,IACnB2hB,GAAsC7E,EAAM9c,EAAO8f,MAM3D,SAASD,GAAwC/C,EAAMpnB,GACnD,MAAMoqB,EAAQrG,GAAa/jB,GAC3B,GAAIoqB,EAAO,CACP,IAAIgC,EAAK,EACT,IAAK,IAAIp1C,EAAO,EAAGA,EAAOozC,EAAMjrD,OAAQ6X,IACT,IAAvBozC,EAAMpzC,GAAM1U,SACZ8nD,EAAMgC,GAAMhC,EAAMpzC,GAClBo1C,KAGRhC,EAAMjrD,OAASitD,EACfpI,GAAahkB,EAAMoqB,EAAMjrD,OAAS,EAAIirD,OAAQxqD,GAElDukD,GAAiBnkB,GAAMyF,IACnB0kB,GAAwC/C,EAAM3hB,MAUtD,SAAS6jB,GAAsBlC,EAAMrwB,GACjC,MAAMiyB,EAAezE,GAAY+G,GAA+BlE,EAAMrwB,IAChEg1B,EAAkBlI,GAAYuD,EAAKH,sBAAuBlwB,GAQhE,OAnvCJ,SAA6B+Z,EAAM9V,EAAQqpB,GACvC,IAAIrkB,EAA4B8Q,EAAK6S,OACrC,KAAgB,OAAT3jB,GAAe,CAClB,GAAIhF,EAAOgF,GACP,OAAO,EAEXA,EAAOA,EAAK2jB,QAsuChB0I,CAAoBN,GAAkB/rB,IAClCssB,GAA4BlF,EAAMpnB,MAEtCssB,GAA4BlF,EAAM2E,GAClC3H,GAAsB2H,GAAkB/rB,IACpCssB,GAA4BlF,EAAMpnB,MAE/BgpB,EAOX,SAASsD,GAA4BlF,EAAMpnB,GACvC,MAAMoqB,EAAQrG,GAAa/jB,GAC3B,GAAIoqB,EAAO,CAIP,MAAMryC,EAAY,GAGlB,IAAIu7B,EAAS,GACTiZ,GAAY,EAChB,IAAK,IAAIprD,EAAI,EAAGA,EAAIipD,EAAMjrD,OAAQgC,IACN,IAApBipD,EAAMjpD,GAAGmB,SACgB,IAApB8nD,EAAMjpD,GAAGmB,QACd,EAAOiqD,IAAaprD,EAAI,EAAG,mDAC3BorD,EAAWprD,EAEXipD,EAAMjpD,GAAGmB,OAAS,EAClB8nD,EAAMjpD,GAAGgqD,YAAc,QAGvB,EAA2B,IAApBf,EAAMjpD,GAAGmB,OAAwB,0CAExC8nD,EAAMjpD,GAAG+pD,YACT5X,EAASA,EAAO4M,OAAOc,GAAqBoG,EAAKiB,gBAAiB+B,EAAMjpD,GAAGspD,gBAAgB,IACvFL,EAAMjpD,GAAGkG,YACT0Q,EAAUpY,KAAKyqD,EAAMjpD,GAAGkG,WAAW8Z,KAAK,KAAM,IAAI3U,MAAM,QAAQ,EAAO,UAIjE,IAAd+/C,EAEAvI,GAAahkB,OAAMpgC,GAInBwqD,EAAMjrD,OAASotD,EAAW,EAG9BtG,GAAoCmB,EAAKN,YAAavC,GAAYvkB,GAAOsT,GACzE,IAAK,IAAInyC,EAAI,EAAGA,EAAI4W,EAAU5Y,OAAQgC,IAClCqiB,GAAezL,EAAU5W,KA0DrC,MAAMqrD,GAAgB,SAAUC,EAAS/mC,GACrC,MAAMgnC,EAAYC,GAAiBF,GAAUjnC,EAAYknC,EAAUlnC,UAC1C,iBAArBknC,EAAUrgC,QACV/K,GAAMorC,EAAUpnC,KAAVonC,8EAKJlnC,GAA2B,cAAdA,GACM,cAArBknC,EAAUrgC,QACV/K,GAAM,gFAELorC,EAAUnnC,QA5zWO,oBAAXnZ,QACPA,OAAOme,UACPne,OAAOme,SAASlE,WACgC,IAAhDja,OAAOme,SAASlE,SAASN,QAAQ,WACjC/L,GAAK,6FA2zWT,MAAMyL,EAAqC,OAArBinC,EAAUE,QAAwC,QAArBF,EAAUE,OAC7D,MAAO,CACHrmC,SAAU,IAAIlB,GAASqnC,EAAUpnC,KAAMonC,EAAUnnC,OAAQC,EAAWE,EAAWD,EAC3D,GACeD,IAAcknC,EAAUG,WAC3D91B,KAAM,IAAIR,GAAKm2B,EAAU93B,cAG3B+3B,GAAmB,SAAUF,GAE/B,IAAInnC,EAAO,GAAI+G,EAAS,GAAIwgC,EAAY,GAAIj4B,EAAa,GAAIpP,EAAY,GAErED,GAAS,EAAMqnC,EAAS,QAASE,EAAO,IAE5C,GAAuB,iBAAZL,EAAsB,CAE7B,IAAIM,EAAWN,EAAQ1mC,QAAQ,MAC3BgnC,GAAY,IACZH,EAASH,EAAQ3mD,UAAU,EAAGinD,EAAW,GACzCN,EAAUA,EAAQ3mD,UAAUinD,EAAW,IAG3C,IAAIC,EAAWP,EAAQ1mC,QAAQ,MACb,IAAdinC,IACAA,EAAWP,EAAQttD,QAEvB,IAAI8tD,EAAkBR,EAAQ1mC,QAAQ,MACb,IAArBknC,IACAA,EAAkBR,EAAQttD,QAE9BmmB,EAAOmnC,EAAQ3mD,UAAU,EAAG6B,KAAKmb,IAAIkqC,EAAUC,IAC3CD,EAAWC,IAEXr4B,EArFZ,SAAoBA,GAChB,IAAIs4B,EAAoB,GACxB,MAAM71B,EAASzC,EAAW5iB,MAAM,KAChC,IAAK,IAAI7Q,EAAI,EAAGA,EAAIk2B,EAAOl4B,OAAQgC,IAC/B,GAAIk2B,EAAOl2B,GAAGhC,OAAS,EAAG,CACtB,IAAIguD,EAAQ91B,EAAOl2B,GACnB,IACIgsD,EAAQC,mBAAmBD,EAAMluD,QAAQ,MAAO,MAEpD,MAAO2J,IACPskD,GAAqB,IAAMC,EAGnC,OAAOD,EAwEcG,CAAWZ,EAAQ3mD,UAAUknD,EAAUC,KAExD,MAAMne,EArEd,SAAqBwe,GACjB,MAAMC,EAAU,GACc,MAA1BD,EAAY/nD,OAAO,KACnB+nD,EAAcA,EAAYxnD,UAAU,IAExC,IAAK,MAAM0nD,KAAWF,EAAYt7C,MAAM,KAAM,CAC1C,GAAuB,IAAnBw7C,EAAQruD,OACR,SAEJ,MAAMsuD,EAAKD,EAAQx7C,MAAM,KACP,IAAdy7C,EAAGtuD,OACHouD,EAAQH,mBAAmBK,EAAG,KAAOL,mBAAmBK,EAAG,IAG3DzzC,GAAK,0BAA0BwzC,gBAAsBF,MAG7D,OAAOC,EAoDiBG,CAAYjB,EAAQ3mD,UAAU6B,KAAKmb,IAAI2pC,EAAQttD,OAAQ8tD,KAE3EF,EAAWznC,EAAKS,QAAQ,KACpBgnC,GAAY,GACZxnC,EAAoB,UAAXqnC,GAAiC,QAAXA,EAC/BE,EAAOnnD,SAAS2f,EAAKxf,UAAUinD,EAAW,GAAI,KAG9CA,EAAWznC,EAAKnmB,OAEpB,MAAMwuD,EAAkBroC,EAAK1qB,MAAM,EAAGmyD,GACtC,GAAsC,cAAlCY,EAAgB9jD,cAChBwiB,EAAS,iBAER,GAAIshC,EAAgB37C,MAAM,KAAK7S,QAAU,EAC1CktB,EAASshC,MAER,CAED,MAAMC,EAAStoC,EAAKS,QAAQ,KAC5B8mC,EAAYvnC,EAAKxf,UAAU,EAAG8nD,GAAQ/jD,cACtCwiB,EAAS/G,EAAKxf,UAAU8nD,EAAS,GAEjCpoC,EAAYqnC,EAGZ,OAAQ/d,IACRtpB,EAAYspB,EAAgB,IAGpC,MAAO,CACHxpB,KAAAA,EACAwnC,KAAAA,EACAzgC,OAAAA,EACAwgC,UAAAA,EACAtnC,OAAAA,EACAqnC,OAAAA,EACAh4B,WAAAA,EACApP,UAAAA,IA0RR,MAAMqoC,GAIFj+C,YAAYk+C,EAAOzyB,EAAOU,EAAcgyB,GACpCrxD,KAAKoxD,MAAQA,EACbpxD,KAAK2+B,MAAQA,EACb3+B,KAAKq/B,aAAeA,EACpBr/B,KAAKqxD,eAAiBA,EAEtBvsD,UACA,OAAIi2B,GAAY/6B,KAAK2+B,OACV,KAGAnE,GAAYx6B,KAAK2+B,OAG5B2yB,UACA,OAAO,IAAIC,GAAcvxD,KAAKoxD,MAAOpxD,KAAK2+B,OAE1CS,uBACA,MAAMtgC,EAAMyzC,GAA0BvyC,KAAKq/B,cACrCp7B,EAAKwhB,GAAkB3mB,GAC7B,MAAc,OAAPmF,EAAc,UAAYA,EAKjC46B,mBACA,OAAO0T,GAA0BvyC,KAAKq/B,cAE1CmyB,QAAQl2B,GAEJ,MADAA,EAAQ,EAAmBA,cACJ61B,IACnB,OAAO,EAEX,MAAMM,EAAWzxD,KAAKoxD,QAAU91B,EAAM81B,MAChCM,EAAWr2B,GAAWr7B,KAAK2+B,MAAOrD,EAAMqD,OACxCgzB,EAAsB3xD,KAAKo/B,mBAAqB9D,EAAM8D,iBAC5D,OAAOqyB,GAAYC,GAAYC,EAEnCC,SACI,OAAO5xD,KAAKojB,WAEhBA,WACI,OAAOpjB,KAAKoxD,MAAMhuC,WAzrS1B,SAAgCiX,GAC5B,IAAInC,EAAa,GACjB,IAAK,IAAIzzB,EAAI41B,EAAKH,UAAWz1B,EAAI41B,EAAKL,QAAQv3B,OAAQgC,IAC1B,KAApB41B,EAAKL,QAAQv1B,KACbyzB,GAAc,IAAMgb,mBAAmB/gC,OAAOkoB,EAAKL,QAAQv1B,MAGnE,OAAOyzB,GAAc,IAkrSc25B,CAAuB7xD,KAAK2+B,QAgFnE,MAAM4yB,WAAsBJ,GAExBj+C,YAAYw3C,EAAMrwB,GACdxmB,MAAM62C,EAAMrwB,EAAM,IAAImW,IAAe,GAErCyW,aACA,MAAM6K,EAAap3B,GAAW16B,KAAK2+B,OACnC,OAAsB,OAAfmzB,EACD,KACA,IAAIP,GAAcvxD,KAAKoxD,MAAOU,GAEpCvmB,WACA,IAAI+lB,EAAMtxD,KACV,KAAsB,OAAfsxD,EAAIrK,QACPqK,EAAMA,EAAIrK,OAEd,OAAOqK,GAiMf,SAASA,GAAI9vD,EAAI64B,GAGb,OAFA74B,EAAK,EAAmBA,IACrBuwD,iBAAiB,YACJ7uD,IAATm3B,EA+CX,SAAe4sB,EAAQ5sB,GA/yDQ,IAAU5iB,EAAQqxC,EAAc5wB,EAAYte,EAuzDvE,OANmC,OAA/BwgB,IADJ6sB,EAAS,EAAmBA,IACJtoB,QAjzDalnB,EAkzDV,QAlzDkBqxC,EAkzDT,OAlzDmClvC,GAkzDrB,GAlzDSse,EAkzDfmC,KA/yDxCnC,EAAaA,EAAW31B,QAAQ,mBAAoB,MAExDsmD,GAAmBpxC,EAAQqxC,EAAc5wB,EAAYte,IAgzDjDivC,GAAmB,QAAS,OAAQxuB,GAAM,GAEvC,IAAIk3B,GAActK,EAAOmK,MAAOx2B,GAAUqsB,EAAOtoB,MAAOtE,IAvDnCuT,CAAMpsC,EAAGwwD,MAAO33B,GAAQ74B,EAAGwwD,MAmK3D,SAAS/xD,GAAIqxD,EAAKjyD,IAz5DW,SAAUoY,EAAQ4iB,GAC3C,GAA2B,UAAvBD,GAAaC,GACb,MAAM,IAAIvqB,MAAM2H,EAAS,8CAy5D7Bw6C,CAAqB,OADrBX,EAAM,EAAmBA,IACO3yB,OA/lEJ,SAAUlnB,EAAQpY,EAAOg7B,EAAMzgB,GACvDA,QAAsB1W,IAAV7D,GAGhBipD,GAAqB,EAAY7wC,EAAQ,SAAUpY,EAAOg7B,GA4lE1D63B,CAAwB,MAAO7yD,EAAOiyD,EAAI3yB,OAAO,GACjD,MAAMtlB,EAAW,IAAI,EAGrB,OAFA0zC,GAAoBuE,EAAIF,MAAOE,EAAI3yB,MAAOt/B,EAC5B,KAAMga,EAAS/F,cAAa,UACnC+F,EAAShG,SAvvGpB,SAA0CnT,GACtC,GAAQgjD,GAAwB,mDAChCA,GAAyBhjD,EAw7H7BiyD,CAAiCZ,IA/vHjC,SAAyCrxD,GACrC,GAAQijD,GAAsB,mDAC9BA,GAAuBjjD,EA8vH3BkyD,CAAgCb,IA0BhC,MAIMc,GAAQ,GAmBd,SAASC,GAA2Bn0C,EAAKo0C,EAAcnrC,EAAkB4J,EAAKhI,GAC1E,IAAIwpC,EAAQxhC,GAAO7S,EAAI9Y,QAAQotD,iBACjBvvD,IAAVsvD,IACKr0C,EAAI9Y,QAAQqtD,WACb9tC,GAAM,kHAGVxH,GAAI,kCAAmCe,EAAI9Y,QAAQqtD,WACnDF,EAAQ,GAAGr0C,EAAI9Y,QAAQqtD,yCAE3B,IAEIC,EACAC,EAHA5C,EAAYF,GAAc0C,EAAOxpC,GACjCa,EAAWmmC,EAAUnmC,SAGF,oBAAZgpC,UACPD,EAAiBC,QAAQC,IAAuC,iCAEhEF,GACAD,GAAa,EACbH,EAAQ,UAAUI,QAAqB/oC,EAASf,YAChDknC,EAAYF,GAAc0C,EAAOxpC,GACjCa,EAAWmmC,EAAUnmC,UAGrB8oC,GAAc3C,EAAUnmC,SAAShB,OAErC,MAAMkqC,EAAoB/pC,GAAa2pC,EACjC,IAAItqC,GAAsBA,GAAsBE,OAChD,IAAIX,GAA0BzJ,EAAI9a,KAAM8a,EAAI9Y,QAASktD,IA5qF3C,SAAU96C,EAAQu4C,GAElC,MAAM93B,EAAa83B,EAAU31B,KAAKjX,WAClC,GAAyC,iBAA5B4sC,EAAUnmC,SAASjB,MACO,IAAnConC,EAAUnmC,SAASjB,KAAKnmB,SACtB,GAAWutD,EAAUnmC,SAASf,YACc,cAA1CknC,EAAUnmC,SAASjB,KAAKtT,MAAM,KAAK,IAChB,IAAtB4iB,EAAWz1B,SAnOU,SAAUy1B,GAKpC,OAJIA,IAEAA,EAAaA,EAAW31B,QAAQ,mBAAoB,MAEjD8lD,GAAkBnwB,GA8NQ86B,CAAsB96B,GACnD,MAAM,IAAIpoB,MAAM,EAAY2H,EAAQ,OAApB,yFAqqFpBw7C,CAAY,gCAAiCjD,GACxCj1B,GAAYi1B,EAAU31B,OACvBzV,GAAM,4FAGV,MAAM8lC,EAuBV,SAA+B7gC,EAAU1L,EAAK40C,EAAmB3rC,GAC7D,IAAI8rC,EAAWb,GAAMl0C,EAAI9a,MACpB6vD,IACDA,EAAW,GACXb,GAAMl0C,EAAI9a,MAAQ6vD,GAEtB,IAAIxI,EAAOwI,EAASrpC,EAASH,eAM7B,OALIghC,GACA9lC,GAAM,2HAEV8lC,EAAO,IAAIV,GAAKngC,EAlFA,MAkFyBkpC,EAAmB3rC,GAC5D8rC,EAASrpC,EAASH,eAAiBghC,EAC5BA,EAnCMyI,CAAsBtpC,EAAU1L,EAAK40C,EAAmB,IAAI7rC,GAAsB/I,EAAI9a,KAAM+jB,IACzG,OAAO,IAAIgsC,GAAS1I,EAAMvsC,GA6C9B,MAAMi1C,GAEFlgD,YAAYmgD,EAEZl1C,GACIne,KAAKqzD,cAAgBA,EACrBrzD,KAAKme,IAAMA,EAEXne,KAAW,KAAI,WAEfA,KAAKszD,kBAAmB,EAExBlC,YAKA,OAJKpxD,KAAKszD,mBACN7I,GAAUzqD,KAAKqzD,cAAerzD,KAAKme,IAAI9Y,QAAQ+a,MAAOpgB,KAAKme,IAAI9Y,QAAsC,8BACrGrF,KAAKszD,kBAAmB,GAErBtzD,KAAKqzD,cAEZrB,YAIA,OAHKhyD,KAAKuzD,gBACNvzD,KAAKuzD,cAAgB,IAAIhC,GAAcvxD,KAAKoxD,MAAOj3B,OAEhDn6B,KAAKuzD,cAEhB54C,UAMI,OAL2B,OAAvB3a,KAAKuzD,gBAjEjB,SAA+B7I,EAAMxrC,GACjC,MAAMg0C,EAAWb,GAAMnzC,GAElBg0C,GAAYA,EAASxI,EAAK5lD,OAAS4lD,GACpC9lC,GAAM,YAAY1F,KAAWwrC,EAAKr2B,wCAtrE1C,SAAuBq2B,GACfA,EAAKF,uBACLE,EAAKF,sBAAsB5nB,UA9WV,kBAoiFrB4wB,CAAc9I,UACPwI,EAASxI,EAAK5lD,KA2Db2uD,CAAsBzzD,KAAKoxD,MAAOpxD,KAAKme,IAAI9a,MAC3CrD,KAAKqzD,cAAgB,KACrBrzD,KAAKuzD,cAAgB,MAElBj1D,QAAQC,UAEnBwzD,iBAAiB2B,GACc,OAAvB1zD,KAAKuzD,eACL3uC,GAAM,eAAiB8uC,EAAU,4BAgB7C,SAASC,GAAYx1C,EFp4ZrB,SAAgB9a,EAAO,aACnB,MAAM8a,EAAMH,EAAMje,IAAIsD,GACtB,IAAK8a,EACD,MAAMG,EAAcrK,OAAO,SAAuB,CAAEiL,QAAS7b,IAEjE,OAAO8a,EE+3ZgBy1C,GAAU5iC,GACjC,OFvlaJ,SAAsB7S,EAAK9a,GACvB,MAAMwwD,EAAsB11C,EAAIzF,UAC3BgD,YAAY,aACZhC,aAAa,CAAEE,UAAU,IAI9B,OAHIi6C,GACKA,EAAoBC,mBAEtB31C,EAAIzF,UAAUgD,YAAYrY,GEgla1B0wD,CAAa51C,EAAK,YAAYzE,aAAa,CAC9CT,WAAY+X,IA8QpBsL,GAAqBr+B,UAAU+1D,aAAe,SAAU97B,EAAYvtB,GAChE3K,KAAKm2B,YAAY,IAAK,CAAEl3B,EAAGi5B,GAAcvtB,IAG7C2xB,GAAqBr+B,UAAUg2D,KAAO,SAAU5/C,EAAM6/C,GAClDl0D,KAAKm2B,YAAY,OAAQ,CAAEhnB,EAAGkF,GAAQ6/C,IA5kbtC,GFgGY,QE8zaZ91C,EAAmB,IAAIvG,EAAU,YAAY,CAACa,GAAae,mBAAoBuX,KAIpEshC,GAHK55C,EAAUgD,YAAY,OAAOhC,eACpBhB,EAAUgD,YAAY,iBAClBhD,EAAUgD,YAAY,sBACwBsV,IACxE,UAAuB3Y,sBAAqB,IAC/C8G,EAAgB,GAAM,QAyM1Bg1C,GAvMIh1C,EAAgB,GAAM,GAAS,WCl8anCzP,OAAOzD,iBAAiB,eAAeC,GAAKA,EAAEkoD,mBAyD9C,IAAI,IAAJ,CAAU,oBAbI,CACZzsD,QAHgB,CAAC,eAAgB,UAAY,WAAY,iBAIzDY,UAAW,IACX8B,UAAW,GACXe,SAAS,EACTlB,UAAW,IACXnC,SAAS,EAGToE,YAAY,EACZG,WAAY,MAUd,MAAM+nD,GAAUjoD,SAASkoD,iBAAiB,UACpCC,GAAmBnoD,SAASa,cAAc,YAEhDonD,GAAQ10D,SAAQ60D,IACZA,EAAMvoD,iBAAiB,SAAS,IAIpC,SAA2BuoD,GACvB,IAzDJ,SAAkBC,GAEd,GAZKxpD,KAAK2wB,IACVxvB,SAASmC,KAAKmmD,YACdtoD,SAASuoD,gBAAgBD,YACzBtoD,SAASmC,KAAKqmD,YACdxoD,SAASuoD,gBAAgBC,YACzBxoD,SAASuoD,gBAAgBE,aAORJ,EACb,OAAO,EAsDPK,CAAS,KAAM,OAEnB,MAAM7wD,EAAKuwD,EAAMvwD,GACP,aAAPA,EACCswD,GAAiB5mD,MAAMonD,eAAiB,aAC9B,YAAN9wD,EACJswD,GAAiB5mD,MAAMonD,eAAiB,SAC9B,aAAN9wD,IACJswD,GAAiB5mD,MAAMonD,eAAiB,YAbNC,CAAkBR,QAoB5D,MAAMS,GAAgB,IAClB7oD,SAASa,cAAc,UAAUhF,UAAUitD,OAAO,eAEtD9oD,SAAS+oD,eAAe,WAAWlpD,iBAAiB,SAAS,IAAMgpD,OACnE7oD,SAASkoD,iBAAiB,aAAa30D,SAAQy1D,GAAQA,EAAKnpD,iBAAiB,SAAS,IAAMgpD,SAE5F7oD,SAAS+oD,eAAe,QAAQlpD,iBAAiB,SAAS,KACnDG,SAASa,cAAc,UAAUhF,UAAUC,SAAS,gBACnD+sD,QAMR,MAAMI,GAAmB,CAAC,gJAGN,+IAGA,2FAGA,oIAyDpB,SAASC,GAASx2D,GAId,IAAIy2D,EACJ,IACIA,EAAUz2D,EAAIu7B,KAAK,GACrB,MACEk7B,EAAUz2D,EAGd,MAAM02D,EAAQD,EAAQtxD,GAChBwxD,EAAarpD,SAAS+oD,eAAeK,EAAQ,gBAC7CvO,EAASsO,EAAQG,cAGvB,GAlKiB,CAACH,GACM,IAAjBA,EAAQl2D,OAAgC,MAAjBk2D,EAAQl2D,MAiKnCs2D,CAAaJ,GAKZ,OAHAE,EAAWG,WA1JMnqD,EA0JsB+pD,GAzJhC,GAAGpI,cAAgB3hD,EAAIvN,MAAM,GAyJY,mBAChD+oD,EAAOh/C,UAAU8C,IAAI,kBAEd,EA7JS,IAACU,EAiKrB,GAAY,SAAT+pD,EAAiB,CAChB,IAAkBD,EAAQl2D,MAvKnBkgB,MACX,6JA0KQ,OAHAk2C,EAAWG,UAAY,gBACvB3O,EAAOh/C,UAAU8C,IAAI,kBAEd,EAEN,GAAoB,6BAAjBwqD,EAAQl2D,MAIZ,OAHAo2D,EAAWG,UAAY,sBACvB3O,EAAOh/C,UAAU8C,IAAI,kBAEd,EAKf,OAGJ,SAAyBwqD,GACNA,EAAQG,cAChBztD,UAAUG,OAAO,iBANxBytD,CAAgBN,IACT,EA/FQnpD,SAASkoD,iBAAiB,cAEnC30D,SAAQm2D,GACdA,EAAS7pD,iBAAiB,SACtB,IAER,SAAsB6pD,GAClB,MAAMC,EAAY3pD,SAASkoD,iBAAiB,SACtC0B,EAAcF,EAAShvD,WAE7BivD,EAAUp2D,SAAQs2D,GAAQA,EAAKhuD,UAAUG,OAAO,iBAChD4tD,EAAY/tD,UAAU8C,IAAI,eAE1B,MAAMmrD,EAAYF,EAAYG,QAAQ11D,MACtC2L,SAAS+oD,eAAe,oBAAoBS,UAAYP,GAAiBa,GAV/DE,CAAaN,OAcb1pD,SAASkoD,iBAAiB,SAClC30D,SAAQ02D,IACN,IAAIC,GAAqB,EACzBD,EAAKpqD,iBAAiB,aACrBC,IAEG,MAAMqqD,EAAkBrqD,EAAEmuB,KAAKn8B,MAAM,EAAG,GAExCo4D,IAAqBC,EAAgBh1C,MAAKi1C,GACtCA,EAAQvuD,UAAUC,SAAS,eAC3BsuD,EAAQvuD,UAAUC,SAAS,qBAGnCmuD,EAAKpqD,iBAAiB,aACtB,KACQqqD,GACAD,EAAKpuD,UAAU8C,IAAI,yBAG3BsrD,EAAKpqD,iBAAiB,WACtB,KACIoqD,EAAKpuD,UAAUG,OAAO,4BASlCgE,SAASkoD,iBAAiB,aAAa30D,SAAQ41D,IAC3CA,EAAQtpD,iBAAiB,QAASqpD,OAsDtC,MAaMn3C,GH6KN,SAAuB9Y,EAASoxD,EAAY,IACf,iBAAdA,IAEPA,EAAY,CAAEpzD,KADDozD,IAGjB,MAAMj4C,EAAS3e,OAAO6M,OAAO,CAAErJ,KArQR,YAqQkCyb,gCAAgC,GAAS23C,GAC5FpzD,EAAOmb,EAAOnb,KACpB,GAAoB,iBAATA,IAAsBA,EAC7B,MAAMib,EAAcrK,OAAO,eAAmC,CAC1DiL,QAAS/M,OAAO9O,KAGxB,MAAMqzD,EAAc14C,EAAMje,IAAIsD,GAC9B,GAAIqzD,EAAa,CAEb,GAAIhhD,EAAUrQ,EAASqxD,EAAYrxD,UAC/BqQ,EAAU8I,EAAQk4C,EAAYl4C,QAC9B,OAAOk4C,EAGP,MAAMp4C,EAAcrK,OAAO,gBAAqC,CAAEiL,QAAS7b,IAGnF,MAAMqV,EAAY,IAAI4C,EAAmBjY,GACzC,IAAK,MAAMsV,KAAasF,EAAY1D,SAChC7B,EAAU8C,aAAa7C,GAE3B,MAAMg+C,EAAS,IAAIp4C,EAAgBlZ,EAASmZ,EAAQ9F,GAEpD,OADAsF,EAAM/d,IAAIoD,EAAMszD,GACTA,EG1MCC,CAbW,CACrBC,OAAQ,0CACRC,WAAY,qCACZrE,YAAa,4EACbC,UAAW,qBACXqE,cAAe,iCACfC,kBAAmB,eACnB52C,MAAO,4CACP62C,cAAe,iBAMAtD,GAAYx1C,IAa7B,MAAM+4C,GAAY,CAAC9qD,SAAS+oD,eAAe,QACvC/oD,SAAS+oD,eAAe,SACxB/oD,SAAS+oD,eAAe,YAC5B,SAASgC,KACL,IAAK,IAAI1yD,EAAI,EAAGA,EAAIyyD,GAAUz0D,OAAQgC,IAClC,IAAI6wD,GAAS4B,GAAUzyD,IAEnB,YADAyyD,GAAUzyD,GAAG2yD,QAhBzB,IAA4B/zD,EAAMg0D,EAAOznD,EAAbvM,EAqBL6zD,GAAU,GAAG73D,MArBFg4D,EAqBSH,GAAU,GAAG73D,MArBfuQ,EAqBsBsnD,GAAU,GAAG73D,MAnBxEY,GAAIqxD,GADOqC,KACCtwD,EAAK,KAAM,CACnBA,KAAMA,EACNg0D,MAAOA,EACPznD,QAAUA,IAkBd0nD,KAAK9wD,QACL8wD,KAAKrvD,UAAU8C,IAAI,aACnBtD,YAAW,IAAI6vD,KAAKrvD,UAAUG,OAAO,cAAc,MAIvDgE,SAAS+oD,eAAe,QAAQlpD,iBAAiB,UAAWC,IACxDA,EAAEkoD,iBACF+C,QAGJ,IAAII,IAAiB,EACrBnrD,SAAS+oD,eAAe,WAAWlpD,iBAAiB,aAAa,IAAMsrD,IAAiB,IACxFnrD,SAASH,iBAAiB,SAAUC,IAC7BE,SAAS+oD,eAAe,YAAc/oD,SAASorD,gBAC9CD,IAAiB,GAER,UAAVrrD,EAAEpH,KAAmByyD,IAAgBJ","sources":["webpack://my-portfolio/./node_modules/idb/build/idb.js","webpack://my-portfolio/./node_modules/typed.js/lib/typed.js","webpack://my-portfolio/webpack/bootstrap","webpack://my-portfolio/webpack/runtime/compat get default export","webpack://my-portfolio/webpack/runtime/define property getters","webpack://my-portfolio/webpack/runtime/global","webpack://my-portfolio/webpack/runtime/hasOwnProperty shorthand","webpack://my-portfolio/./node_modules/@firebase/util/dist/index.esm2017.js","webpack://my-portfolio/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://my-portfolio/./node_modules/@firebase/logger/dist/esm/index.esm2017.js","webpack://my-portfolio/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://my-portfolio/./node_modules/firebase/app/dist/index.esm.js","webpack://my-portfolio/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://my-portfolio/./src/index.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.idb = {}));\n}(this, function (exports) { 'use strict';\n\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  function openDb(name, version, upgradeCallback) {\n    var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n    var request = p.request;\n\n    if (request) {\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n    }\n\n    return p.then(function(db) {\n      return new DB(db);\n    });\n  }\n\n  function deleteDb(name) {\n    return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n  }\n\n  exports.openDb = openDb;\n  exports.deleteDb = deleteDb;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","/*!\n * \n *   typed.js - A JavaScript Typing Animation Library\n *   Author: Matt Boldt <me@mattboldt.com>\n *   Version: v2.0.12\n *   Url: https://github.com/mattboldt/typed.js\n *   License(s): MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Typed\"] = factory();\n\telse\n\t\troot[\"Typed\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _initializerJs = __webpack_require__(1);\n\t\n\tvar _htmlParserJs = __webpack_require__(3);\n\t\n\t/**\n\t * Welcome to Typed.js!\n\t * @param {string} elementId HTML element ID _OR_ HTML element\n\t * @param {object} options options object\n\t * @returns {object} a new Typed object\n\t */\n\t\n\tvar Typed = (function () {\n\t  function Typed(elementId, options) {\n\t    _classCallCheck(this, Typed);\n\t\n\t    // Initialize it up\n\t    _initializerJs.initializer.load(this, options, elementId);\n\t    // All systems go!\n\t    this.begin();\n\t  }\n\t\n\t  /**\n\t   * Toggle start() and stop() of the Typed instance\n\t   * @public\n\t   */\n\t\n\t  _createClass(Typed, [{\n\t    key: 'toggle',\n\t    value: function toggle() {\n\t      this.pause.status ? this.start() : this.stop();\n\t    }\n\t\n\t    /**\n\t     * Stop typing / backspacing and enable cursor blinking\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      if (this.typingComplete) return;\n\t      if (this.pause.status) return;\n\t      this.toggleBlinking(true);\n\t      this.pause.status = true;\n\t      this.options.onStop(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Start typing / backspacing after being stopped\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      if (this.typingComplete) return;\n\t      if (!this.pause.status) return;\n\t      this.pause.status = false;\n\t      if (this.pause.typewrite) {\n\t        this.typewrite(this.pause.curString, this.pause.curStrPos);\n\t      } else {\n\t        this.backspace(this.pause.curString, this.pause.curStrPos);\n\t      }\n\t      this.options.onStart(this.arrayPos, this);\n\t    }\n\t\n\t    /**\n\t     * Destroy this instance of Typed\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.reset(false);\n\t      this.options.onDestroy(this);\n\t    }\n\t\n\t    /**\n\t     * Reset Typed and optionally restarts\n\t     * @param {boolean} restart\n\t     * @public\n\t     */\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t\n\t      clearInterval(this.timeout);\n\t      this.replaceText('');\n\t      if (this.cursor && this.cursor.parentNode) {\n\t        this.cursor.parentNode.removeChild(this.cursor);\n\t        this.cursor = null;\n\t      }\n\t      this.strPos = 0;\n\t      this.arrayPos = 0;\n\t      this.curLoop = 0;\n\t      if (restart) {\n\t        this.insertCursor();\n\t        this.options.onReset(this);\n\t        this.begin();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Begins the typing animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'begin',\n\t    value: function begin() {\n\t      var _this = this;\n\t\n\t      this.options.onBegin(this);\n\t      this.typingComplete = false;\n\t      this.shuffleStringsIfNeeded(this);\n\t      this.insertCursor();\n\t      if (this.bindInputFocusEvents) this.bindFocusEvents();\n\t      this.timeout = setTimeout(function () {\n\t        // Check if there is some text in the element, if yes start by backspacing the default message\n\t        if (!_this.currentElContent || _this.currentElContent.length === 0) {\n\t          _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n\t        } else {\n\t          // Start typing\n\t          _this.backspace(_this.currentElContent, _this.currentElContent.length);\n\t        }\n\t      }, this.startDelay);\n\t    }\n\t\n\t    /**\n\t     * Called for each character typed\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'typewrite',\n\t    value: function typewrite(curString, curStrPos) {\n\t      var _this2 = this;\n\t\n\t      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n\t        this.el.classList.remove(this.fadeOutClass);\n\t        if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n\t      }\n\t\n\t      var humanize = this.humanizer(this.typeSpeed);\n\t      var numChars = 1;\n\t\n\t      if (this.pause.status === true) {\n\t        this.setPauseStatus(curString, curStrPos, true);\n\t        return;\n\t      }\n\t\n\t      // contain typing function in a timeout humanize'd delay\n\t      this.timeout = setTimeout(function () {\n\t        // skip over any HTML chars\n\t        curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n\t\n\t        var pauseTime = 0;\n\t        var substr = curString.substr(curStrPos);\n\t        // check for an escape character before a pause value\n\t        // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t        // single ^ are removed from string\n\t        if (substr.charAt(0) === '^') {\n\t          if (/^\\^\\d+/.test(substr)) {\n\t            var skip = 1; // skip at least 1\n\t            substr = /\\d+/.exec(substr)[0];\n\t            skip += substr.length;\n\t            pauseTime = parseInt(substr);\n\t            _this2.temporaryPause = true;\n\t            _this2.options.onTypingPaused(_this2.arrayPos, _this2);\n\t            // strip out the escape character and pause value so they're not printed\n\t            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t            _this2.toggleBlinking(true);\n\t          }\n\t        }\n\t\n\t        // check for skip characters formatted as\n\t        // \"this is a `string to print NOW` ...\"\n\t        if (substr.charAt(0) === '`') {\n\t          while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n\t            numChars++;\n\t            if (curStrPos + numChars > curString.length) break;\n\t          }\n\t          // strip out the escape characters and append all the string in between\n\t          var stringBeforeSkip = curString.substring(0, curStrPos);\n\t          var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n\t          var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n\t          curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n\t          numChars--;\n\t        }\n\t\n\t        // timeout for any pause after a character\n\t        _this2.timeout = setTimeout(function () {\n\t          // Accounts for blinking while paused\n\t          _this2.toggleBlinking(false);\n\t\n\t          // We're done with this sentence!\n\t          if (curStrPos >= curString.length) {\n\t            _this2.doneTyping(curString, curStrPos);\n\t          } else {\n\t            _this2.keepTyping(curString, curStrPos, numChars);\n\t          }\n\t          // end of character pause\n\t          if (_this2.temporaryPause) {\n\t            _this2.temporaryPause = false;\n\t            _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n\t          }\n\t        }, pauseTime);\n\t\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Continue to the next string & begin typing\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'keepTyping',\n\t    value: function keepTyping(curString, curStrPos, numChars) {\n\t      // call before functions if applicable\n\t      if (curStrPos === 0) {\n\t        this.toggleBlinking(false);\n\t        this.options.preStringTyped(this.arrayPos, this);\n\t      }\n\t      // start typing each new char into existing string\n\t      // curString: arg, this.el.html: original text inside element\n\t      curStrPos += numChars;\n\t      var nextString = curString.substr(0, curStrPos);\n\t      this.replaceText(nextString);\n\t      // loop the function\n\t      this.typewrite(curString, curStrPos);\n\t    }\n\t\n\t    /**\n\t     * We're done typing the current string\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'doneTyping',\n\t    value: function doneTyping(curString, curStrPos) {\n\t      var _this3 = this;\n\t\n\t      // fires callback function\n\t      this.options.onStringTyped(this.arrayPos, this);\n\t      this.toggleBlinking(true);\n\t      // is this the final string\n\t      if (this.arrayPos === this.strings.length - 1) {\n\t        // callback that occurs on the last typed string\n\t        this.complete();\n\t        // quit if we wont loop back\n\t        if (this.loop === false || this.curLoop === this.loopCount) {\n\t          return;\n\t        }\n\t      }\n\t      this.timeout = setTimeout(function () {\n\t        _this3.backspace(curString, curStrPos);\n\t      }, this.backDelay);\n\t    }\n\t\n\t    /**\n\t     * Backspaces 1 character at a time\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backspace',\n\t    value: function backspace(curString, curStrPos) {\n\t      var _this4 = this;\n\t\n\t      if (this.pause.status === true) {\n\t        this.setPauseStatus(curString, curStrPos, false);\n\t        return;\n\t      }\n\t      if (this.fadeOut) return this.initFadeOut();\n\t\n\t      this.toggleBlinking(false);\n\t      var humanize = this.humanizer(this.backSpeed);\n\t\n\t      this.timeout = setTimeout(function () {\n\t        curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);\n\t        // replace text with base text + typed characters\n\t        var curStringAtPosition = curString.substr(0, curStrPos);\n\t        _this4.replaceText(curStringAtPosition);\n\t\n\t        // if smartBack is enabled\n\t        if (_this4.smartBackspace) {\n\t          // the remaining part of the current string is equal of the same part of the new string\n\t          var nextString = _this4.strings[_this4.arrayPos + 1];\n\t          if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n\t            _this4.stopNum = curStrPos;\n\t          } else {\n\t            _this4.stopNum = 0;\n\t          }\n\t        }\n\t\n\t        // if the number (id of character in current string) is\n\t        // less than the stop number, keep going\n\t        if (curStrPos > _this4.stopNum) {\n\t          // subtract characters one by one\n\t          curStrPos--;\n\t          // loop the function\n\t          _this4.backspace(curString, curStrPos);\n\t        } else if (curStrPos <= _this4.stopNum) {\n\t          // if the stop number has been reached, increase\n\t          // array position to next string\n\t          _this4.arrayPos++;\n\t          // When looping, begin at the beginning after backspace complete\n\t          if (_this4.arrayPos === _this4.strings.length) {\n\t            _this4.arrayPos = 0;\n\t            _this4.options.onLastStringBackspaced();\n\t            _this4.shuffleStringsIfNeeded();\n\t            _this4.begin();\n\t          } else {\n\t            _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n\t          }\n\t        }\n\t        // humanized value for typing\n\t      }, humanize);\n\t    }\n\t\n\t    /**\n\t     * Full animation is complete\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'complete',\n\t    value: function complete() {\n\t      this.options.onComplete(this);\n\t      if (this.loop) {\n\t        this.curLoop++;\n\t      } else {\n\t        this.typingComplete = true;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Has the typing been stopped\n\t     * @param {string} curString the current string in the strings array\n\t     * @param {number} curStrPos the current position in the curString\n\t     * @param {boolean} isTyping\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'setPauseStatus',\n\t    value: function setPauseStatus(curString, curStrPos, isTyping) {\n\t      this.pause.typewrite = isTyping;\n\t      this.pause.curString = curString;\n\t      this.pause.curStrPos = curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Toggle the blinking cursor\n\t     * @param {boolean} isBlinking\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'toggleBlinking',\n\t    value: function toggleBlinking(isBlinking) {\n\t      if (!this.cursor) return;\n\t      // if in paused state, don't toggle blinking a 2nd time\n\t      if (this.pause.status) return;\n\t      if (this.cursorBlinking === isBlinking) return;\n\t      this.cursorBlinking = isBlinking;\n\t      if (isBlinking) {\n\t        this.cursor.classList.add('typed-cursor--blink');\n\t      } else {\n\t        this.cursor.classList.remove('typed-cursor--blink');\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Speed in MS to type\n\t     * @param {number} speed\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'humanizer',\n\t    value: function humanizer(speed) {\n\t      return Math.round(Math.random() * speed / 2) + speed;\n\t    }\n\t\n\t    /**\n\t     * Shuffle the sequence of the strings array\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'shuffleStringsIfNeeded',\n\t    value: function shuffleStringsIfNeeded() {\n\t      if (!this.shuffle) return;\n\t      this.sequence = this.sequence.sort(function () {\n\t        return Math.random() - 0.5;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Adds a CSS class to fade out current string\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'initFadeOut',\n\t    value: function initFadeOut() {\n\t      var _this5 = this;\n\t\n\t      this.el.className += ' ' + this.fadeOutClass;\n\t      if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n\t      return setTimeout(function () {\n\t        _this5.arrayPos++;\n\t        _this5.replaceText('');\n\t\n\t        // Resets current string if end of loop reached\n\t        if (_this5.strings.length > _this5.arrayPos) {\n\t          _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n\t        } else {\n\t          _this5.typewrite(_this5.strings[0], 0);\n\t          _this5.arrayPos = 0;\n\t        }\n\t      }, this.fadeOutDelay);\n\t    }\n\t\n\t    /**\n\t     * Replaces current text in the HTML element\n\t     * depending on element type\n\t     * @param {string} str\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'replaceText',\n\t    value: function replaceText(str) {\n\t      if (this.attr) {\n\t        this.el.setAttribute(this.attr, str);\n\t      } else {\n\t        if (this.isInput) {\n\t          this.el.value = str;\n\t        } else if (this.contentType === 'html') {\n\t          this.el.innerHTML = str;\n\t        } else {\n\t          this.el.textContent = str;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * If using input elements, bind focus in order to\n\t     * start and stop the animation\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'bindFocusEvents',\n\t    value: function bindFocusEvents() {\n\t      var _this6 = this;\n\t\n\t      if (!this.isInput) return;\n\t      this.el.addEventListener('focus', function (e) {\n\t        _this6.stop();\n\t      });\n\t      this.el.addEventListener('blur', function (e) {\n\t        if (_this6.el.value && _this6.el.value.length !== 0) {\n\t          return;\n\t        }\n\t        _this6.start();\n\t      });\n\t    }\n\t\n\t    /**\n\t     * On init, insert the cursor element\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'insertCursor',\n\t    value: function insertCursor() {\n\t      if (!this.showCursor) return;\n\t      if (this.cursor) return;\n\t      this.cursor = document.createElement('span');\n\t      this.cursor.className = 'typed-cursor';\n\t      this.cursor.setAttribute('aria-hidden', true);\n\t      this.cursor.innerHTML = this.cursorChar;\n\t      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n\t    }\n\t  }]);\n\t\n\t  return Typed;\n\t})();\n\t\n\texports['default'] = Typed;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _defaultsJs = __webpack_require__(2);\n\t\n\tvar _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n\t\n\t/**\n\t * Initialize the Typed object\n\t */\n\t\n\tvar Initializer = (function () {\n\t  function Initializer() {\n\t    _classCallCheck(this, Initializer);\n\t  }\n\t\n\t  _createClass(Initializer, [{\n\t    key: 'load',\n\t\n\t    /**\n\t     * Load up defaults & options on the Typed instance\n\t     * @param {Typed} self instance of Typed\n\t     * @param {object} options options object\n\t     * @param {string} elementId HTML element ID _OR_ instance of HTML element\n\t     * @private\n\t     */\n\t\n\t    value: function load(self, options, elementId) {\n\t      // chosen element to manipulate text\n\t      if (typeof elementId === 'string') {\n\t        self.el = document.querySelector(elementId);\n\t      } else {\n\t        self.el = elementId;\n\t      }\n\t\n\t      self.options = _extends({}, _defaultsJs2['default'], options);\n\t\n\t      // attribute to type into\n\t      self.isInput = self.el.tagName.toLowerCase() === 'input';\n\t      self.attr = self.options.attr;\n\t      self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\t\n\t      // show cursor\n\t      self.showCursor = self.isInput ? false : self.options.showCursor;\n\t\n\t      // custom cursor\n\t      self.cursorChar = self.options.cursorChar;\n\t\n\t      // Is the cursor blinking\n\t      self.cursorBlinking = true;\n\t\n\t      // text content of element\n\t      self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\n\t\n\t      // html or plain text\n\t      self.contentType = self.options.contentType;\n\t\n\t      // typing speed\n\t      self.typeSpeed = self.options.typeSpeed;\n\t\n\t      // add a delay before typing starts\n\t      self.startDelay = self.options.startDelay;\n\t\n\t      // backspacing speed\n\t      self.backSpeed = self.options.backSpeed;\n\t\n\t      // only backspace what doesn't match the previous string\n\t      self.smartBackspace = self.options.smartBackspace;\n\t\n\t      // amount of time to wait before backspacing\n\t      self.backDelay = self.options.backDelay;\n\t\n\t      // Fade out instead of backspace\n\t      self.fadeOut = self.options.fadeOut;\n\t      self.fadeOutClass = self.options.fadeOutClass;\n\t      self.fadeOutDelay = self.options.fadeOutDelay;\n\t\n\t      // variable to check whether typing is currently paused\n\t      self.isPaused = false;\n\t\n\t      // input strings of text\n\t      self.strings = self.options.strings.map(function (s) {\n\t        return s.trim();\n\t      });\n\t\n\t      // div containing strings\n\t      if (typeof self.options.stringsElement === 'string') {\n\t        self.stringsElement = document.querySelector(self.options.stringsElement);\n\t      } else {\n\t        self.stringsElement = self.options.stringsElement;\n\t      }\n\t\n\t      if (self.stringsElement) {\n\t        self.strings = [];\n\t        self.stringsElement.style.display = 'none';\n\t        var strings = Array.prototype.slice.apply(self.stringsElement.children);\n\t        var stringsLength = strings.length;\n\t\n\t        if (stringsLength) {\n\t          for (var i = 0; i < stringsLength; i += 1) {\n\t            var stringEl = strings[i];\n\t            self.strings.push(stringEl.innerHTML.trim());\n\t          }\n\t        }\n\t      }\n\t\n\t      // character number position of current string\n\t      self.strPos = 0;\n\t\n\t      // current array position\n\t      self.arrayPos = 0;\n\t\n\t      // index of string to stop backspacing on\n\t      self.stopNum = 0;\n\t\n\t      // Looping logic\n\t      self.loop = self.options.loop;\n\t      self.loopCount = self.options.loopCount;\n\t      self.curLoop = 0;\n\t\n\t      // shuffle the strings\n\t      self.shuffle = self.options.shuffle;\n\t      // the order of strings\n\t      self.sequence = [];\n\t\n\t      self.pause = {\n\t        status: false,\n\t        typewrite: true,\n\t        curString: '',\n\t        curStrPos: 0\n\t      };\n\t\n\t      // When the typing is complete (when not looped)\n\t      self.typingComplete = false;\n\t\n\t      // Set the order in which the strings are typed\n\t      for (var i in self.strings) {\n\t        self.sequence[i] = i;\n\t      }\n\t\n\t      // If there is some text in the element\n\t      self.currentElContent = this.getCurrentElContent(self);\n\t\n\t      self.autoInsertCss = self.options.autoInsertCss;\n\t\n\t      this.appendAnimationCss(self);\n\t    }\n\t  }, {\n\t    key: 'getCurrentElContent',\n\t    value: function getCurrentElContent(self) {\n\t      var elContent = '';\n\t      if (self.attr) {\n\t        elContent = self.el.getAttribute(self.attr);\n\t      } else if (self.isInput) {\n\t        elContent = self.el.value;\n\t      } else if (self.contentType === 'html') {\n\t        elContent = self.el.innerHTML;\n\t      } else {\n\t        elContent = self.el.textContent;\n\t      }\n\t      return elContent;\n\t    }\n\t  }, {\n\t    key: 'appendAnimationCss',\n\t    value: function appendAnimationCss(self) {\n\t      var cssDataName = 'data-typed-js-css';\n\t      if (!self.autoInsertCss) {\n\t        return;\n\t      }\n\t      if (!self.showCursor && !self.fadeOut) {\n\t        return;\n\t      }\n\t      if (document.querySelector('[' + cssDataName + ']')) {\n\t        return;\n\t      }\n\t\n\t      var css = document.createElement('style');\n\t      css.type = 'text/css';\n\t      css.setAttribute(cssDataName, true);\n\t\n\t      var innerCss = '';\n\t      if (self.showCursor) {\n\t        innerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n        }\\n        .typed-cursor.typed-cursor--blink{\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n\t      }\n\t      if (self.fadeOut) {\n\t        innerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n        }\\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\\n          -webkit-animation: 0;\\n          animation: 0;\\n        }\\n      ';\n\t      }\n\t      if (css.length === 0) {\n\t        return;\n\t      }\n\t      css.innerHTML = innerCss;\n\t      document.body.appendChild(css);\n\t    }\n\t  }]);\n\t\n\t  return Initializer;\n\t})();\n\t\n\texports['default'] = Initializer;\n\tvar initializer = new Initializer();\n\texports.initializer = initializer;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Defaults & options\n\t * @returns {object} Typed defaults & options\n\t * @public\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar defaults = {\n\t  /**\n\t   * @property {array} strings strings to be typed\n\t   * @property {string} stringsElement ID of element containing string children\n\t   */\n\t  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n\t  stringsElement: null,\n\t\n\t  /**\n\t   * @property {number} typeSpeed type speed in milliseconds\n\t   */\n\t  typeSpeed: 0,\n\t\n\t  /**\n\t   * @property {number} startDelay time before typing starts in milliseconds\n\t   */\n\t  startDelay: 0,\n\t\n\t  /**\n\t   * @property {number} backSpeed backspacing speed in milliseconds\n\t   */\n\t  backSpeed: 0,\n\t\n\t  /**\n\t   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n\t   */\n\t  smartBackspace: true,\n\t\n\t  /**\n\t   * @property {boolean} shuffle shuffle the strings\n\t   */\n\t  shuffle: false,\n\t\n\t  /**\n\t   * @property {number} backDelay time before backspacing in milliseconds\n\t   */\n\t  backDelay: 700,\n\t\n\t  /**\n\t   * @property {boolean} fadeOut Fade out instead of backspace\n\t   * @property {string} fadeOutClass css class for fade animation\n\t   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n\t   */\n\t  fadeOut: false,\n\t  fadeOutClass: 'typed-fade-out',\n\t  fadeOutDelay: 500,\n\t\n\t  /**\n\t   * @property {boolean} loop loop strings\n\t   * @property {number} loopCount amount of loops\n\t   */\n\t  loop: false,\n\t  loopCount: Infinity,\n\t\n\t  /**\n\t   * @property {boolean} showCursor show cursor\n\t   * @property {string} cursorChar character for cursor\n\t   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n\t   */\n\t  showCursor: true,\n\t  cursorChar: '|',\n\t  autoInsertCss: true,\n\t\n\t  /**\n\t   * @property {string} attr attribute for typing\n\t   * Ex: input placeholder, value, or just HTML text\n\t   */\n\t  attr: null,\n\t\n\t  /**\n\t   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n\t   */\n\t  bindInputFocusEvents: false,\n\t\n\t  /**\n\t   * @property {string} contentType 'html' or 'null' for plaintext\n\t   */\n\t  contentType: 'html',\n\t\n\t  /**\n\t   * Before it begins typing\n\t   * @param {Typed} self\n\t   */\n\t  onBegin: function onBegin(self) {},\n\t\n\t  /**\n\t   * All typing is complete\n\t   * @param {Typed} self\n\t   */\n\t  onComplete: function onComplete(self) {},\n\t\n\t  /**\n\t   * Before each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  preStringTyped: function preStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * After each string is typed\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStringTyped: function onStringTyped(arrayPos, self) {},\n\t\n\t  /**\n\t   * During looping, after last string is typed\n\t   * @param {Typed} self\n\t   */\n\t  onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\t\n\t  /**\n\t   * Typing has been stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\t\n\t  /**\n\t   * Typing has been started after being stopped\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\t\n\t  /**\n\t   * After reset\n\t   * @param {Typed} self\n\t   */\n\t  onReset: function onReset(self) {},\n\t\n\t  /**\n\t   * After stop\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStop: function onStop(arrayPos, self) {},\n\t\n\t  /**\n\t   * After start\n\t   * @param {number} arrayPos\n\t   * @param {Typed} self\n\t   */\n\t  onStart: function onStart(arrayPos, self) {},\n\t\n\t  /**\n\t   * After destroy\n\t   * @param {Typed} self\n\t   */\n\t  onDestroy: function onDestroy(self) {}\n\t};\n\t\n\texports['default'] = defaults;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * TODO: These methods can probably be combined somehow\n\t * Parse HTML tags & HTML Characters\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar HTMLParser = (function () {\n\t  function HTMLParser() {\n\t    _classCallCheck(this, HTMLParser);\n\t  }\n\t\n\t  _createClass(HTMLParser, [{\n\t    key: 'typeHtmlChars',\n\t\n\t    /**\n\t     * Type HTML tags & HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t\n\t    value: function typeHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '<' || curChar === '&') {\n\t        var endTag = '';\n\t        if (curChar === '<') {\n\t          endTag = '>';\n\t        } else {\n\t          endTag = ';';\n\t        }\n\t        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t          curStrPos++;\n\t          if (curStrPos + 1 > curString.length) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos++;\n\t      }\n\t      return curStrPos;\n\t    }\n\t\n\t    /**\n\t     * Backspace HTML tags and HTML Characters\n\t     * @param {string} curString Current string\n\t     * @param {number} curStrPos Position in current string\n\t     * @param {Typed} self instance of Typed\n\t     * @returns {number} a new string position\n\t     * @private\n\t     */\n\t  }, {\n\t    key: 'backSpaceHtmlChars',\n\t    value: function backSpaceHtmlChars(curString, curStrPos, self) {\n\t      if (self.contentType !== 'html') return curStrPos;\n\t      var curChar = curString.substr(curStrPos).charAt(0);\n\t      if (curChar === '>' || curChar === ';') {\n\t        var endTag = '';\n\t        if (curChar === '>') {\n\t          endTag = '<';\n\t        } else {\n\t          endTag = '&';\n\t        }\n\t        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n\t          curStrPos--;\n\t          if (curStrPos < 0) {\n\t            break;\n\t          }\n\t        }\n\t        curStrPos--;\n\t      }\n\t      return curStrPos;\n\t    }\n\t  }]);\n\t\n\t  return HTMLParser;\n\t})();\n\t\n\texports['default'] = HTMLParser;\n\tvar htmlParser = new HTMLParser();\n\texports.htmlParser = htmlParser;\n\n/***/ })\n/******/ ])\n});\n;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nconst CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\r\nconst assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\r\nconst assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst stringToByteArray$1 = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) === 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\r\nconst byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    const out = [];\r\n    let pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        const c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            const c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            const c4 = bytes[pos++];\r\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            const c2 = bytes[pos++];\r\n            const c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\r\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\r\n// Static lookup maps, lazily populated by init_()\r\nconst base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeByteArray(input, webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        const byteToCharMap = webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length; i += 3) {\r\n            const byte1 = input[i];\r\n            const haveByte2 = i + 1 < input.length;\r\n            const byte2 = haveByte2 ? input[i + 1] : 0;\r\n            const haveByte3 = i + 2 < input.length;\r\n            const byte3 = haveByte3 ? input[i + 2] : 0;\r\n            const outByte1 = byte1 >> 2;\r\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            let outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param input A string to encode.\r\n     * @param webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return The base64 encoded string.\r\n     */\r\n    encodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param input to decode.\r\n     * @param webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return string representing the decoded value.\r\n     */\r\n    decodeString(input, webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param input Input to decode.\r\n     * @param webSafe True if we should use the web-safe alphabet.\r\n     * @return bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray(input, webSafe) {\r\n        this.init_();\r\n        const charToByteMap = webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        const output = [];\r\n        for (let i = 0; i < input.length;) {\r\n            const byte1 = charToByteMap[input.charAt(i++)];\r\n            const haveByte2 = i < input.length;\r\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            const haveByte3 = i < input.length;\r\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            const haveByte4 = i < input.length;\r\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 !== 64) {\r\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 !== 64) {\r\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_() {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n */\r\nconst base64Encode = function (str) {\r\n    const utf8Bytes = stringToByteArray$1(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 encoding (without \".\" padding in the end).\r\n * e.g. Used in JSON Web Token (JWT) parts.\r\n */\r\nconst base64urlEncodeWithoutPadding = function (str) {\r\n    // Use base64url encoding and remove padding in the end (dot characters).\r\n    return base64Encode(str).replace(/\\./g, '');\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\r\nconst base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n *\r\n * Note: we don't merge __proto__ to prevent prototype pollution\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            const dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (const prop in source) {\r\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\r\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\nfunction isValidKey(key) {\r\n    return key !== '__proto__';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.reject = () => { };\r\n        this.resolve = () => { };\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     */\r\n    wrapCallback(callback) {\r\n        return (error, value) => {\r\n            if (error) {\r\n                this.reject(error);\r\n            }\r\n            else {\r\n                this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                this.promise.catch(() => { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createMockUserToken(token, projectId) {\r\n    if (token.uid) {\r\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\r\n    }\r\n    // Unsecured JWTs use \"none\" as the algorithm.\r\n    const header = {\r\n        alg: 'none',\r\n        type: 'JWT'\r\n    };\r\n    const project = projectId || 'demo-project';\r\n    const iat = token.iat || 0;\r\n    const sub = token.sub || token.user_id;\r\n    if (!sub) {\r\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n    }\r\n    const payload = Object.assign({ \r\n        // Set all required fields to decent defaults\r\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\r\n            sign_in_provider: 'custom',\r\n            identities: {}\r\n        } }, token);\r\n    // Unsecured JWTs use the empty string as a signature.\r\n    const signature = '';\r\n    return [\r\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\r\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\r\n        signature\r\n    ].join('.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\r\nfunction getUA() {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n}\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\r\nfunction isMobileCordova() {\r\n    return (typeof window !== 'undefined' &&\r\n        // @ts-ignore Setting up an broadly applicable index signature for Window\r\n        // just to deal with this case would probably be a bad idea.\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n}\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nfunction isNode() {\r\n    try {\r\n        return (Object.prototype.toString.call(global.process) === '[object process]');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Detect Browser Environment\r\n */\r\nfunction isBrowser() {\r\n    return typeof self === 'object' && self.self === self;\r\n}\r\nfunction isBrowserExtension() {\r\n    const runtime = typeof chrome === 'object'\r\n        ? chrome.runtime\r\n        : typeof browser === 'object'\r\n            ? browser.runtime\r\n            : undefined;\r\n    return typeof runtime === 'object' && runtime.id !== undefined;\r\n}\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\r\nfunction isReactNative() {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n}\r\n/** Detects Electron apps. */\r\nfunction isElectron() {\r\n    return getUA().indexOf('Electron/') >= 0;\r\n}\r\n/** Detects Internet Explorer. */\r\nfunction isIE() {\r\n    const ua = getUA();\r\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\r\n}\r\n/** Detects Universal Windows Platform apps. */\r\nfunction isUWP() {\r\n    return getUA().indexOf('MSAppHost/') >= 0;\r\n}\r\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\r\nfunction isNodeSdk() {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n}\r\n/** Returns true if we are running in Safari. */\r\nfunction isSafari() {\r\n    return (!isNode() &&\r\n        navigator.userAgent.includes('Safari') &&\r\n        !navigator.userAgent.includes('Chrome'));\r\n}\r\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\r\nfunction isIndexedDBAvailable() {\r\n    return typeof indexedDB === 'object';\r\n}\r\n/**\r\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n *\r\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\r\n * private browsing)\r\n */\r\nfunction validateIndexedDBOpenable() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            let preExist = true;\r\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\r\n            const request = self.indexedDB.open(DB_CHECK_NAME);\r\n            request.onsuccess = () => {\r\n                request.result.close();\r\n                // delete database only when it doesn't pre-exist\r\n                if (!preExist) {\r\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\r\n                }\r\n                resolve(true);\r\n            };\r\n            request.onupgradeneeded = () => {\r\n                preExist = false;\r\n            };\r\n            request.onerror = () => {\r\n                var _a;\r\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\r\nfunction areCookiesEnabled() {\r\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Polyfill for `globalThis` object.\r\n * @returns the `globalThis` object for the given environment.\r\n */\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('Unable to locate global object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Standardized Firebase Error.\r\n *\r\n * Usage:\r\n *\r\n *   // Typescript string literals for type-safe codes\r\n *   type Err =\r\n *     'unknown' |\r\n *     'object-not-found'\r\n *     ;\r\n *\r\n *   // Closure enum for type-safe error codes\r\n *   // at-enum {string}\r\n *   var Err = {\r\n *     UNKNOWN: 'unknown',\r\n *     OBJECT_NOT_FOUND: 'object-not-found',\r\n *   }\r\n *\r\n *   let errors: Map<Err, string> = {\r\n *     'generic-error': \"Unknown error\",\r\n *     'file-not-found': \"Could not find file: {$file}\",\r\n *   };\r\n *\r\n *   // Type-safe function - must pass a valid error code as param.\r\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\r\n *\r\n *   ...\r\n *   throw error.create(Err.GENERIC);\r\n *   ...\r\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\r\n *   ...\r\n *   // Service: Could not file file: foo.txt (service/file-not-found).\r\n *\r\n *   catch (e) {\r\n *     assert(e.message === \"Could not find file: foo.txt.\");\r\n *     if (e.code === 'service/file-not-found') {\r\n *       console.log(\"Could not read file: \" + e['file']);\r\n *     }\r\n *   }\r\n */\r\nconst ERROR_NAME = 'FirebaseError';\r\n// Based on code from:\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\r\nclass FirebaseError extends Error {\r\n    constructor(\r\n    /** The error code for this error. */\r\n    code, message, \r\n    /** Custom data for this error. */\r\n    customData) {\r\n        super(message);\r\n        this.code = code;\r\n        this.customData = customData;\r\n        /** The custom name for all FirebaseErrors. */\r\n        this.name = ERROR_NAME;\r\n        // Fix For ES5\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, FirebaseError.prototype);\r\n        // Maintains proper stack trace for where our error was thrown.\r\n        // Only available on V8.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n    }\r\n}\r\nclass ErrorFactory {\r\n    constructor(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n    }\r\n    create(code, ...data) {\r\n        const customData = data[0] || {};\r\n        const fullCode = `${this.service}/${code}`;\r\n        const template = this.errors[code];\r\n        const message = template ? replaceTemplate(template, customData) : 'Error';\r\n        // Service Name: Error message (service/code).\r\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\r\n        const error = new FirebaseError(fullCode, fullMessage, customData);\r\n        return error;\r\n    }\r\n}\r\nfunction replaceTemplate(template, data) {\r\n    return template.replace(PATTERN, (_, key) => {\r\n        const value = data[key];\r\n        return value != null ? String(value) : `<${key}?>`;\r\n    });\r\n}\r\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst decode = function (token) {\r\n    let header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        const parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header,\r\n        claims,\r\n        data,\r\n        signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidTimestamp = function (token) {\r\n    const claims = decode(token).claims;\r\n    const now = Math.floor(new Date().getTime() / 1000);\r\n    let validSince = 0, validUntil = 0;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (!!now &&\r\n        !!validSince &&\r\n        !!validUntil &&\r\n        now >= validSince &&\r\n        now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst issuedAtTime = function (token) {\r\n    const claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isValidFormat = function (token) {\r\n    const decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\r\nconst isAdmin = function (token) {\r\n    const claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction contains(obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\nfunction safeGet(obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction map(obj, fn, contextObj) {\r\n    const res = {};\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            res[key] = fn.call(contextObj, obj[key], key, obj);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Deep equal two objects. Support Arrays and Objects.\r\n */\r\nfunction deepEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    const aKeys = Object.keys(a);\r\n    const bKeys = Object.keys(b);\r\n    for (const k of aKeys) {\r\n        if (!bKeys.includes(k)) {\r\n            return false;\r\n        }\r\n        const aProp = a[k];\r\n        const bProp = b[k];\r\n        if (isObject(aProp) && isObject(bProp)) {\r\n            if (!deepEqual(aProp, bProp)) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (aProp !== bProp) {\r\n            return false;\r\n        }\r\n    }\r\n    for (const k of bKeys) {\r\n        if (!aKeys.includes(k)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isObject(thing) {\r\n    return thing !== null && typeof thing === 'object';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\r\nfunction querystring(querystringParams) {\r\n    const params = [];\r\n    for (const [key, value] of Object.entries(querystringParams)) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(arrayVal => {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    }\r\n    return params.length ? '&' + params.join('&') : '';\r\n}\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\r\nfunction querystringDecode(querystring) {\r\n    const obj = {};\r\n    const tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(token => {\r\n        if (token) {\r\n            const [key, value] = token.split('=');\r\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * Extract the query string part of a URL, including the leading question mark (if present).\r\n */\r\nfunction extractQuerystring(url) {\r\n    const queryStart = url.indexOf('?');\r\n    if (!queryStart) {\r\n        return '';\r\n    }\r\n    const fragmentStart = url.indexOf('#', queryStart);\r\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nclass Sha1 {\r\n    constructor() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (let i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    }\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param buf Block to compress.\r\n     * @param offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    compress_(buf, offset) {\r\n        if (!offset) {\r\n            offset = 0;\r\n        }\r\n        const W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (let i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(offset) << 24) |\r\n                        (buf.charCodeAt(offset + 1) << 16) |\r\n                        (buf.charCodeAt(offset + 2) << 8) |\r\n                        buf.charCodeAt(offset + 3);\r\n                offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[offset] << 24) |\r\n                        (buf[offset + 1] << 16) |\r\n                        (buf[offset + 2] << 8) |\r\n                        buf[offset + 3];\r\n                offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (let i = 16; i < 80; i++) {\r\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        let a = this.chain_[0];\r\n        let b = this.chain_[1];\r\n        let c = this.chain_[2];\r\n        let d = this.chain_[3];\r\n        let e = this.chain_[4];\r\n        let f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (let i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    }\r\n    update(bytes, length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (length === undefined) {\r\n            length = bytes.length;\r\n        }\r\n        const lengthMinusBlock = length - this.blockSize;\r\n        let n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        const buf = this.buf_;\r\n        let inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf === 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf === this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += length;\r\n    }\r\n    /** @override */\r\n    digest() {\r\n        const digest = [];\r\n        let totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (let i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        let n = 0;\r\n        for (let i = 0; i < 5; i++) {\r\n            for (let j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    }\r\n}\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    const proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nclass ObserverProxy {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    constructor(executor, onNoObservers) {\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(() => {\r\n            executor(this);\r\n        })\r\n            .catch(e => {\r\n            this.error(e);\r\n        });\r\n    }\r\n    next(value) {\r\n        this.forEachObserver((observer) => {\r\n            observer.next(value);\r\n        });\r\n    }\r\n    error(error) {\r\n        this.forEachObserver((observer) => {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    }\r\n    complete() {\r\n        this.forEachObserver((observer) => {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    }\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    subscribe(nextOrObserver, error, complete) {\r\n        let observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, [\r\n            'next',\r\n            'error',\r\n            'complete'\r\n        ])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error,\r\n                complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this.task.then(() => {\r\n                try {\r\n                    if (this.finalError) {\r\n                        observer.error(this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    }\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    unsubscribeOne(i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    }\r\n    forEachObserver(fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (let i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    }\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    sendOne(i, fn) {\r\n        // Execute the callback asynchronously\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    close(err) {\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.task.then(() => {\r\n            this.observers = undefined;\r\n            this.onNoObservers = undefined;\r\n        });\r\n    }\r\n}\r\n/** Turn synchronous function into one called asynchronously. */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(fn, onError) {\r\n    return (...args) => {\r\n        Promise.resolve(true)\r\n            .then(() => {\r\n            fn(...args);\r\n        })\r\n            .catch((error) => {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (const method of methods) {\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\r\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    let argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        const error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argName The name of the argument\r\n * @return The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argName) {\r\n    return `${fnName} failed: ${argName} argument `;\r\n}\r\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\r\nfunction validateNamespace(fnName, namespace, optional) {\r\n    if (optional && !namespace) {\r\n        return;\r\n    }\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentName, \r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\ncallback, optional) {\r\n    if (optional && !callback) {\r\n        return;\r\n    }\r\n    if (typeof callback !== 'function') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\r\n    }\r\n}\r\nfunction validateContextObject(fnName, argumentName, context, optional) {\r\n    if (optional && !context) {\r\n        return;\r\n    }\r\n    if (typeof context !== 'object' || context === null) {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nconst stringToByteArray = function (str) {\r\n    const out = [];\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            const high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nconst stringLength = function (str) {\r\n    let p = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\r\nconst DEFAULT_INTERVAL_MILLIS = 1000;\r\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\r\nconst DEFAULT_BACKOFF_FACTOR = 2;\r\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\r\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\r\nconst RANDOM_FACTOR = 0.5;\r\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\r\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\r\n    // Calculates an exponentially increasing value.\r\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\r\n    // and count to restore state.\r\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\r\n    // A random \"fuzz\" to avoid waves of retries.\r\n    // Deviation: randomFactor is required.\r\n    const randomWait = Math.round(\r\n    // A fraction of the backoff value to add/subtract.\r\n    // Deviation: changes multiplication order to improve readability.\r\n    RANDOM_FACTOR *\r\n        currBaseValue *\r\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\r\n        // if we add or subtract.\r\n        (Math.random() - 0.5) *\r\n        2);\r\n    // Limits backoff to max to avoid effectively permanent backoff.\r\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provide English ordinal letters after a number\r\n */\r\nfunction ordinal(i) {\r\n    if (!Number.isFinite(i)) {\r\n        return `${i}`;\r\n    }\r\n    return i + indicator(i);\r\n}\r\nfunction indicator(i) {\r\n    i = Math.abs(i);\r\n    const cent = i % 100;\r\n    if (cent >= 10 && cent <= 20) {\r\n        return 'th';\r\n    }\r\n    const dec = i % 10;\r\n    if (dec === 1) {\r\n        return 'st';\r\n    }\r\n    if (dec === 2) {\r\n        return 'nd';\r\n    }\r\n    if (dec === 3) {\r\n        return 'rd';\r\n    }\r\n    return 'th';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getModularInstance(service) {\r\n    if (service && service._delegate) {\r\n        return service._delegate;\r\n    }\r\n    else {\r\n        return service;\r\n    }\r\n}\n\nexport { CONSTANTS, Deferred, ErrorFactory, FirebaseError, MAX_VALUE_MILLIS, RANDOM_FACTOR, Sha1, areCookiesEnabled, assert, assertionError, async, base64, base64Decode, base64Encode, base64urlEncodeWithoutPadding, calculateBackoffMillis, contains, createMockUserToken, createSubscribe, decode, deepCopy, deepEqual, deepExtend, errorPrefix, extractQuerystring, getGlobal, getModularInstance, getUA, isAdmin, isBrowser, isBrowserExtension, isElectron, isEmpty, isIE, isIndexedDBAvailable, isMobileCordova, isNode, isNodeSdk, isReactNative, isSafari, isUWP, isValidFormat, isValidTimestamp, issuedAtTime, jsonEval, map, ordinal, querystring, querystringDecode, safeGet, stringLength, stringToByteArray, stringify, validateArgCount, validateCallback, validateContextObject, validateIndexedDBOpenable, validateNamespace };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Deferred } from '@firebase/util';\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\n\nexport { Component, ComponentContainer, Provider };\n//# sourceMappingURL=index.esm2017.js.map\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\n//# sourceMappingURL=index.esm2017.js.map\n","import { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64Encode, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.18\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\n\nconst name$n = \"@firebase/app-compat\";\n\nconst name$m = \"@firebase/analytics-compat\";\n\nconst name$l = \"@firebase/analytics\";\n\nconst name$k = \"@firebase/app-check-compat\";\n\nconst name$j = \"@firebase/app-check\";\n\nconst name$i = \"@firebase/auth\";\n\nconst name$h = \"@firebase/auth-compat\";\n\nconst name$g = \"@firebase/database\";\n\nconst name$f = \"@firebase/database-compat\";\n\nconst name$e = \"@firebase/functions\";\n\nconst name$d = \"@firebase/functions-compat\";\n\nconst name$c = \"@firebase/installations\";\n\nconst name$b = \"@firebase/installations-compat\";\n\nconst name$a = \"@firebase/messaging\";\n\nconst name$9 = \"@firebase/messaging-compat\";\n\nconst name$8 = \"@firebase/performance\";\n\nconst name$7 = \"@firebase/performance-compat\";\n\nconst name$6 = \"@firebase/remote-config\";\n\nconst name$5 = \"@firebase/remote-config-compat\";\n\nconst name$4 = \"@firebase/storage\";\n\nconst name$3 = \"@firebase/storage-compat\";\n\nconst name$2 = \"@firebase/firestore\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"9.6.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDb(DB_NAME, DB_VERSION, upgradeDB => {\r\n            // We don't use 'break' in this switch statement, the fall-through\r\n            // behavior is what we want, because if there are multiple versions between\r\n            // the old version and the current version, we want ALL the migrations\r\n            // that correspond to those versions to run, not only the last one.\r\n            // eslint-disable-next-line default-case\r\n            switch (upgradeDB.oldVersion) {\r\n                case 0:\r\n                    upgradeDB.createObjectStore(STORE_NAME);\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function deleteHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        await tx.objectStore(STORE_NAME).delete(computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-delete\" /* STORAGE_DELETE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const userAgent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        if (this._heartbeatsCache.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            // Do not store a heartbeat if one is already stored for this day.\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.push({ date, userAgent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache = this._heartbeatsCache.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: It will read heartbeats from the heartbeatsCache, instead of from indexedDB to reduce latency\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null, it's been cleared and has not been repopulated.\r\n        if (this._heartbeatsCache === null) {\r\n            return '';\r\n        }\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache);\r\n        const headerString = base64Encode(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache = unsentEntries;\r\n            // This seems more likely than deleteAll (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache = null;\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.deleteAll();\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.userAgent === singleDateHeartbeat.userAgent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                userAgent: singleDateHeartbeat.userAgent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return [];\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) || [];\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            return writeHeartbeatsToIndexedDB(this.app, { heartbeats });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeats = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                heartbeats: [...existingHeartbeats, ...heartbeats]\r\n            });\r\n        }\r\n    }\r\n    // delete heartbeats\r\n    async delete(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeats = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                heartbeats: existingHeartbeats.filter(existingHeartbeat => !heartbeats.includes(existingHeartbeat))\r\n            });\r\n        }\r\n    }\r\n    // delete all heartbeats\r\n    async deleteAll() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            return deleteHeartbeatsFromIndexedDB(this.app);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64Encode(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\n\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\n//# sourceMappingURL=index.esm2017.js.map\n","import { registerVersion } from '@firebase/app';\nexport * from '@firebase/app';\n\nvar name = \"firebase\";\nvar version = \"9.6.8\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined') {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","// Main sass file importing all other subfiles (check ./sass)\nimport \"./sass/index.sass\";\n\nwindow.addEventListener(\"contextmenu\", e => e.preventDefault());\n\n//#region general\n\n\nfunction getWidth() {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth\n  );\n}\n\n//mimicking css max-width in media queries\nfunction maxWidth(preferedClientWidth){\n    const clientWidth = getWidth();\n    if(clientWidth > preferedClientWidth)\n        return true;\n}\n\nconst isInputEmpty = (textBox) => {\n    return textBox.value == \"\" || textBox.value == null;\n}\n\nconst validateEmail = (email) => {\n  return email.match(\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n};\n\nconst capitalizeFirst = (str) => {\n    return str[0].toUpperCase() + str.slice(1); \n}\n\n//#endregion\n\n//#region Loading qualities\n\nimport Typed from 'typed.js';\n\nconst qualities = [\"Cutting Edge\", \"Upscale\" , \"Artistic\", \"Extraordinary\"];\n\nvar options = {\n  strings: qualities,\n  typeSpeed: 150,\n  backSpeed: 50,\n  shuffle: false,\n  backDelay: 1000,\n  fadeOut: false,\n\n  //cursor\n  showCursor: true,\n  cursorChar: '_',\n};\n\nnew Typed('#qualities strong', options);\n\n//#endregion\n\n\n//#region hobby handling\n\nconst hobbies = document.querySelectorAll('.hobby');\nconst hobbiesContainer = document.querySelector('.hobbies');\n\nhobbies.forEach(hobby => {\n    hobby.addEventListener('focus', () => setJustifyContent(hobby));\n})\n\n\nfunction setJustifyContent(hobby){ //650px\n    if(!maxWidth(650)) return;\n\n    const id = hobby.id;\n    if(id ==  \"developer\")\n        hobbiesContainer.style.justifyContent = \"flex-start\";\n    else if(id == \"designer\")\n        hobbiesContainer.style.justifyContent = \"center\";\n    else if(id == \"collector\")\n        hobbiesContainer.style.justifyContent = \"flex-end\";\n}\n\n//#endregion\n\n//#region ham-nav\n\nconst toggleHamMenu = () => \n    document.querySelector('header').classList.toggle('menu-opened');\n\ndocument.getElementById('btn-ham').addEventListener('click', () => toggleHamMenu());\ndocument.querySelectorAll('.ham-link').forEach(link => link.addEventListener('click', () => toggleHamMenu()));\n\ndocument.getElementById(\"logo\").addEventListener('click', () => {\n    if(document.querySelector('header').classList.contains('menu-opened'))\n        toggleHamMenu();\n});\n\n//#endregion\n\n//#region duties handling\nconst dutyDescriptions = [\"My duty is to ensure fast load times and no issues with rendering and\"\n                        + \" intractions. I'm going to give you the fastest version of your website.\",\n\n                    \"From 4K screen all the way to foldable devices, my layout will be fluent and eye\"\n                        + \" appealing no matter the user's device form factor or brand.\",\n\n                    \"Known about me,  I have a strong preference for strong and powerful yet,\"\n                        + \" easy to use UI.\",\n\n                    \"Ensuring all pages are optimized for search engine results ranking\"\n                        + \" by following SEO best practices and building semantic markup.\"];\n\nconst dutyIcons  = document.querySelectorAll('.duty-icon');\n\ndutyIcons.forEach(dutyIcon => \n    dutyIcon.addEventListener('click',\n        () => activateDuty(dutyIcon)))\n\nfunction activateDuty(dutyIcon){\n    const allDuties = document.querySelectorAll(\".duty\"); \n    const currentDuty = dutyIcon.parentNode;\n\n    allDuties.forEach(duty => duty.classList.remove(\"active-duty\"));\n    currentDuty.classList.add(\"active-duty\");\n\n    const dutyIndex = currentDuty.dataset.index;\n    document.getElementById(\"duty-description\").innerText = dutyDescriptions[dutyIndex];\n}\n//#endregion\n\nconst cards = document.querySelectorAll('.card');\ncards.forEach(card => {\n        let isClickibleElement = false;\n        card.addEventListener('mouseover', \n        (e) => {\n            // Max levels of nesting for a card (6 levels from the top-most element)\n            const cardSubElements = e.path.slice(0, 3);\n\n            isClickibleElement = cardSubElements.find(element => \n                element.classList.contains('card-title') || \n                element.classList.contains('related-link')) ? true : false;\n        });\n\n        card.addEventListener('mousedown', \n        () => {\n            if(!isClickibleElement)\n                card.classList.add('outline-clickables');\n        })\n\n        card.addEventListener('mouseup', \n        () => {\n            card.classList.remove('outline-clickables');\n        })\n    }\n);\n\n\n\n// Form input validation \n\ndocument.querySelectorAll('.text-box').forEach(textBox => {\n    textBox.addEventListener('keyup', validate);\n});\n\n\n\nfunction validate(obj){\n    // obj may be the event args or the <input/> iteself depending on the caller\n    // we'll check for that\n    \n    let textBox;\n    try {\n        textBox = obj.path[0];    \n    } catch {\n        textBox = obj;\n    }\n     \n    const boxId = textBox.id;\n    const errorLabel = document.getElementById(boxId + \"-error-label\"); \n    const parent = textBox.parentElement;\n\n    // general case: no empty textBox\n    if(isInputEmpty(textBox)){\n\n        errorLabel.innerText = capitalizeFirst(boxId) + \" can't be empty.\";\n        parent.classList.add(\"invalid-input\");\n\n        return false;\n    }\n\n    // email must be formarted correctly and cannot be mine :\"\n    if(boxId == \"email\"){\n        if(!validateEmail(textBox.value)){\n            errorLabel.innerText = \"Invalid email\";\n            parent.classList.add(\"invalid-input\");\n\n            return false;\n        }\n        else if(textBox.value == \"adhamali_4500@outlook.com\"){\n            errorLabel.innerText = \"Email can't be mine\";\n            parent.classList.add(\"invalid-input\");\n        \n            return false;\n        }\n    }\n\n    clearErrorState(textBox);\n    return true;\n}\n\nfunction clearErrorState(textBox){\n    const parent = textBox.parentElement;\n    parent.classList.remove(\"invalid-input\");\n}\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD2bmYjXuVEqBKhx_ICIQkVhzwBfyubq3k\",\n  authDomain: \"my-portfolio-5c98d.firebaseapp.com\",\n  databaseURL: \"https://my-portfolio-5c98d-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"my-portfolio-5c98d\",\n  storageBucket: \"my-portfolio-5c98d.appspot.com\",\n  messagingSenderId: \"998620020062\",\n  appId: \"1:998620020062:web:55d8c4c84547e52e0623cf\",\n  measurementId: \"G-M4BPVY0M92\"\n};\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set } from \"firebase/database\";\n\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\n\n\nfunction storeClientMessage(name, email, message) {\n    const db = getDatabase();\n    set(ref(db, name+'/'), {\n        name: name,\n        email: email,\n        message : message\n    });\n}\n\n\nconst textBoxes = [document.getElementById(\"name\"), \n    document.getElementById(\"email\"),\n    document.getElementById(\"message\")]\nfunction submitForm(){\n    for (let i = 0; i < textBoxes.length; i++) {\n        if(!validate(textBoxes[i])) {\n            textBoxes[i].focus();\n            return;\n        }\n    }\n\n    storeClientMessage(textBoxes[0].value, textBoxes[1].value, textBoxes[2].value);\n\n    form.reset();\n    form.classList.add(\"show-conf\");\n    setTimeout(()=>form.classList.remove(\"show-conf\"), 3500);\n}\n\n\ndocument.getElementById(\"form\").addEventListener(\"submit\", (e) => {\n    e.preventDefault();\n    submitForm();  \n});\n\nvar enterCanSubmit = false;\ndocument.getElementById('contact').addEventListener('mousemove', () => enterCanSubmit = true )\ndocument.addEventListener('keyup', (e) => {\n    if(document.getElementById('message') == document.activeElement)\n        enterCanSubmit = false;\n    \n    if(e.key === \"Enter\" && enterCanSubmit) submitForm(); \n})\n\n"],"names":["exports","toArray","arr","Array","prototype","slice","call","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","promisifyCursorRequestCall","value","Cursor","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","get","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","openDb","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","deleteDb","factory","modules","installedModules","moduleId","module","id","loaded","m","c","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","_initializerJs","_htmlParserJs","Typed","elementId","options","TypeError","_classCallCheck","initializer","load","begin","pause","status","start","stop","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","clearInterval","timeout","replaceText","parentNode","removeChild","strPos","curLoop","insertCursor","onReset","_this","onBegin","shuffleStringsIfNeeded","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","strings","sequence","startDelay","_this2","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","numChars","htmlParser","typeHtmlChars","pauseTime","substr","charAt","test","skip","exec","parseInt","temporaryPause","onTypingPaused","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","onTypingResumed","setPauseStatus","preStringTyped","nextString","_this3","onStringTyped","loop","loopCount","backDelay","_this4","initFadeOut","backSpeed","backSpaceHtmlChars","curStringAtPosition","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cursorBlinking","add","speed","Math","round","random","shuffle","sort","_this5","className","fadeOutDelay","str","attr","setAttribute","isInput","contentType","innerHTML","textContent","_this6","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling","_extends","assign","source","hasOwnProperty","_defaultsJs2","__esModule","Initializer","self","querySelector","tagName","toLowerCase","elContent","getAttribute","isPaused","map","s","trim","stringsElement","style","display","children","stringsLength","stringEl","getCurrentElContent","autoInsertCss","appendAnimationCss","cssDataName","css","type","innerCss","body","appendChild","Infinity","HTMLParser","curChar","endTag","__webpack_module_cache__","__webpack_require__","cachedModule","__webpack_modules__","n","getter","d","a","definition","o","g","globalThis","Function","window","assertion","message","assertionError","Error","stringToByteArray$1","out","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","base64Encode","utf8Bytes","base64Decode","console","deepCopy","deepExtend","constructor","Date","getTime","promise","wrapCallback","catch","isMobileCordova","navigator","FirebaseError","code","customData","super","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","PATTERN","_","replaceTemplate","fullMessage","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","fn","contextObj","res","deepEqual","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","compress_","buf","offset","W","t","f","update","lengthMinusBlock","inbuf","digest","totalBits","j","fnName","argName","stringLength","_delegate","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","isInitialized","shouldAutoInitialize","getOrInitializeService","instanceIdentifier","getImmediate","_a","optional","getComponent","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","existingInstance","invokeOnInitCallbacks","callbacks","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","logLevel","now","toISOString","Logger","_logLevel","_logHandler","_userLogHandler","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","_components","_addComponent","app","_registerComponent","componentName","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","appName","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","upgradeDB","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","tx","put","computeKey","appId","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","userAgent","date","some","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","heartbeats","deleteAll","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","preExist","DB_CHECK_NAME","open","close","deleteDatabase","idbHeartbeatObject","readHeartbeatsFromIndexedDB","existingHeartbeats","existingHeartbeat","deleteHeartbeatsFromIndexedDB","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","sha1","high","stringToByteArray","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","ln","abs","pow","min","floor","LN2","bits","reverse","hexByteString","hexByte","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","setTimeoutNonBlocking","time","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","newScript","onload","onreadystatechange","rstate","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","headers","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","pathString","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","_path","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","nodeFromJSON","json","childData","childrenHavePriority","childSet","sortedChildSet","MAX","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeChildChanged","snapshotNode","oldSnap","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","limit_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","index_","hasStart","hasStartAfter","hasEndBefore","isViewFromLeft","getIndexStartValue","getIndexStartName","hasEnd","getIndexEndValue","getIndexEndName","hasLimit","hasAnchoredLimit","getLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","childKey","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","query_","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","filtered","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","childSnap","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRecordContainsPath_","writeRecord","writeTreeDefaultFilter_","writeTreeLayerTree_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","visibleWrites","writeId","allWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","trackChildChange","oldChange","oldType","changeChildAdded","getChanges","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","completeServerData","nodes","toIterate","writeTreeCalcIndexedSlice","writeTreeRefCalcIndexedSlice","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessor","changePath","writesCache","accumulator","oldEventSnap","newEventCache","completeEventChildren","updateFullNode","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","viewProcessorApplyServerOverwrite","oldViewCache","changedSnap","completeCache","filterServerNode","oldServerSnap","newServerCache","serverFilter","getIndexedFilter","newServerNode","viewProcessorApplyUserOverwrite","oldChild","viewProcessorCacheHasChild","viewProcessorApplyMerge","viewProcessorApplyServerMerge","changedChildren","viewMergeTree","curViewCache","childMergeTree","isUnknownDeepMerge","viewGetCompleteServerCache","view","cache","viewApplyOperation","operation","viewProcessorApplyUserMerge","ackUserWrite","oldEventCache","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","viewProcessorApplyOperation","processor_","eventRegistration","eventRegistrations_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","eventGenerator_","viewGenerateEventsForChanges_","referenceConstructor$1","referenceConstructor","syncPointApplyOperation","syncPoint","optCompleteServerCache","views","concat","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","lastWriteId","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeResetTree_","writeTreeRemoveWrite","syncTreeApplyServerOverwrite","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryKey","splitIndex","syncTreeApplyTaggedOperation_","queryPath","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","existing","unused","existingNode","resolveDeferredValueSnapshot","resolveDeferredValue","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validatePathString","argumentName","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","affectedPath","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","resolveDeferredValueTree","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","toUpperCase","repoCallOnCompleteCallback","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ref","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","_checkNotDeleted","_root","validateWritablePath","validateFirebaseDataArg","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","process","env","authTokenProvider","isValidRootPathString","validateUrl","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","repoInterrupt","repoManagerDeleteRepo","apiName","getDatabase","getApp","heartbeatController","triggerHeartbeat","_getProvider","simpleListen","echo","onEcho","registerDatabase","preventDefault","hobbies","querySelectorAll","hobbiesContainer","hobby","preferedClientWidth","scrollWidth","documentElement","offsetWidth","clientWidth","maxWidth","justifyContent","setJustifyContent","toggleHamMenu","toggle","getElementById","link","dutyDescriptions","validate","textBox","boxId","errorLabel","parentElement","isInputEmpty","innerText","clearErrorState","dutyIcon","allDuties","currentDuty","duty","dutyIndex","dataset","activateDuty","card","isClickibleElement","cardSubElements","element","rawConfig","existingApp","newApp","initializeApp","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","textBoxes","submitForm","focus","email","form","enterCanSubmit","activeElement"],"sourceRoot":""}